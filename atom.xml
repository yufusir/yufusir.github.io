<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤城一豪&amp;blog</title>
  
  <subtitle>一柄枪，一壶酒，一座城，一个人</subtitle>
  <link href="https://yufusir.github.io/atom.xml" rel="self"/>
  
  <link href="https://yufusir.github.io/"/>
  <updated>2025-07-18T10:41:18.629Z</updated>
  <id>https://yufusir.github.io/</id>
  
  <author>
    <name>愚夫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫课程设计（期末实训答辩作品）</title>
    <link href="https://yufusir.github.io/posts/d4024ce.html"/>
    <id>https://yufusir.github.io/posts/d4024ce.html</id>
    <published>2024-12-20T16:00:00.000Z</published>
    <updated>2025-07-18T10:41:18.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫课程设计（期末实训答辩作品）"><a href="#爬虫课程设计（期末实训答辩作品）" class="headerlink" title="爬虫课程设计（期末实训答辩作品）"></a>爬虫课程设计（期末实训答辩作品）</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​        这个小项目是我本次python实训独立完成的作品，这次实训是由企业给我们上课并验收答辩，这个作品也是拿了一个优秀小组作品。本次作品分为爬虫源码、前端服务器源码、前端源码，由于前端服务器源码与前端源码的代码太多，我就没有放在这个文章上面，只有爬虫代码，如果有需要的，可以联系我分享全部的源码。所以这篇文章主要是我这次项目的遇到的问题与在这次实训中获取的经验。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/3ed3b2b383b/250605/d9212a3dac581ae281343cfe04fefc8f.png" alt=""></p><h3 id="本次实训的的目的"><a href="#本次实训的的目的" class="headerlink" title="本次实训的的目的"></a>本次实训的的目的</h3><p>​        本次实训的教学内容是爬取一个网站（自己随便选择一个网站），将你想要的信息爬取下来，然后爬取的信息数据清洗，存入数据库，并搭建web服务器与前端页面，使web服务器与数据库可以数据交互，前端页面与web服务器可以进行数据交互，将清洗的数据用合适的统计图展示在前端，并从中分析价值。</p><h3 id="数据库的建立"><a href="#数据库的建立" class="headerlink" title="数据库的建立"></a>数据库的建立</h3><p>排名、番名、标签、播放总数、追番人数、开播日期，连载状态、评分、评分人数（rank、name、tips、play_num、people、date、status、point、point_num）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE cartoon (</span><br><span class="line">    ct_rank VARCHAR(3) ,</span><br><span class="line">    ct_name VARCHAR(30),</span><br><span class="line">    ct_tips VARCHAR(30),</span><br><span class="line">    ct_play_num VARCHAR(10),</span><br><span class="line">    ct_people VARCHAR(10),</span><br><span class="line">    ct_date VARCHAR(20),</span><br><span class="line">    ct_status VARCHAR(20),</span><br><span class="line">    ct_point VARCHAR(5),</span><br><span class="line">    ct_point_num VARCHAR(10)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬虫代码展示"><a href="#爬虫代码展示" class="headerlink" title="爬虫代码展示"></a>爬虫代码展示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    conn = pymysql.connect(host=&#x27;localhost&#x27;, user=&#x27;root&#x27;, password=&#x27;root&#x27;,  charset=&#x27;utf8mb4&#x27;)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    cursor.execute(&quot;create database if not exists cartoon;&quot;)</span><br><span class="line">    conn.select_db(&quot;cartoon&quot;)</span><br><span class="line"></span><br><span class="line">    cursor.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS news (</span><br><span class="line">    ct_rank VARCHAR(3) ,</span><br><span class="line">    ct_name VARCHAR(30),</span><br><span class="line">    ct_tips VARCHAR(30),</span><br><span class="line">    ct_play_num VARCHAR(10),</span><br><span class="line">    ct_people VARCHAR(10),</span><br><span class="line">    ct_date VARCHAR(20),</span><br><span class="line">    ct_status VARCHAR(20),</span><br><span class="line">    ct_point VARCHAR(5),</span><br><span class="line">    ct_point_num VARCHAR(10)</span><br><span class="line">);&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(&quot;https://www.bilibili.com/v/popular/rank/bangumi&quot;)</span><br><span class="line"></span><br><span class="line">    neaItems=driver.find_elements(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div/div[2]/div[2]/ul/li&quot;)</span><br><span class="line">    num= len(neaItems)</span><br><span class="line">    print(num)</span><br><span class="line">    work_url = []</span><br><span class="line"></span><br><span class="line">    # i = 0</span><br><span class="line">    for neaItem in neaItems:</span><br><span class="line">        link_element = neaItem.find_element(By.XPATH, &quot;div/div[1]/a&quot;)</span><br><span class="line">        url = link_element.get_attribute(&quot;href&quot;)</span><br><span class="line">        work_url.append(url)</span><br><span class="line">        # i += 1</span><br><span class="line">        # if i == 5:</span><br><span class="line">        #     break</span><br><span class="line">    print(work_url)</span><br><span class="line">    driver.close()</span><br><span class="line"></span><br><span class="line">    elems = []</span><br><span class="line">    for i in work_url:</span><br><span class="line">        driver1 = webdriver.Chrome()</span><br><span class="line">        driver1.get(i)</span><br><span class="line">        link_element = driver1.find_element(By.XPATH, &quot;//*[@id=&#x27;__next&#x27;]/div[2]/div[2]/div[2]/div/div[2]/a&quot;)</span><br><span class="line">        url = link_element.get_attribute(&quot;href&quot;)</span><br><span class="line">        driver1.close()</span><br><span class="line">        print(url)</span><br><span class="line">        driver2 = webdriver.Chrome()</span><br><span class="line">        driver2.get(url)</span><br><span class="line">        rank = work_url.index(i) + 1</span><br><span class="line">        name = driver2.find_element(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[1]/span[1]&quot;).text</span><br><span class="line">        tip = driver2.find_elements(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[1]/span[2]/span&quot;)</span><br><span class="line">        tips = &#x27;&#x27;</span><br><span class="line">        for i in tip:</span><br><span class="line">            if tips == &#x27;&#x27;:</span><br><span class="line">                tips = i.text</span><br><span class="line">                continue</span><br><span class="line">            j = i.text</span><br><span class="line">            tips = tips + &#x27;,&#x27; + j</span><br><span class="line">        play_num = driver2.find_element(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[2]/div[1]/span[1]/em&quot;).text</span><br><span class="line">        people = driver2.find_element(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[2]/div[1]/span[2]/em&quot;).text</span><br><span class="line">        date = driver2.find_element(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[3]/span[1]&quot;).text</span><br><span class="line">        status = driver2.find_element(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[3]/span[2]&quot;).text</span><br><span class="line">        point = driver2.find_element(By.XPATH, &quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[2]/div[2]/div/div[1]&quot;).text</span><br><span class="line">        try:</span><br><span class="line">            point_num = driver2.find_element(By.XPATH,&quot;//*[@id=&#x27;app&#x27;]/div[1]/div[2]/div/div[2]/div[2]/div[2]/div/div[2]/div[1]&quot;).text</span><br><span class="line">        except Exception :</span><br><span class="line">            point_num = &#x27;评分人数不足&#x27;</span><br><span class="line">        driver2.close()</span><br><span class="line">        print(rank)</span><br><span class="line">        print(tips)</span><br><span class="line">        print(name)</span><br><span class="line">        print(play_num)</span><br><span class="line">        print(people)</span><br><span class="line">        print(date)</span><br><span class="line">        print(status)</span><br><span class="line">        print(point)</span><br><span class="line">        print(point_num)</span><br><span class="line">        elem = &#123;</span><br><span class="line">            &quot;rank&quot;:str(rank),</span><br><span class="line">            &quot;name&quot;:name,</span><br><span class="line">            &quot;tips&quot;:tips,</span><br><span class="line">            &quot;play_num&quot;:play_num,</span><br><span class="line">            &quot;people&quot;:people,</span><br><span class="line">            &quot;date&quot;:date,</span><br><span class="line">            &quot;status&quot;:status,</span><br><span class="line">            &quot;point&quot;:point,</span><br><span class="line">            &quot;point_num&quot;:point_num</span><br><span class="line">        &#125;</span><br><span class="line">        elems.append(elem)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sql = &quot;insert into news(ct_rank,ct_name,ct_tips,ct_play_num,ct_people,ct_date,ct_status,ct_point,ct_point_num) values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;</span><br><span class="line">    for item in elems:</span><br><span class="line">        cursor.execute(sql, (</span><br><span class="line">            item[&#x27;rank&#x27;], item[&#x27;name&#x27;], item[&#x27;tips&#x27;], item[&#x27;play_num&#x27;], item[&#x27;people&#x27;], item[&#x27;date&#x27;], item[&#x27;status&#x27;],</span><br><span class="line">            item[&#x27;point&#x27;], item[&#x27;point_num&#x27;]))</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p>代码作用：连接本地的数据库，然后判断本地的数据里是否有cartoon的数据库，如果没有cartoon数据库就创建，然后与cartoon建立连接，在里面检查里面是否存在一个news的表，如果没有这个表就创建一个。接下来就是爬虫操作了，本次爬取的是b站热门动漫的相关信息，首先创建一个Chrome浏览器的实例对象，然后与b站热门番剧榜网站建立连接，根据目标网站的html结构爬取自己需要的内容，我想爬取的信息不在这个页面上面，需要进行深度爬取，意味着我需要进入榜单上每个动漫的详细页面并在里面爬取相关信息，具体步骤就看代码吧。</p><h3 id="本次实训收获"><a href="#本次实训收获" class="headerlink" title="本次实训收获"></a>本次实训收获</h3><ul><li>了解如何使用python中的selenium库对网页的信息进行爬取，并保存在数据库中</li><li>了解使用Tomcat，并使用搭建后端服务器实现与数据库的数据交互</li><li><p>了解使用 AJAX 请求在不重新加载整个页面的情况下与服务器进行异步通信</p></li><li><p>老师给了我们一个免费的听音乐的接口：www.xintuo1.cn</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;爬虫课程设计（期末实训答辩作品）&quot;&gt;&lt;a href=&quot;#爬虫课程设计（期末实训答辩作品）&quot; class=&quot;headerlink&quot; title=&quot;爬虫课程设计（期末实训答辩作品）&quot;&gt;&lt;/a&gt;爬虫课程设计（期末实训答辩作品）&lt;/h3&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="项目实战" scheme="https://yufusir.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="python" scheme="https://yufusir.github.io/tags/python/"/>
    
    <category term="mysql" scheme="https://yufusir.github.io/tags/mysql/"/>
    
    <category term="爬虫" scheme="https://yufusir.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://yufusir.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>数据库课程设计（期末实训答辩作品）</title>
    <link href="https://yufusir.github.io/posts/66b677b.html"/>
    <id>https://yufusir.github.io/posts/66b677b.html</id>
    <published>2024-12-11T16:00:00.000Z</published>
    <updated>2025-01-29T14:38:48.578Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库课程设计（期末实训答辩作品）"><a href="#数据库课程设计（期末实训答辩作品）" class="headerlink" title="数据库课程设计（期末实训答辩作品）"></a>数据库课程设计（期末实训答辩作品）</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​        这次实训是我第一次参加实训课然后独立完成的作品，由于是第一次，我就本着会做就行的心态，然后潦草迅速的完成了这次实训，所以这个作品还是有缺陷的，比如大部分的数据都是手动填入，如果使用列表选择填入的方式会更加灵活。也不是很难，就是把列表的选项连接到数据库的一个表上，然后需要把组件的样式调整（这个过程比较繁琐）。总体代码不是很复杂，我把所有的源代码放在了文章里面，有兴趣的话就自己拿吧。</p><h3 id="宠物医院诊疗管理系统"><a href="#宠物医院诊疗管理系统" class="headerlink" title="宠物医院诊疗管理系统"></a>宠物医院诊疗管理系统</h3><h4 id="数据库基本表"><a href="#数据库基本表" class="headerlink" title="数据库基本表"></a>数据库基本表</h4><p>主人：姓名，电话（主键），会员卡金额（默认为0）</p><p>科室：科室id（主键），科室名称</p><p>宠物：宠物id（主键），宠物名字、种类、性别（男，女）、品种，电话（外键）</p><p>医生：医生id（主键），医生姓名，职称，科室id，电话，入职状态（就职，离职）</p><p>诊疗服务：诊疗服务id（主键），药物信息，服务信息，医疗单价，诊疗时间</p><p>诊疗记录：（医生id，宠物id，诊疗服务id）外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE pet_clinic;</span><br><span class="line">USE pet_clinic;</span><br><span class="line"></span><br><span class="line">-- 创建主人表</span><br><span class="line">CREATE TABLE owner (</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    phone VARCHAR(11) PRIMARY KEY,</span><br><span class="line">    membership_card_balance DECIMAL(10, 2) DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建科室表</span><br><span class="line">CREATE TABLE department (</span><br><span class="line">    department_id INT PRIMARY KEY,</span><br><span class="line">    department_name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建宠物表</span><br><span class="line">CREATE TABLE pet (</span><br><span class="line">    pet_id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    pet_name VARCHAR(20),</span><br><span class="line">    species VARCHAR(20),</span><br><span class="line">    gender VARCHAR(10) CHECK (gender IN (&#x27;雄&#x27;, &#x27;雌&#x27;)),</span><br><span class="line">    breed VARCHAR(20),</span><br><span class="line">    owner_phone VARCHAR(11),</span><br><span class="line">    CONSTRAINT fk_owner FOREIGN KEY (owner_phone) REFERENCES owner(phone)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建医生表</span><br><span class="line">CREATE TABLE doctor (</span><br><span class="line">    doctor_id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    doctor_name VARCHAR(20),</span><br><span class="line">    title VARCHAR(20),</span><br><span class="line">    department_id INT,</span><br><span class="line">    phone VARCHAR(11),</span><br><span class="line">    employment_status VARCHAR(10) DEFAULT &#x27;就职&#x27; CHECK (employment_status IN (&#x27;就职&#x27;, &#x27;离职&#x27;)),</span><br><span class="line">    CONSTRAINT fk_department FOREIGN KEY (department_id) REFERENCES department(department_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建诊疗服务表</span><br><span class="line">CREATE TABLE medical_service (</span><br><span class="line">    medical_service_id  INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    drug_information TEXT,</span><br><span class="line">    service_information TEXT,</span><br><span class="line">    medical_service_time DATETIME,</span><br><span class="line">    unit_price DECIMAL(10, 2) DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建诊疗记录表</span><br><span class="line">CREATE TABLE medical_record (</span><br><span class="line">    doctor_id INT,</span><br><span class="line">    pet_id INT,</span><br><span class="line">    medical_service_id INT AUTO_INCREMENT,</span><br><span class="line">    CONSTRAINT fk_doctor FOREIGN KEY (doctor_id) REFERENCES doctor(doctor_id),</span><br><span class="line">    CONSTRAINT fk_pet FOREIGN KEY (pet_id) REFERENCES pet(pet_id),</span><br><span class="line">    CONSTRAINT fk_medical_service FOREIGN KEY (medical_service_id) REFERENCES medical_service(medical_service_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="前端功能设计"><a href="#前端功能设计" class="headerlink" title="前端功能设计"></a>前端功能设计</h3><p>1.密码登录</p><p>2.录入诊疗信息：姓名，电话，宠物名称，种类，性别，品种，医生id，药物信息，服务信息，单价</p><p>3.入职系统：医生姓名，医生职称，科室id，电话号码</p><p>4.会员充值系统</p><p>5.医生信息修改系统</p><p>6.查询宠物信息、某人的宠物、诊疗信息，某人宠物的诊疗信息，医生信息，某医生的信息，所有在岗医生的信息</p><h3 id="功能需要的sql语句"><a href="#功能需要的sql语句" class="headerlink" title="功能需要的sql语句"></a>功能需要的sql语句</h3><h4 id="诊疗开单需要"><a href="#诊疗开单需要" class="headerlink" title="诊疗开单需要:"></a>诊疗开单需要:</h4><p>1.在owner录入主人信息（姓名，电话）</p><p>2.询owner中的电话</p><p>3.在pet录入宠物信息（宠物名称，品种，性别，）</p><p>4.pet中查询所有宠物名称，品种，性别</p><p>5.在medical_service录入医生id，药品信息，服务信息，服务时间，诊疗单价</p><h4 id="入职系统需要："><a href="#入职系统需要：" class="headerlink" title="入职系统需要："></a>入职系统需要：</h4><p>1.在doctor录入医生姓名，电话，职称，入职科室</p><p>2.查询doctor所有的医生的姓名，电话，职称，入职科室</p><h4 id="会员充值系统需要："><a href="#会员充值系统需要：" class="headerlink" title="会员充值系统需要："></a>会员充值系统需要：</h4><p>1.（存储过程）根据电话号码，查询owenr中的姓名，电话，会员金额</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 切换分隔符</span><br><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">-- 创建存储过程</span><br><span class="line">CREATE PROCEDURE UpdateMembershipBalance(</span><br><span class="line">    IN p_phone VARCHAR(11),</span><br><span class="line">    IN p_new_balance DECIMAL(10, 2)</span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">    UPDATE owner</span><br><span class="line">    SET membership_card_balance = p_new_balance</span><br><span class="line">    WHERE phone = p_phone;</span><br><span class="line"></span><br><span class="line">END //</span><br><span class="line"></span><br><span class="line">-- 切换回默认分隔符</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>2.根据给出的电话号码，修改会员金额</p><h4 id="医生信息修改信息系统："><a href="#医生信息修改信息系统：" class="headerlink" title="医生信息修改信息系统："></a>医生信息修改信息系统：</h4><p>1.根据医生id查询指定医生姓名，职称，科室id，电话，入职状态（就职，离职）</p><p>2.根据医生id修改指定医生的医生姓名，职称，科室id，电话，入职状态（就职，离职）</p><h4 id="查询系统需要："><a href="#查询系统需要：" class="headerlink" title="查询系统需要："></a>查询系统需要：</h4><p>1.（视图）查询所有宠物的主人姓名，电话，宠物名称，种类，性别，品种，会员余额</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW pet_owner_info AS</span><br><span class="line">SELECT </span><br><span class="line">    o.name AS owner_name,</span><br><span class="line">    o.phone AS owner_phone,</span><br><span class="line">    p.pet_name,</span><br><span class="line">    p.species,</span><br><span class="line">    p.gender,</span><br><span class="line">    p.breed,</span><br><span class="line">    o.membership_card_balance</span><br><span class="line">FROM </span><br><span class="line">    owner o</span><br><span class="line">JOIN </span><br><span class="line">    pet p ON o.phone = p.owner_phone;  -- 通过电话关联宠物和主人</span><br></pre></td></tr></table></figure><p>2.查询指定电话的宠物所有的主人姓名，电话，宠物名称，种类，性别，品种</p><p>3.（视图）查询所有宠物诊疗信息包括：主人名字，电话，宠物名称，种类，医生，药物信息，服务信息，单价，诊疗时间。根据诊疗id排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW pet_treatment_info AS</span><br><span class="line">SELECT </span><br><span class="line">    o.name AS owner_name,</span><br><span class="line">    o.phone AS owner_phone,</span><br><span class="line">    p.pet_name,</span><br><span class="line">    p.species,</span><br><span class="line">    d.doctor_name,</span><br><span class="line">    ms.drug_information,</span><br><span class="line">    ms.service_information,</span><br><span class="line">    ms.unit_price,</span><br><span class="line">    ms.medical_service_time</span><br><span class="line">FROM </span><br><span class="line">    medical_record mr</span><br><span class="line">JOIN </span><br><span class="line">    pet p ON mr.pet_id = p.pet_id</span><br><span class="line">JOIN </span><br><span class="line">    owner o ON p.owner_phone = o.phone</span><br><span class="line">JOIN </span><br><span class="line">    doctor d ON mr.doctor_id = d.doctor_id</span><br><span class="line">JOIN </span><br><span class="line">    medical_service ms ON mr.medical_service_id = ms.medical_service_id</span><br><span class="line">ORDER BY </span><br><span class="line">    mr.medical_service_id ;  -- 根据医疗记录ID降序排序</span><br></pre></td></tr></table></figure><p>4.（视图）查询医生的所有信息，包括：医生id，医生名字，职称，科室号，科室名称，电话号码，入职状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW doctor_info AS</span><br><span class="line">SELECT </span><br><span class="line">    d.doctor_id,</span><br><span class="line">    d.doctor_name,</span><br><span class="line">    d.title,</span><br><span class="line">    d.department_id,</span><br><span class="line">    dep.department_name,</span><br><span class="line">    d.phone,</span><br><span class="line">    d.employment_status</span><br><span class="line">FROM </span><br><span class="line">    doctor d</span><br><span class="line">JOIN </span><br><span class="line">    department dep ON d.department_id = dep.department_id;  -- 通过科室 ID 关联医生和科室</span><br></pre></td></tr></table></figure><h3 id="插入基础数据"><a href="#插入基础数据" class="headerlink" title="插入基础数据"></a>插入基础数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 插入科室数据（只保留前三个科室数据插入示例）</span><br><span class="line">INSERT INTO department (department_id, department_name) VALUES</span><br><span class="line">(1, &#x27;内科&#x27;),</span><br><span class="line">(2, &#x27;外科&#x27;),</span><br><span class="line">(3, &#x27;皮肤科&#x27;);</span><br><span class="line"></span><br><span class="line">-- 插入医生数据,可查也可不插</span><br><span class="line">INSERT INTO doctor (doctor_name, title, department_id, phone, employment_status) VALUES</span><br><span class="line">(&#x27;张医生&#x27;, &#x27;主治医师&#x27;, 1, &#x27;13200000001&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;李医生&#x27;, &#x27;副主任医师&#x27;, 2, &#x27;13200000002&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;王医生&#x27;, &#x27;主任医师&#x27;, 3, &#x27;13200000003&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;赵医生&#x27;, &#x27;主治医师&#x27;, 1, &#x27;13200000004&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;孙医生&#x27;, &#x27;副主任医师&#x27;, 2, &#x27;13200000005&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;刘医生&#x27;, &#x27;主任医师&#x27;, 3, &#x27;13200000006&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;陈医生&#x27;, &#x27;主治医师&#x27;, 1, &#x27;13200000007&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;杨医生&#x27;, &#x27;副主任医师&#x27;, 2, &#x27;13200000008&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;黄医生&#x27;, &#x27;主任医师&#x27;, 3, &#x27;13200000009&#x27;, &#x27;就职&#x27;),</span><br><span class="line">(&#x27;周医生&#x27;, &#x27;主治医师&#x27;, 1, &#x27;13200000010&#x27;, &#x27;就职&#x27;);  </span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="LoginPage-py"><a href="#LoginPage-py" class="headerlink" title="LoginPage.py"></a>LoginPage.py</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from tkinter import messagebox</span><br><span class="line">import mysql</span><br><span class="line">from MianPgae import MianPage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主登录界面的设计</span><br><span class="line">class LoginPage:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.root = master</span><br><span class="line">        self.root.geometry(&#x27;300x150&#x27;)</span><br><span class="line">        self.root.title(&#x27;管理人员登录页&#x27;)</span><br><span class="line">        self.page = Frame(self.root)</span><br><span class="line">        self.page.pack()</span><br><span class="line">        self.username = StringVar()</span><br><span class="line">        self.password = StringVar()</span><br><span class="line">        Label(self.page, text=&#x27;账号: &#x27;).grid(row=1, column=1)</span><br><span class="line">        Entry(self.page, textvariable=self.username).grid(row=1, column=2)</span><br><span class="line">        Label(self.page, text=&#x27;密码: &#x27;, ).grid(row=2, column=1, pady=18)</span><br><span class="line">        Entry(self.page, show=&#x27;*&#x27;, textvariable=self.password).grid(row=2, column=2)</span><br><span class="line">        Button(self.page, text=&#x27;注册&#x27;, command=self.register).grid(row=3, column=1, pady=4)</span><br><span class="line">        Button(self.page, text=&#x27;登录&#x27;, command=self.login).grid(row=3, column=2)</span><br><span class="line">        Button(self.page, text=&#x27;退出&#x27;, command=self.page.quit).grid(row=3, column=3)</span><br><span class="line"></span><br><span class="line">    def register(self):</span><br><span class="line">        self.page.destroy()</span><br><span class="line">        add_login(self.root)</span><br><span class="line"></span><br><span class="line">    def login(self):</span><br><span class="line">        uname = self.username.get()</span><br><span class="line">        pwd = self.password.get()</span><br><span class="line">        flag, message = mysql.check_login(uname, pwd)</span><br><span class="line">        if flag:</span><br><span class="line">            self.page.pack_forget()</span><br><span class="line">            if uname == &#x27;root&#x27;:</span><br><span class="line">                mysql.rootstatus = True</span><br><span class="line">            MianPage(self.root)</span><br><span class="line">        else:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=message)</span><br><span class="line"></span><br><span class="line"># 注册界面的设计</span><br><span class="line">class add_login:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.page = master</span><br><span class="line">        self.username = StringVar()</span><br><span class="line">        self.password = StringVar()</span><br><span class="line">        self.password_examine = StringVar()</span><br><span class="line">        self.password_root = StringVar()</span><br><span class="line">        self.page.title(&#x27;注册账号&#x27;)</span><br><span class="line">        self.page.geometry(&#x27;300x200&#x27;)</span><br><span class="line">        self.root = Frame(self.page)</span><br><span class="line">        self.root.pack()</span><br><span class="line">        Label(self.root, text=&#x27;账   号: &#x27;).grid(row=1, column=1)</span><br><span class="line">        Entry(self.root, textvariable=self.username).grid(row=1, column=2)</span><br><span class="line">        Label(self.root, text=&#x27;密   码: &#x27;).grid(row=2, column=1, pady=18)</span><br><span class="line">        Entry(self.root, show=&#x27;*&#x27;, textvariable=self.password).grid(row=2, column=2)</span><br><span class="line">        Label(self.root, text=&#x27;确 认 密 码: &#x27;).grid(row=3, column=1)</span><br><span class="line">        Entry(self.root, show=&#x27;*&#x27;, textvariable=self.password_examine).grid(row=3, column=2)</span><br><span class="line">        Label(self.root, text=&#x27;管理员密码: &#x27;).grid(row=4, column=1, pady=18)</span><br><span class="line">        Entry(self.root, show=&#x27;*&#x27;, textvariable=self.password_root).grid(row=4, column=2)</span><br><span class="line">        Button(self.root, text=&#x27;返  回&#x27;, command=self.login_page).grid(row=5, column=1)</span><br><span class="line">        Button(self.root, text=&#x27;注  册&#x27;, command=self.examine).grid(row=5, column=2)</span><br><span class="line"></span><br><span class="line">    # 返回主登录界面</span><br><span class="line">    def login_page(self):</span><br><span class="line">        self.root.pack_forget()</span><br><span class="line">        LoginPage(self.page)</span><br><span class="line"></span><br><span class="line">    def examine(self):</span><br><span class="line">        self.uname = self.username.get()</span><br><span class="line">        self.pwd = self.password.get()</span><br><span class="line">        self.pwd_exm = self.password_examine.get()</span><br><span class="line">        self.pwd_root = self.password_root.get()</span><br><span class="line">        if len(self.uname) &lt; 5:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;账号不符合要求，请输入最少5位字符&#x27;)</span><br><span class="line">        elif mysql.check_usname(self.uname) == True:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;账号已存在，请更改你的账号&#x27;)</span><br><span class="line">        elif len(self.pwd) &lt; 8:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;密码不符合要求，请输入最少8位字符&#x27;)</span><br><span class="line">        elif self.pwd != self.pwd_exm:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;两次密码不相同，请重新输入&#x27;)</span><br><span class="line">        elif self.pwd_root != &#x27;root&#x27;:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;管理员密码错误，无法注册账号&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            self.login()</span><br><span class="line"></span><br><span class="line">    # 注册登录</span><br><span class="line">    def login(self):</span><br><span class="line">        mysql.add_admin_name_pwd(self.uname, self.pwd)</span><br><span class="line">        self.root.pack_forget()</span><br><span class="line">        MianPage(self.page)</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    page = Tk()</span><br><span class="line">    LoginPage(page)</span><br><span class="line">    page.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="MianPage-py"><a href="#MianPage-py" class="headerlink" title="MianPage.py"></a>MianPage.py</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from views import (Insert1Frame, Insert2Frame, Change1Frame, Change2Frame, Search1Frame,</span><br><span class="line">                   Search2Frame, Search3Frame)</span><br><span class="line">import mysql</span><br><span class="line">import keyboard</span><br><span class="line"></span><br><span class="line"># 主框架</span><br><span class="line">class MianPage:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.root = master</span><br><span class="line">        self.root.title(&#x27;宠物医院诊断管理系统&#x27;)</span><br><span class="line">        self.root.geometry(&#x27;570x460&#x27;)</span><br><span class="line">        self.create_page()</span><br><span class="line"></span><br><span class="line">    def create_page(self):</span><br><span class="line">        self.insert_frame1 = Insert1Frame(self.root)</span><br><span class="line">        self.insert_frame2 = Insert2Frame(self.root)</span><br><span class="line">        self.change_frame1 = Change1Frame(self.root)</span><br><span class="line">        self.change_frame2 = Change2Frame(self.root)</span><br><span class="line">        self.search_frame1 = Search1Frame(self.root)</span><br><span class="line">        self.search_frame2 = Search2Frame(self.root)</span><br><span class="line">        self.search_frame3 = Search3Frame(self.root)</span><br><span class="line"></span><br><span class="line">        menubar = Menu(self.root, tearoff=False)</span><br><span class="line">        menubar.add_command(label=&#x27;诊疗开单&#x27;, command=self.show_insert1)</span><br><span class="line">        if mysql.rootstatus == True:</span><br><span class="line">            menubar.add_command(label=&#x27;入职系统&#x27;, command=self.show_insert2)</span><br><span class="line"></span><br><span class="line">        datachange = Menu(menubar)</span><br><span class="line">        datachange.add_command(label=&quot;会员充值入口系统&quot;, command=self.show_change1, accelerator=&quot;Ctrl + H&quot;)</span><br><span class="line">        if mysql.rootstatus == True:</span><br><span class="line">            datachange.add_command(label=&quot;医生信息修改系统&quot;, command=self.show_change2, accelerator=&quot;Ctrl + X&quot;)</span><br><span class="line"></span><br><span class="line">        datasearch = Menu(menubar)</span><br><span class="line">        datasearch.add_command(label=&quot;诊疗信息&quot;, command=self.show_search1, accelerator=&quot;Ctrl + Z&quot;)</span><br><span class="line">        datasearch.add_command(label=&quot;宠物信息&quot;, command=self.show_search2, accelerator=&quot;Ctrl + C&quot;)</span><br><span class="line">        datasearch.add_command(label=&quot;医生信息&quot;, command=self.show_search3, accelerator=&quot;Ctrl + Y&quot;)</span><br><span class="line"></span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+h&#x27;, self.show_change1)</span><br><span class="line">        if mysql.rootstatus == True:</span><br><span class="line">            keyboard.add_hotkey(&#x27;ctrl+x&#x27;, self.show_change2)</span><br><span class="line"></span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+z&#x27;, self.show_search1)</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+c&#x27;, self.show_search2)</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+y&#x27;, self.show_search3)</span><br><span class="line"></span><br><span class="line">        menubar.add_cascade(label=&quot;修改管理&quot;, menu=datachange)</span><br><span class="line">        menubar.add_cascade(label=&quot;查询系统&quot;, menu=datasearch)</span><br><span class="line"></span><br><span class="line">        self.root.config(menu=menubar)</span><br><span class="line"></span><br><span class="line">        def xShowMenu(event):</span><br><span class="line">            menubar.post(event.x_root, event.y_root)</span><br><span class="line"></span><br><span class="line">        self.root.bind(&quot;&lt;Button-3&gt;&quot;, xShowMenu)</span><br><span class="line">        self.show_insert1()</span><br><span class="line"></span><br><span class="line">    # 调用开单界面</span><br><span class="line">    def show_insert1(self):</span><br><span class="line">        self.root.geometry(&#x27;570x460&#x27;)</span><br><span class="line">        self.insert_frame1.pack()</span><br><span class="line">        self.insert_frame2.forget()</span><br><span class="line">        self.change_frame1.forget()</span><br><span class="line">        self.change_frame2.forget()</span><br><span class="line">        self.search_frame1.forget()</span><br><span class="line">        self.search_frame2.forget()</span><br><span class="line">        self.search_frame3.forget()</span><br><span class="line"></span><br><span class="line">    #进入入职界面</span><br><span class="line">    def show_insert2(self):</span><br><span class="line">        self.root.geometry(&#x27;570x250&#x27;)</span><br><span class="line">        self.insert_frame1.forget()</span><br><span class="line">        self.insert_frame2.pack()</span><br><span class="line">        self.change_frame1.forget()</span><br><span class="line">        self.change_frame2.forget()</span><br><span class="line">        self.search_frame1.forget()</span><br><span class="line">        self.search_frame2.forget()</span><br><span class="line">        self.search_frame3.forget()</span><br><span class="line"></span><br><span class="line">    # 调用会员充值界面</span><br><span class="line">    def show_change1(self):</span><br><span class="line">        self.root.geometry(&#x27;570x290&#x27;)</span><br><span class="line">        self.insert_frame1.forget()</span><br><span class="line">        self.insert_frame2.forget()</span><br><span class="line">        self.change_frame1.pack()</span><br><span class="line">        self.change_frame2.forget()</span><br><span class="line">        self.search_frame1.forget()</span><br><span class="line">        self.search_frame2.forget()</span><br><span class="line">        self.search_frame3.forget()</span><br><span class="line"></span><br><span class="line">    # 调用修改医生信息界面</span><br><span class="line">    def show_change2(self):</span><br><span class="line">        self.root.geometry(&#x27;570x290&#x27;)</span><br><span class="line">        self.insert_frame1.forget()</span><br><span class="line">        self.insert_frame2.forget()</span><br><span class="line">        self.change_frame1.forget()</span><br><span class="line">        self.change_frame2.pack()</span><br><span class="line">        self.search_frame1.forget()</span><br><span class="line">        self.search_frame2.forget()</span><br><span class="line">        self.search_frame3.forget()</span><br><span class="line"></span><br><span class="line">    #调用查询诊疗信息界面</span><br><span class="line">    def show_search1(self):</span><br><span class="line">        self.root.geometry(&#x27;1460x290&#x27;)</span><br><span class="line">        self.insert_frame1.forget()</span><br><span class="line">        self.insert_frame2.forget()</span><br><span class="line">        self.change_frame1.forget()</span><br><span class="line">        self.change_frame2.forget()</span><br><span class="line">        self.search_frame1.pack()</span><br><span class="line">        self.search_frame2.forget()</span><br><span class="line">        self.search_frame3.forget()</span><br><span class="line">    # 调用查询宠物信息界面</span><br><span class="line">    def show_search2(self):</span><br><span class="line">        self.root.geometry(&#x27;570x290&#x27;)</span><br><span class="line">        self.insert_frame1.forget()</span><br><span class="line">        self.insert_frame2.forget()</span><br><span class="line">        self.change_frame1.forget()</span><br><span class="line">        self.change_frame2.forget()</span><br><span class="line">        self.search_frame1.forget()</span><br><span class="line">        self.search_frame2.pack()</span><br><span class="line">        self.search_frame3.forget()</span><br><span class="line"></span><br><span class="line">    # 调用查询医生信息界面</span><br><span class="line">    def show_search3(self):</span><br><span class="line">        self.root.geometry(&#x27;570x290&#x27;)</span><br><span class="line">        self.insert_frame1.forget()</span><br><span class="line">        self.insert_frame2.forget()</span><br><span class="line">        self.change_frame1.forget()</span><br><span class="line">        self.change_frame2.forget()</span><br><span class="line">        self.search_frame1.forget()</span><br><span class="line">        self.search_frame3.pack()</span><br><span class="line">        self.search_frame2.forget()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from tkinter import ttk</span><br><span class="line">import mysql</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># 开单页面设计</span><br><span class="line">class Insert1Frame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.phone = StringVar()</span><br><span class="line">        self.owenr_name = StringVar()</span><br><span class="line">        self.pet_name= StringVar()</span><br><span class="line">        self.species = StringVar()</span><br><span class="line">        self.gender= StringVar()</span><br><span class="line">        self.breed = StringVar()</span><br><span class="line">        self.doctor_id = StringVar()</span><br><span class="line">        self.drug_information = StringVar()</span><br><span class="line">        self.service_information = StringVar()</span><br><span class="line">        self.unit_price = StringVar()</span><br><span class="line">        self.status_insert = StringVar()</span><br><span class="line">        self.status_insert1 = StringVar()</span><br><span class="line">        self.insert_page()</span><br><span class="line"></span><br><span class="line">    def insert_page(self):</span><br><span class="line">        Label(self, text=&#x27;电   话 : &#x27;).grid(row=1, column=1, pady=5)</span><br><span class="line">        self.entry_phone = Entry(self, textvariable=self.phone)</span><br><span class="line">        self.entry_phone.grid(row=1, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;姓   名 : &#x27;).grid(row=2, column=1, pady=5)</span><br><span class="line">        self.entry_owenr_name = Entry(self, textvariable=self.owenr_name)</span><br><span class="line">        self.entry_owenr_name.grid(row=2, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;宠物名称 : &#x27;).grid(row=3, column=1, pady=5)</span><br><span class="line">        self.entry_pet_name = Entry(self, textvariable=self.pet_name)</span><br><span class="line">        self.entry_pet_name.grid(row=3, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;种   类 : &#x27;).grid(row=4, column=1, pady=5)</span><br><span class="line">        self.entry_species = Entry(self, textvariable=self.species)</span><br><span class="line">        self.entry_species.grid(row=4, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;性   别 : &#x27;).grid(row=5, column=1, pady=5)</span><br><span class="line">        self.entry_gender = Entry(self, textvariable=self.gender)</span><br><span class="line">        self.entry_gender.grid(row=5, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;品   种 : &#x27;).grid(row=6, column=1, pady=5)</span><br><span class="line">        self.entry_breed = Entry(self, textvariable=self.breed)</span><br><span class="line">        self.entry_breed.grid(row=6, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;医生 id : &#x27;).grid(row=7, column=1, pady=5)</span><br><span class="line">        self.entry_doctor_id = Entry(self, textvariable=self.doctor_id)</span><br><span class="line">        self.entry_doctor_id.grid(row=7, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;药品信息 : &#x27;).grid(row=8, column=1, pady=5)</span><br><span class="line">        self.entry_drug_information = Entry(self, textvariable=self.drug_information)</span><br><span class="line">        self.entry_drug_information.grid(row=8, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;服务信息 : &#x27;).grid(row=9, column=1, pady=5)</span><br><span class="line">        self.entry_service_information = Entry(self, textvariable=self.service_information)</span><br><span class="line">        self.entry_service_information.grid(row=9, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;单价金额 : &#x27;).grid(row=10, column=1, pady=5)</span><br><span class="line">        self.entry_unit_price = Entry(self, textvariable=self.unit_price)</span><br><span class="line">        self.entry_unit_price.grid(row=10, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Button(self, text=&#x27;清空&#x27;, command=self.insert_deleteValue).grid(row=11, column=1, pady=10)</span><br><span class="line">        Button(self, text=&#x27;录入&#x27;, command=self.insert_data).grid(row=11, column=3, pady=10)</span><br><span class="line"></span><br><span class="line">        Label(self, textvariable=self.status_insert1).grid(row=12, column=2, padx=10)</span><br><span class="line">        Label(self, textvariable=self.status_insert).grid(row=13, column=2, padx=10)</span><br><span class="line"></span><br><span class="line">    def insert_data(self):</span><br><span class="line">        if not self.phone.get():</span><br><span class="line">            self.status_insert.set(&#x27;电话不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_phone = self.phone.get()</span><br><span class="line"></span><br><span class="line">        if not self.owenr_name.get():</span><br><span class="line">            self.status_insert.set(&#x27;姓名不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_owner_name = self.owenr_name.get()</span><br><span class="line"></span><br><span class="line">        if not self.pet_name.get():</span><br><span class="line">            self.status_insert.set(&#x27;宠物名称不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_pet_name = self.pet_name.get()</span><br><span class="line"></span><br><span class="line">        if not self.species.get():</span><br><span class="line">            self.status_insert.set(&#x27;种类不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_species = self.species.get()</span><br><span class="line"></span><br><span class="line">        if not self.gender.get():</span><br><span class="line">            self.status_insert.set(&#x27;性别不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_gender = self.gender.get()</span><br><span class="line"></span><br><span class="line">        if self.insert_gender not in [&#x27;雄&#x27;, &#x27;雌&#x27;]:</span><br><span class="line">            self.status_insert.set(&#x27;性别只能填雄或雌&#x27;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        if not self.breed.get():</span><br><span class="line">            self.insert_breed = &#x27;NULL&#x27;</span><br><span class="line">        else: self.insert_breed = self.breed.get()</span><br><span class="line"></span><br><span class="line">        if not self.doctor_id.get():</span><br><span class="line">            self.status_insert.set(&#x27;医生id不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_doctor_id = int(self.doctor_id.get())</span><br><span class="line"></span><br><span class="line">        if not self.drug_information.get():</span><br><span class="line">            self.drug_information = &#x27;NULL&#x27;</span><br><span class="line">        else:</span><br><span class="line">            self.insert_drug_information = self.drug_information.get()</span><br><span class="line"></span><br><span class="line">        if not self.service_information.get():</span><br><span class="line">            self.service_information = &#x27;NULL&#x27;</span><br><span class="line">        else:</span><br><span class="line">            self.insert_service_information = self.service_information.get()</span><br><span class="line"></span><br><span class="line">        if not self.unit_price.get():</span><br><span class="line">            self.status_insert.set(&#x27;单价金额不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_unit_price = float(self.unit_price.get())</span><br><span class="line"></span><br><span class="line">        flag, s = mysql.check_doctor_id(self.insert_doctor_id)</span><br><span class="line">        self.status_insert.set(s)</span><br><span class="line">        if flag == False:</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        owner = (self.insert_owner_name, self.insert_phone)</span><br><span class="line">        mysql.insert_owner(owner)</span><br><span class="line"></span><br><span class="line">        tip, flag, mm = mysql.check_mumbership(self.insert_phone, self.insert_unit_price)</span><br><span class="line">        self.status_insert1.set(tip)</span><br><span class="line">        if flag == False:</span><br><span class="line">            self.status_insert.set(&quot;交易停止&quot;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        pet = (self.insert_pet_name, self.insert_species, self.insert_gender, self.insert_breed, self.insert_phone)</span><br><span class="line">        mysql.insert_pet(pet)</span><br><span class="line"></span><br><span class="line">        current_time = datetime.now()</span><br><span class="line">        formatted_time = current_time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">        service = (self.insert_drug_information, self.insert_service_information, formatted_time, mm)</span><br><span class="line">        mysql.insert_service(service)</span><br><span class="line"></span><br><span class="line">        record = (self.insert_pet_name, self.insert_species, self.insert_gender, self.insert_breed, self.insert_phone, self.insert_doctor_id)</span><br><span class="line">        mysql.insert_record(record)</span><br><span class="line">        self.status_insert.set(&quot;录入诊疗记录&quot;)</span><br><span class="line">        self.insert_deleteValue()</span><br><span class="line"></span><br><span class="line">    def insert_deleteValue(self):</span><br><span class="line">        self.entry_phone.delete(0, END)</span><br><span class="line">        self.entry_owenr_name.delete(0, END)</span><br><span class="line">        self.entry_pet_name.delete(0, END)</span><br><span class="line">        self.entry_species.delete(0, END)</span><br><span class="line">        self.entry_gender.delete(0, END)</span><br><span class="line">        self.entry_breed.delete(0, END)</span><br><span class="line">        self.entry_doctor_id.delete(0, END)</span><br><span class="line">        self.entry_drug_information.delete(0, END)</span><br><span class="line">        self.entry_service_information.delete(0, END)</span><br><span class="line">        self.entry_unit_price.delete(0, END)</span><br><span class="line"></span><br><span class="line"># 入职页面设计</span><br><span class="line">class Insert2Frame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.name = StringVar()</span><br><span class="line">        self.title= StringVar()</span><br><span class="line">        self.department_id = StringVar()</span><br><span class="line">        self.phone = StringVar()</span><br><span class="line">        self.status_insert = StringVar()</span><br><span class="line">        self.insert_page()</span><br><span class="line"></span><br><span class="line">    def insert_page(self):</span><br><span class="line">        Label(self, text=&#x27;姓   名 : &#x27;).grid(row=1, column=1, pady=5)</span><br><span class="line">        self.entry_name = Entry(self, textvariable=self.name)</span><br><span class="line">        self.entry_name.grid(row=1, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;电   话 : &#x27;).grid(row=2, column=1, pady=5)</span><br><span class="line">        self.entry_phohe = Entry(self, textvariable=self.phone)</span><br><span class="line">        self.entry_phohe.grid(row=2, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;职   称 : &#x27;).grid(row=3, column=1, pady=5)</span><br><span class="line">        self.entry_title = Entry(self, textvariable=self.title)</span><br><span class="line">        self.entry_title.grid(row=3, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;入职科室id: &#x27;).grid(row=4, column=1, pady=5)</span><br><span class="line">        self.entry_department_id = Entry(self, textvariable=self.department_id)</span><br><span class="line">        self.entry_department_id.grid(row=4, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Button(self, text=&#x27;清空&#x27;, command=self.insert_deleteValue).grid(row=5, column=1, pady=10)</span><br><span class="line">        Button(self, text=&#x27;录入&#x27;, command=self.insert_data).grid(row=5, column=3, pady=10)</span><br><span class="line"></span><br><span class="line">        Label(self, textvariable=self.status_insert).grid(row=8, column=2, padx=10)</span><br><span class="line"></span><br><span class="line">    def insert_data(self):</span><br><span class="line">        if not self.name.get():</span><br><span class="line">            self.status_insert.set(&quot;姓名不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_name = self.name.get()</span><br><span class="line"></span><br><span class="line">        if not self.phone.get():</span><br><span class="line">            self.status_insert.set(&quot;电话不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_phone = self.phone.get()</span><br><span class="line"></span><br><span class="line">        if not self.title.get():</span><br><span class="line">            self.status_insert.set(&quot;职称不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_title = self.title.get()</span><br><span class="line"></span><br><span class="line">        if not self.department_id.get():</span><br><span class="line">            self.status_insert.set(&quot;科室id不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        else: self.insert_department_id = int(self.department_id.get())</span><br><span class="line"></span><br><span class="line">        flag1, s1 = mysql.check_department_id(self.insert_department_id)</span><br><span class="line">        self.status_insert.set(s1)</span><br><span class="line">        if flag1 == False:</span><br><span class="line">            return</span><br><span class="line">        flag, s = mysql.check_doctor(self.insert_name, self.insert_phone, self.insert_title, self.insert_department_id)</span><br><span class="line">        self.status_insert.set(s)</span><br><span class="line">        if flag == False:</span><br><span class="line">            return</span><br><span class="line">        mysql.insert_doctor(self.insert_name, self.insert_phone, self.insert_title, self.insert_department_id)</span><br><span class="line">        self.status_insert.set(&#x27;录入成功&#x27;)</span><br><span class="line">        self.insert_deleteValue()</span><br><span class="line"></span><br><span class="line">    def insert_deleteValue(self):</span><br><span class="line">        self.entry_phohe.delete(0, END)</span><br><span class="line">        self.entry_name.delete(0, END)</span><br><span class="line">        self.entry_title.delete(0, END)</span><br><span class="line">        self.entry_department_id.delete(0, END)</span><br><span class="line"></span><br><span class="line"># 会员充值界面设计</span><br><span class="line">class Change1Frame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root, width=570, height=290)</span><br><span class="line">        self.change_phone = StringVar()</span><br><span class="line">        self.status = StringVar()</span><br><span class="line">        self.status_name = StringVar()</span><br><span class="line">        self.change_money = StringVar()</span><br><span class="line">        self.name = StringVar()</span><br><span class="line">        self.phone = StringVar()</span><br><span class="line">        self.money_change_before = StringVar()</span><br><span class="line">        self.insert_page()</span><br><span class="line"></span><br><span class="line">    def insert_page(self):</span><br><span class="line">        Label(self, text=&#x27;请输入需要查询客户的&#x27;).place(x=40, y=60)</span><br><span class="line">        Label(self, text=&#x27;电话号码&#x27;).place(x=64, y=80)</span><br><span class="line">        Entry(self, textvariable=self.change_phone).place(x=30, y=100)</span><br><span class="line">        Button(self, text=&#x27;按电话查询&#x27;, command=self.money_change).place(x=30, y=130)</span><br><span class="line">        Button(self, text=&#x27;清除会员余额&#x27;, command=self.delete).place(x=110, y=130)</span><br><span class="line">        Label(self, textvariable=self.status).place(x=45, y=160)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;姓    名 : &#x27;).place(x=240, y=40)</span><br><span class="line">        Label(self, textvariable=self.name).place(x=300, y=40)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;电    话 : &#x27;).place(x=240, y=70)</span><br><span class="line">        Label(self, textvariable=self.phone).place(x=300, y=70)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;会员余额 : &#x27;).place(x=240, y=100)</span><br><span class="line">        Label(self, textvariable=self.money_change_before).place(x=300, y=100)</span><br><span class="line">        self.entry_change_money = Entry(self, textvariable=self.change_money)</span><br><span class="line">        self.entry_change_money.place(x=380, y=100)</span><br><span class="line"></span><br><span class="line">        Button(self, text=&#x27;充    值&#x27;, command=self.add_money).place(x=420, y=130)</span><br><span class="line">        Label(self, textvariable=self.status_name).place(x=405, y=160)</span><br><span class="line"></span><br><span class="line">    def money_change(self):</span><br><span class="line">        if self.change_phone.get():</span><br><span class="line">            self.search_phone = self.change_phone.get()</span><br><span class="line">            flag, owner = mysql.search_phone(self.search_phone)</span><br><span class="line">            if flag:</span><br><span class="line">                self.change_Information(owner)</span><br><span class="line">                self.status.set(&#x27;数据查询成功&#x27;)</span><br><span class="line">            else:</span><br><span class="line">                self.status.set(owner)</span><br><span class="line">        else:</span><br><span class="line">            self.status.set(&#x27;请输入需要查询的电话&#x27;)</span><br><span class="line"></span><br><span class="line">    def change_Information(self, owner):</span><br><span class="line">        self.name.set(owner[0][0])</span><br><span class="line">        self.phone.set(owner[0][1])</span><br><span class="line">        self.money_change_before.set(owner[0][2])</span><br><span class="line"></span><br><span class="line">    def add_money(self):</span><br><span class="line">        if not self.change_money.get():</span><br><span class="line">            self.status_name.set(&#x27;请输入充值的余额&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_money = float(self.change_money.get())</span><br><span class="line"></span><br><span class="line">        mysql.change_mumbership(self.phone.get(), self.insert_money)</span><br><span class="line">        self.status_name.set(&#x27;充值成功&#x27;)</span><br><span class="line"></span><br><span class="line">    def delete(self):</span><br><span class="line">        if self.phone.get():</span><br><span class="line">            mysql.delete_mumbership(self.phone.get())</span><br><span class="line">            self.status.set(&#x27;清除成功&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            self.status.set(&#x27;请先查寻有效用户&#x27;)</span><br><span class="line"></span><br><span class="line"># 医生信息修改界面</span><br><span class="line">class Change2Frame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root, width=570, height=290)</span><br><span class="line">        self.change_doctor_id = StringVar()</span><br><span class="line">        self.status = StringVar()</span><br><span class="line">        self.status_name = StringVar()</span><br><span class="line">        self.phone = StringVar()</span><br><span class="line">        self.doctor_name = StringVar()</span><br><span class="line">        self.title = StringVar()</span><br><span class="line">        self.department_id = StringVar()</span><br><span class="line">        self.employment_status = StringVar()</span><br><span class="line">        self.doctor_name_change_before = StringVar()</span><br><span class="line">        self.title_change_before = StringVar()</span><br><span class="line">        self.department_id_change_before = StringVar()</span><br><span class="line">        self.phone_change_before = StringVar()</span><br><span class="line">        self.employment_status_change_before = StringVar()</span><br><span class="line">        self.insert_page()</span><br><span class="line"></span><br><span class="line">    def insert_page(self):</span><br><span class="line">        Label(self, text=&#x27;请输入需要查询医生的id&#x27;).place(x=40, y=60)</span><br><span class="line">        Entry(self, textvariable=self.change_doctor_id).place(x=30, y=100)</span><br><span class="line">        Button(self, text=&#x27;按医生id查询&#x27;, command=self.select_dotcor).place(x=70, y=130)</span><br><span class="line">        Label(self, textvariable=self.status).place(x=45, y=160)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;姓   名 : &#x27;).place(x=240, y=20)</span><br><span class="line">        Label(self, textvariable=self.doctor_name_change_before).place(x=300, y=20)</span><br><span class="line">        self.entry_doctor_name = Entry(self, textvariable=self.doctor_name)</span><br><span class="line">        self.entry_doctor_name.place(x=380, y=20)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;职   称 : &#x27;).place(x=240, y=50)</span><br><span class="line">        Label(self, textvariable=self.title_change_before).place(x=300, y=50)</span><br><span class="line">        self.entry_title = Entry(self, textvariable=self.title)</span><br><span class="line">        self.entry_title.place(x=380, y=50)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;科室id : &#x27;).place(x=240, y=80)</span><br><span class="line">        Label(self, textvariable=self.department_id_change_before).place(x=300, y=80)</span><br><span class="line">        self.entry_department_id = Entry(self, textvariable=self.department_id)</span><br><span class="line">        self.entry_department_id.place(x=380, y=80)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;电   话 : &#x27;).place(x=240, y=110)</span><br><span class="line">        Label(self, textvariable=self.phone_change_before).place(x=300, y=110)</span><br><span class="line">        self.entry_phone = Entry(self, textvariable=self.phone)</span><br><span class="line">        self.entry_phone.place(x=380, y=110)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;入职状态 : &#x27;).place(x=240, y=140)</span><br><span class="line">        Label(self, textvariable=self.employment_status_change_before).place(x=300, y=140)</span><br><span class="line">        self.entry_employment_status = Entry(self, textvariable=self.employment_status)</span><br><span class="line">        self.entry_employment_status.place(x=380, y=140)</span><br><span class="line"></span><br><span class="line">        Button(self, text=&#x27;保    存&#x27;, command=self.update_information).place(x=320, y=190)</span><br><span class="line">        Label(self, textvariable=self.status_name).place(x=305, y=220)</span><br><span class="line"></span><br><span class="line">    def select_dotcor(self):</span><br><span class="line">        if self.change_doctor_id.get():</span><br><span class="line">            self.search_doctor = int(self.change_doctor_id.get())</span><br><span class="line">            flag, doctor = mysql.search_doctor(self.search_doctor)</span><br><span class="line">            if flag:</span><br><span class="line">                self.change_Information(doctor)</span><br><span class="line">                self.status.set(&#x27;数据查询成功&#x27;)</span><br><span class="line">            else:</span><br><span class="line">                self.status.set(doctor)</span><br><span class="line">        else:</span><br><span class="line">            self.status.set(&#x27;请输入需要查询的医生id&#x27;)</span><br><span class="line"></span><br><span class="line">    def change_Information(self, doctor):</span><br><span class="line">        self.doctor_name.set(doctor[0][0])</span><br><span class="line">        self.title.set(doctor[0][1])</span><br><span class="line">        self.department_id.set(doctor[0][2])</span><br><span class="line">        self.phone.set(doctor[0][3])</span><br><span class="line">        self.employment_status.set(doctor[0][4])</span><br><span class="line">        self.doctor_name_change_before.set(doctor[0][0])</span><br><span class="line">        self.title_change_before.set(doctor[0][1])</span><br><span class="line">        self.department_id_change_before.set(doctor[0][2])</span><br><span class="line">        self.phone_change_before.set(doctor[0][3])</span><br><span class="line">        self.employment_status_change_before.set(doctor[0][4])</span><br><span class="line"></span><br><span class="line">    def update_information(self):</span><br><span class="line">        if not self.doctor_name.get():</span><br><span class="line">            self.status_name.set(&#x27;姓名不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_doctor_name = self.doctor_name.get()</span><br><span class="line"></span><br><span class="line">        if not self.title.get():</span><br><span class="line">            self.status_name.set(&#x27;职称不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_title = self.title.get()</span><br><span class="line"></span><br><span class="line">        if not self.department_id.get():</span><br><span class="line">            self.status_name.set(&#x27;科室id不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_department_id = int(self.department_id.get())</span><br><span class="line"></span><br><span class="line">        if not self.phone.get():</span><br><span class="line">            self.status_name.set(&#x27;电话不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_phone = self.phone.get()</span><br><span class="line"></span><br><span class="line">        if not self.employment_status.get():</span><br><span class="line">            self.status_name.set(&#x27;入职状态不能为空&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_employment_status = self.employment_status.get()</span><br><span class="line"></span><br><span class="line">        if self.insert_employment_status not in [&#x27;就职&#x27;, &#x27;离职&#x27;]:</span><br><span class="line">            self.status_name.set(&#x27;入职状态只能填就职或离职&#x27;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        flag1, s1 = mysql.check_department_id(self.insert_department_id)</span><br><span class="line">        self.status_name.set(s1)</span><br><span class="line">        if flag1 == False:</span><br><span class="line">            return</span><br><span class="line">        mysql.update_doctor(self.insert_doctor_name, self.insert_title, self.insert_department_id, self.insert_phone, self.insert_employment_status, int(self.change_doctor_id.get()))</span><br><span class="line">        self.status_name.set(&#x27;修改成功&#x27;)</span><br><span class="line">        self.delete_value()</span><br><span class="line"></span><br><span class="line">    def delete_value(self):</span><br><span class="line">        self.entry_doctor_name.delete(0, END)</span><br><span class="line">        self.entry_title.delete(0, END)</span><br><span class="line">        self.entry_department_id.delete(0, END)</span><br><span class="line">        self.entry_phone.delete(0, END)</span><br><span class="line">        self.entry_employment_status.delete(0, END)</span><br><span class="line"></span><br><span class="line"># 查询诊疗信息界面设计</span><br><span class="line">class Search1Frame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.table_search_view = Frame()</span><br><span class="line">        self.show_table_search()</span><br><span class="line"></span><br><span class="line">    def show_table_search(self):</span><br><span class="line">        columns = (&quot;name&quot;, &quot;phone&quot;, &quot;pname&quot;, &quot;species&quot;, &quot;doctor&quot;, &quot;drug&quot;, &quot;service&quot;, &quot;price&quot;, &quot;time&quot;)</span><br><span class="line">        columns_values = (&quot;主人名称&quot;, &quot;电话号码&quot;, &quot;宠物名称&quot;, &quot;种类&quot;, &quot;医生&quot;, &quot;药物信息&quot;, &quot;服务信息&quot;, &quot;本次付费&quot;, &quot;诊疗时间&quot;)</span><br><span class="line">        self.tree_view = ttk.Treeview(self, show=&#x27;headings&#x27;, columns=columns)</span><br><span class="line"></span><br><span class="line">        for col in columns:</span><br><span class="line">            self.tree_view.column(col, width=160, anchor=&#x27;center&#x27;)</span><br><span class="line"></span><br><span class="line">        for col, colvalue in zip(columns, columns_values):</span><br><span class="line">            self.tree_view.heading(col, text=colvalue)</span><br><span class="line"></span><br><span class="line">        self.tree_view.pack(fill=BOTH, expand=True)</span><br><span class="line">        self.show_search_data()</span><br><span class="line"></span><br><span class="line">        self.owner_phone = StringVar()</span><br><span class="line">        Entry(self, textvariable=self.owner_phone).pack(side=LEFT)</span><br><span class="line">        Button(self, text=&#x27;根据电话查询&#x27;, command=self.search_phone).pack(side=LEFT)</span><br><span class="line"></span><br><span class="line">    def search_phone(self):</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        if not self.owner_phone.get():</span><br><span class="line">            self.show_search_data()</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.phone_value = self.owner_phone.get()</span><br><span class="line">            data = mysql.search_owner_phone(self.phone_value)</span><br><span class="line"></span><br><span class="line">        index = -1</span><br><span class="line">        for i in data:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                i[&#x27;name&#x27;], i[&#x27;phone&#x27;], i[&#x27;pname&#x27;], i[&#x27;species&#x27;],</span><br><span class="line">                i[&#x27;doctor&#x27;], i[&#x27;drug&#x27;], i[&#x27;service&#x27;], i[&#x27;price&#x27;], i[&#x27;time&#x27;]</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">    def show_search_data(self):</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        data = mysql.pet_information()</span><br><span class="line">        index = -1</span><br><span class="line">        for i in data:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                i[&#x27;name&#x27;], i[&#x27;phone&#x27;], i[&#x27;pname&#x27;], i[&#x27;species&#x27;],</span><br><span class="line">                i[&#x27;doctor&#x27;], i[&#x27;drug&#x27;], i[&#x27;service&#x27;], i[&#x27;price&#x27;], i[&#x27;time&#x27;]</span><br><span class="line">            ))</span><br><span class="line"># 查询宠物信息界面设计</span><br><span class="line">class Search2Frame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.table_search_view = Frame()</span><br><span class="line">        self.show_table_search()</span><br><span class="line"></span><br><span class="line">    def show_table_search(self):</span><br><span class="line">        columns = (&quot;name&quot;, &quot;phone&quot;, &quot;pname&quot;, &quot;species&quot;, &quot;gender&quot;, &quot;breed&quot;, &quot;money&quot;)</span><br><span class="line">        columns_values = (&quot;主人名称&quot;, &quot;电话号码&quot;, &quot;宠物名称&quot;, &quot;种类&quot;, &quot;性别&quot;, &quot;品种&quot;, &quot;会员余额&quot;)</span><br><span class="line">        self.tree_view = ttk.Treeview(self, show=&#x27;headings&#x27;, columns=columns)</span><br><span class="line"></span><br><span class="line">        for col in columns:</span><br><span class="line">            self.tree_view.column(col, width=80, anchor=&#x27;center&#x27;)</span><br><span class="line"></span><br><span class="line">        for col, colvalue in zip(columns, columns_values):</span><br><span class="line">            self.tree_view.heading(col, text=colvalue)</span><br><span class="line"></span><br><span class="line">        self.tree_view.pack(fill=BOTH, expand=True)</span><br><span class="line">        self.show_search_data()</span><br><span class="line"></span><br><span class="line">        self.owner_phone = StringVar()</span><br><span class="line">        Entry(self, textvariable=self.owner_phone).pack(side=LEFT)</span><br><span class="line">        Button(self, text=&#x27;根据电话查询&#x27;, command=self.search_phone).pack(side=LEFT)</span><br><span class="line"></span><br><span class="line">    def search_phone(self):</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        if not self.owner_phone.get():</span><br><span class="line">            self.show_search_data()</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.phone_value = self.owner_phone.get()</span><br><span class="line">            data = mysql.search_owner_phone1(self.phone_value)</span><br><span class="line"></span><br><span class="line">        index = -1</span><br><span class="line">        for i in data:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                i[&#x27;name&#x27;], i[&#x27;phone&#x27;], i[&#x27;pname&#x27;], i[&#x27;species&#x27;],</span><br><span class="line">                i[&#x27;gender&#x27;], i[&#x27;breed&#x27;], i[&#x27;money&#x27;]</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">    def show_search_data(self):</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        data = mysql.pet_information1()</span><br><span class="line">        index = -1</span><br><span class="line">        for i in data:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                i[&#x27;name&#x27;], i[&#x27;phone&#x27;], i[&#x27;pname&#x27;], i[&#x27;species&#x27;],</span><br><span class="line">                i[&#x27;gender&#x27;], i[&#x27;breed&#x27;], i[&#x27;money&#x27;]</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line"># 查询医生信息界面设计</span><br><span class="line">class Search3Frame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.table_search_view = Frame()</span><br><span class="line">        self.show_table_search()</span><br><span class="line"></span><br><span class="line">    def show_table_search(self):</span><br><span class="line">        columns = (&quot;id1&quot;, &quot;name&quot;, &quot;title&quot;, &quot;id2&quot;, &quot;k_name&quot;, &quot;phone&quot;, &quot;status&quot;)</span><br><span class="line">        columns_values = (&quot;医生id&quot;, &quot;医生名称&quot;, &quot;职称&quot;, &quot;科室id&quot;, &quot;科室名称&quot;, &quot;电话号码&quot;, &quot;入职状态&quot;)</span><br><span class="line">        self.tree_view = ttk.Treeview(self, show=&#x27;headings&#x27;, columns=columns)</span><br><span class="line"></span><br><span class="line">        for col in columns:</span><br><span class="line">            self.tree_view.column(col, width=80, anchor=&#x27;center&#x27;)</span><br><span class="line"></span><br><span class="line">        for col, colvalue in zip(columns, columns_values):</span><br><span class="line">            self.tree_view.heading(col, text=colvalue)</span><br><span class="line"></span><br><span class="line">        self.tree_view.pack(fill=BOTH, expand=True)</span><br><span class="line">        self.show_search_data()</span><br><span class="line"></span><br><span class="line">        self.owner_phone = StringVar()</span><br><span class="line">        Entry(self, textvariable=self.owner_phone).pack(side=LEFT)</span><br><span class="line">        Button(self, text=&#x27;根据电话查询&#x27;, command=self.search_phone).pack(side=LEFT)</span><br><span class="line">        Button(self, text=&#x27;在岗&#x27;, command=self.show_search_data1).pack(side=RIGHT)</span><br><span class="line"></span><br><span class="line">    def search_phone(self):</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        if not self.owner_phone.get():</span><br><span class="line">            self.show_search_data()</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.phone_value = self.owner_phone.get()</span><br><span class="line">            data = mysql.search_doctor_phone(self.phone_value)</span><br><span class="line"></span><br><span class="line">        index = -1</span><br><span class="line">        for i in data:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                i[&#x27;id1&#x27;], i[&#x27;name&#x27;], i[&#x27;title&#x27;], i[&#x27;id2&#x27;],</span><br><span class="line">                i[&#x27;k_name&#x27;], i[&#x27;phone&#x27;], i[&#x27;status&#x27;]</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">    def show_search_data(self):</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        data = mysql.doctor_information()</span><br><span class="line">        index = -1</span><br><span class="line">        for i in data:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                i[&#x27;id1&#x27;], i[&#x27;name&#x27;], i[&#x27;title&#x27;], i[&#x27;id2&#x27;],</span><br><span class="line">                i[&#x27;k_name&#x27;], i[&#x27;phone&#x27;], i[&#x27;status&#x27;]</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">    def show_search_data1(self):</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        data = mysql.search_doctor_status()</span><br><span class="line">        index = -1</span><br><span class="line">        for i in data:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                i[&#x27;id1&#x27;], i[&#x27;name&#x27;], i[&#x27;title&#x27;], i[&#x27;id2&#x27;],</span><br><span class="line">                i[&#x27;k_name&#x27;], i[&#x27;phone&#x27;], i[&#x27;status&#x27;]</span><br><span class="line">            ))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mysql-py"><a href="#mysql-py" class="headerlink" title="mysql.py"></a>mysql.py</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=&#x27;127.0.0.1&#x27;,</span><br><span class="line">    port=3306,</span><br><span class="line">    user=&#x27;root&#x27;,</span><br><span class="line">    password=&#x27;root&#x27;,</span><br><span class="line">    autocommit=True</span><br><span class="line">)</span><br><span class="line"># 检查是否为超级管理员</span><br><span class="line">rootstatus = False</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">cursor.execute(&quot;create database if not exists pet_clinic;&quot;)</span><br><span class="line">conn.select_db(&quot;pet_clinic&quot;)</span><br><span class="line"></span><br><span class="line"># 创建管理员账号表</span><br><span class="line">cursor.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS admin_name_pwd(</span><br><span class="line">    name varchar(10),</span><br><span class="line">    pwd varchar(10)</span><br><span class="line">);&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line"># 检查账号是否正确</span><br><span class="line">def check_login(uname, pwd):</span><br><span class="line">    cursor.execute(&quot;select * from admin_name_pwd&quot;)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    for na, pd in results:</span><br><span class="line">        if na == uname and pd == pwd:</span><br><span class="line">            return True, &#x27;登录成功&#x27;</span><br><span class="line">    return False, &#x27;登录失败,账号或密码错误&#x27;</span><br><span class="line"></span><br><span class="line"># 注册一个账号后写入管理员账号表</span><br><span class="line">def add_admin_name_pwd(uname, pwd):</span><br><span class="line">    cursor.execute(&quot;insert into admin_name_pwd values(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;);&quot;.format(uname, pwd))</span><br><span class="line"></span><br><span class="line"># 检查账号是否重复</span><br><span class="line">def check_usname(uname):</span><br><span class="line">    cursor.execute(&quot;select count(*) from admin_name_pwd anp where name = &#x27;&#123;0&#125;&#x27;;&quot;.format(uname))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"># 查询诊疗记录视图</span><br><span class="line">def pet_information():</span><br><span class="line">    cursor.execute(&quot;select * from pet_treatment_info&quot;)</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&quot;name&quot;, &quot;phone&quot;, &quot;pname&quot;, &quot;species&quot;, &quot;doctor&quot;, &quot;drug&quot;, &quot;service&quot;,&quot;price&quot;,&quot;time&quot;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"># 根据电弧查询诊疗记录</span><br><span class="line">def search_owner_phone(phone):</span><br><span class="line">    cursor.execute(&quot;select * from pet_treatment_info where owner_phone = &#x27;&#123;0&#125;&#x27;&quot;.format(phone))</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&quot;name&quot;, &quot;phone&quot;, &quot;pname&quot;, &quot;species&quot;, &quot;doctor&quot;, &quot;drug&quot;, &quot;service&quot;, &quot;price&quot;, &quot;time&quot;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"># 查询宠物信息视图</span><br><span class="line">def pet_information1():</span><br><span class="line">    cursor.execute(&quot;select * from pet_owner_info&quot;)</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&quot;name&quot;, &quot;phone&quot;, &quot;pname&quot;, &quot;species&quot;, &quot;gender&quot;, &quot;breed&quot;, &quot;money&quot;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"># 根据电话查询宠物信息视图</span><br><span class="line">def search_owner_phone1(phone):</span><br><span class="line">    cursor.execute(&quot;select * from pet_owner_info where owner_phone = &#x27;&#123;0&#125;&#x27;&quot;.format(phone))</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&quot;name&quot;, &quot;phone&quot;, &quot;pname&quot;, &quot;species&quot;, &quot;gender&quot;, &quot;breed&quot;, &quot;money&quot;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询医生信息视图</span><br><span class="line">def doctor_information():</span><br><span class="line">    cursor.execute(&quot;select * from doctor_info&quot;)</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&quot;id1&quot;, &quot;name&quot;, &quot;title&quot;, &quot;id2&quot;, &quot;k_name&quot;, &quot;phone&quot;, &quot;status&quot;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"># 根据电话查询医生信息视图</span><br><span class="line">def search_doctor_phone(phone):</span><br><span class="line">    cursor.execute(&quot;select * from doctor_info where phone = &#x27;&#123;0&#125;&#x27;&quot;.format(phone))</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&quot;id1&quot;, &quot;name&quot;, &quot;title&quot;, &quot;id2&quot;, &quot;k_name&quot;, &quot;phone&quot;, &quot;status&quot;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"># 在医生信息视图中查看就职的成员</span><br><span class="line">def search_doctor_status():</span><br><span class="line">    cursor.execute(&quot;select * from doctor_info where employment_status = &#x27;就职&#x27;&quot;)</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&quot;id1&quot;, &quot;name&quot;, &quot;title&quot;, &quot;id2&quot;, &quot;k_name&quot;, &quot;phone&quot;, &quot;status&quot;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"># 检查医生信息是否重复</span><br><span class="line">def check_doctor(name, phone, title, department_id):</span><br><span class="line">    cursor.execute(&quot;select count(*) from doctor where doctor_name = &#x27;&#123;0&#125;&#x27; and phone = &#x27;&#123;1&#125;&#x27; and title = &#x27;&#123;2&#125;&#x27; and  department_id = &#x27;&#123;3&#125;&#x27;;&quot;.format(name, phone, title, department_id))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return False, &quot;该医生已存在请重新输入&quot;</span><br><span class="line">    return True, &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># 检查科室id是否正确</span><br><span class="line">def check_department_id(id):</span><br><span class="line">    cursor.execute(&quot;select count(*) from doctor where department_id = &#x27;&#123;0&#125;&#x27;;&quot;.format(id))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return True, &quot;&quot;</span><br><span class="line">    return False, &#x27;录入失败，科室id输入错误&#x27;</span><br><span class="line"></span><br><span class="line"># 检查医生id是否正确</span><br><span class="line">def check_doctor_id(id):</span><br><span class="line">    cursor.execute(&quot;select count(*) from doctor where doctor_id = &#x27;&#123;0&#125;&#x27;;&quot;.format(id))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return True, &quot;&quot;</span><br><span class="line">    return False, &#x27;录入失败，医生id输入错误&#x27;</span><br><span class="line"></span><br><span class="line"># 检查用户的会员情况</span><br><span class="line">def check_mumbership(phone, unit_price):</span><br><span class="line">    cursor.execute(&quot;select membership_card_balance from owner where phone = &#x27;&#123;0&#125;&#x27;;&quot;.format(phone))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if float(res[0][0]) == 0.00:</span><br><span class="line">        tip = &quot;客户无会员，请使用移动移动设备支付￥&#123;0&#125;&quot;.format(unit_price)</span><br><span class="line">        flag = True</span><br><span class="line">        mm = unit_price</span><br><span class="line">    elif unit_price &gt; 0.88 * float(res[0][0]):</span><br><span class="line">        tip = &quot;客户的会员余额还有：&#123;0&#125;,不足以支付该单价&quot;.format(res[0][0])</span><br><span class="line">        flag = False</span><br><span class="line">        mm = unit_price</span><br><span class="line">    else:</span><br><span class="line">        tip = &quot;本次会员价￥&#123;0&#125;，会员余额还剩￥&#123;&#125;&quot;.format(0.88 * unit_price, float(res[0][0]) - 0.88 * unit_price)</span><br><span class="line">        flag = True</span><br><span class="line">        mm = 0.88 * unit_price</span><br><span class="line">        change_mumbership(phone, 0 - mm)</span><br><span class="line">    return tip, flag, mm</span><br><span class="line"></span><br><span class="line"># 插入医生信息</span><br><span class="line">def insert_doctor(name, phone, title, department_id):</span><br><span class="line">    cursor.execute(&quot;INSERT INTO doctor (doctor_name, phone, title, department_id) VALUES (&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;, &#x27;&#123;2&#125;&#x27;, &#x27;&#123;3&#125;&#x27;);&quot;.format(name, phone, title, department_id))</span><br><span class="line"></span><br><span class="line"># 插入不重复的用户信息</span><br><span class="line">def insert_owner(owner):</span><br><span class="line">    cursor.execute(&quot;select count(*) from owner where phone = &#x27;&#123;0&#125;&#x27;;&quot;.format(owner[1]))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return</span><br><span class="line">    cursor.execute(&quot;insert into owner (name, phone) values(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;);&quot;.format(owner[0], owner[1]))</span><br><span class="line"></span><br><span class="line"># 插入不重复的宠物信息</span><br><span class="line">def insert_pet(pet):</span><br><span class="line">    cursor.execute(&quot;select count(*) from pet where pet_name = &#x27;&#123;0&#125;&#x27; and  species = &#x27;&#123;1&#125;&#x27;  and  gender = &#x27;&#123;2&#125;&#x27; and  breed = &#x27;&#123;3&#125;&#x27; and owner_phone = &#x27;&#123;4&#125;&#x27;;&quot;.format(pet[0], pet[1], pet[2], pet[3], pet[4]))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return</span><br><span class="line">    cursor.execute(&quot;insert into pet (pet_name, species, gender, breed, owner_phone) values(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;, &#x27;&#123;2&#125;&#x27;,&#x27;&#123;3&#125;&#x27;,&#x27;&#123;4&#125;&#x27;);&quot;.format(pet[0], pet[1], pet[2], pet[3], pet[4]))</span><br><span class="line"></span><br><span class="line"># 插入服务信息</span><br><span class="line">def insert_service(service):</span><br><span class="line">    cursor.execute(&quot;insert into medical_service (drug_information, service_information, medical_service_time, unit_price) values(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;, &#x27;&#123;2&#125;&#x27;,&#x27;&#123;3&#125;&#x27;);&quot;.format(service[0], service[1], service[2], service[3]))</span><br><span class="line"></span><br><span class="line"># 插入医疗记录</span><br><span class="line">def insert_record(record):</span><br><span class="line">    cursor.execute(&quot;select pet_id from pet where pet_name = &#x27;&#123;0&#125;&#x27; and  species = &#x27;&#123;1&#125;&#x27;  and  gender = &#x27;&#123;2&#125;&#x27; and  breed = &#x27;&#123;3&#125;&#x27; and owner_phone = &#x27;&#123;4&#125;&#x27;;&quot;.format(record[0], record[1], record[2], record[3], record[4]))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    cursor.execute(&quot;insert into medical_record (doctor_id, pet_id) values(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;);&quot;.format(record[5], res[0][0]))</span><br><span class="line"></span><br><span class="line"># 利用存储过程实现会员充值</span><br><span class="line">def change_mumbership(phone, money):</span><br><span class="line">    cursor.execute(&quot;select membership_card_balance from owner where phone = &#x27;&#123;0&#125;&#x27;;&quot;.format(phone))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    cursor.execute(&quot;CALL UpdateMembershipBalance(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;);&quot;.format(phone, float(res[0][0]) + money))</span><br><span class="line"></span><br><span class="line"># 清除会员权力</span><br><span class="line">def delete_mumbership(phene):</span><br><span class="line">    cursor.execute(&quot;UPDATE owner SET membership_card_balance = 0  WHERE phone = &#x27;&#123;0&#125;&#x27;;&quot;.format(phene))</span><br><span class="line"></span><br><span class="line"># 检查是否有这个电话的用户</span><br><span class="line">def search_phone(phone):</span><br><span class="line">    cursor.execute(&quot;select count(*) from owner where phone = &#x27;&#123;0&#125;&#x27;;&quot;.format(phone))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        cursor.execute(&quot;select * from owner where phone = &#x27;&#123;0&#125;&#x27;;&quot;.format(phone))</span><br><span class="line">        owner = cursor.fetchall()</span><br><span class="line">        return True, owner</span><br><span class="line">    else:</span><br><span class="line">        return False, &#x27;电话为&#x27; + str(phone) + &#x27;的用户不存在&#x27;</span><br><span class="line"></span><br><span class="line"># 检查这个id的医生是否存在</span><br><span class="line">def search_doctor(doctor_id):</span><br><span class="line">    cursor.execute(&quot;select count(*) from doctor where doctor_id = &#x27;&#123;0&#125;&#x27;;&quot;.format(doctor_id))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        cursor.execute(&quot;SELECT doctor_name, title, department_id, phone, employment_status FROM doctor WHERE doctor_id = &#x27;&#123;0&#125;&#x27;;&quot;.format(doctor_id))</span><br><span class="line">        doctor = cursor.fetchall()</span><br><span class="line">        return True, doctor</span><br><span class="line">    else:</span><br><span class="line">        return False, &#x27;id为&#x27; + str(doctor_id) + &#x27;的医生不存在&#x27;</span><br><span class="line"># 更新医生的信息</span><br><span class="line">def update_doctor(name, title, department_id, phone, employment_status, doctor_id):</span><br><span class="line">    cursor.execute(&quot;UPDATE doctor SET doctor_name = &#x27;&#123;0&#125;&#x27;, title = &#x27;&#123;1&#125;&#x27;, department_id = &#x27;&#123;2&#125;&#x27;, phone = &#x27;&#123;3&#125;&#x27;, employment_status = &#x27;&#123;4&#125;&#x27; WHERE doctor_id = &#123;5&#125;;&quot;.format(name, title, department_id, phone, employment_status, doctor_id))</span><br><span class="line"></span><br><span class="line"># 生成超级用户的账号</span><br><span class="line">if check_usname(&quot;root&quot;) == False:</span><br><span class="line">    add_admin_name_pwd(&#x27;root&#x27;, &#x27;root&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据库课程设计（期末实训答辩作品）&quot;&gt;&lt;a href=&quot;#数据库课程设计（期末实训答辩作品）&quot; class=&quot;headerlink&quot; title=&quot;数据库课程设计（期末实训答辩作品）&quot;&gt;&lt;/a&gt;数据库课程设计（期末实训答辩作品）&lt;/h3&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="项目实战" scheme="https://yufusir.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="python" scheme="https://yufusir.github.io/tags/python/"/>
    
    <category term="mysql" scheme="https://yufusir.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>光速入门linux，把玩linux的常用命令行</title>
    <link href="https://yufusir.github.io/posts/a1d1e9f8.html"/>
    <id>https://yufusir.github.io/posts/a1d1e9f8.html</id>
    <published>2024-11-14T16:00:00.000Z</published>
    <updated>2025-01-05T13:41:19.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="光速入门linux，把玩linux的常用命令行"><a href="#光速入门linux，把玩linux的常用命令行" class="headerlink" title="光速入门linux，把玩linux的常用命令行"></a>光速入门linux，把玩linux的常用命令行</h2><h3 id="linux操作系统的简单概述"><a href="#linux操作系统的简单概述" class="headerlink" title="linux操作系统的简单概述"></a>linux操作系统的简单概述</h3><p>Linux 是一种开源的类 Unix 操作系统，最初由芬兰程序员林纳斯·托瓦兹（Linus Torvalds）于 1991 年开发。Linux 是一个功能强大、灵活且安全的操作系统，从个人电脑到大型服务器和嵌入式设备。拥有开源、多用户和多任务、稳定性和安全性、丰富的发行版、强大的命令行和社区支持的特点。由于其开源特性，Linux 也促进了技术的创新和共享。目前主要用于服务器、嵌入式系统、桌面开发、开发环境。</p><h3 id="学习准备工作"><a href="#学习准备工作" class="headerlink" title="学习准备工作"></a>学习准备工作</h3><h4 id="虚拟机的下载"><a href="#虚拟机的下载" class="headerlink" title="虚拟机的下载"></a>虚拟机的下载</h4><p>由于我们电脑一般都是windows操作系统，所以要在windows使用linux的操作系统需要配合使用虚拟机</p><p><a href="https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion">点击跳转vmware官方地址</a></p><h4 id="镜像的安装"><a href="#镜像的安装" class="headerlink" title="镜像的安装"></a>镜像的安装</h4><p>虚拟机需要操作系统的镜像才能使用，所以需要到对应的官网里下载linux操作系统的镜像。这里我提一嘴，如果你在官网里下载的是zip文件，那个是已经配置好的系统存档（配置无法更改），而iso文件才是镜像文件。</p><p>如果你想要下载linux镜像，推荐文章</p><p><a href="https://blog.csdn.net/weixin_47853811/article/details/111054464">Linux镜像最全版本下载网站_linux系统下载-CSDN博客</a></p><p>我自己更加推荐使用kali，因为kali附带了许多工具与环境，比其他的更加方便，如果想要用kali，推荐文章</p><p><a href="https://blog.csdn.net/xioy33/article/details/139861259">【基础教学】保姆级手把手教学使用VMware安装kali虚拟机-CSDN博客</a></p><p>安装系统的时候也可以选择已经预设好的系统存档压缩包，这样可以不用自己进行许多麻烦的操作</p><h4 id="远程登录linux"><a href="#远程登录linux" class="headerlink" title="远程登录linux"></a>远程登录linux</h4><h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><p>使用基于windows工具xshell实现远程登录，<a href="https://www.xshell.com/zh/free-for-home-school/">点击跳转xshell官网</a></p><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><p>如果你想在 Linux 中使用类似的功能，可以考虑使用以下工具：</p><ul><li><p>SSH 客户端：大多数 Linux 发行版都自带 SSH 客户端，可以通过终端直接使用 <code>ssh</code> 命令连接到其他服务器。</p></li><li><p>终端模拟器：Linux 中有很多终端模拟器，如 GNOME Terminal、Konsole、xterm 等，可以用来执行命令和管理系统。</p></li><li>其他 SSH 客户端：如果需要图形界面的 SSH 客户端，可以考虑使用 Remmina 或 Terminator 等工具。</li></ul><h3 id="用户和用户组配置文件"><a href="#用户和用户组配置文件" class="headerlink" title="用户和用户组配置文件"></a>用户和用户组配置文件</h3><h4 id="用户账号文件-etc-passwd"><a href="#用户账号文件-etc-passwd" class="headerlink" title="用户账号文件/etc/passwd"></a>用户账号文件/etc/passwd</h4><p>概述：用户账号信息（密码除外）都保存在/etc/passwd文件中，所有用户都可以查看此文件的东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p>每一行代表一个用户的账号资料</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名：密码：UID：GID：用户描述信息：用户主目录：登录shell</span><br></pre></td></tr></table></figure><h4 id="用户影子文件-etc-shadow"><a href="#用户影子文件-etc-shadow" class="headerlink" title="用户影子文件/etc/shadow"></a>用户影子文件/etc/shadow</h4><p>概述：/etc/shadow文件是根据/etc/passwd产生，用户密码经过加密存放在此文件夹中，此文件夹只能由root用户查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shadow</span><br></pre></td></tr></table></figure><p>每一行代表一个用户的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名：密码：最后修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</span><br></pre></td></tr></table></figure><h4 id="用户默认配置文件-ect-login-defs"><a href="#用户默认配置文件-ect-login-defs" class="headerlink" title="用户默认配置文件/ect/login.defs"></a>用户默认配置文件/ect/login.defs</h4><p>概述：比前面几个显示更加详细的用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/login.defs</span><br></pre></td></tr></table></figure><h4 id="用户组账号文件-etc-group"><a href="#用户组账号文件-etc-group" class="headerlink" title="用户组账号文件 /etc/group"></a>用户组账号文件 /etc/group</h4><p>概述：用于保存用户组信息，所有用户都可以查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure><p>每一行代表一个用户组信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户组名称：用户组密码：GID:用户成员列表</span><br></pre></td></tr></table></figure><h3 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h3><blockquote><p>注意：任何命令都可以后面接<code>--help</code>，这个可以告诉你这个命令可以接那些选项</p></blockquote><h4 id="添加用户命令useradd"><a href="#添加用户命令useradd" class="headerlink" title="添加用户命令useradd"></a>添加用户命令useradd</h4><p>概述：在系统中创建一个新的账号，并通过选项为账号设置用户名称、用户组、主目录、登录shell等基本信息（可不添加）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure><h4 id="设置用户密码命令passwd"><a href="#设置用户密码命令passwd" class="headerlink" title="设置用户密码命令passwd"></a>设置用户密码命令passwd</h4><p>概述：为新账户添加密码或者修改密码，过程密码不显现，并且需要输入两次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><h4 id="修改用户名命令usermod"><a href="#修改用户名命令usermod" class="headerlink" title="修改用户名命令usermod"></a>修改用户名命令usermod</h4><p>概述：修改用户信息，如用户ID、主目录、用户组、登录shell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 参数</span><br></pre></td></tr></table></figure><h4 id="删除用户命令userdel"><a href="#删除用户命令userdel" class="headerlink" title="删除用户命令userdel"></a>删除用户命令userdel</h4><p>概述：若一个账户不在使用，可以用该命令进行删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><h4 id="用户临时禁用与恢复"><a href="#用户临时禁用与恢复" class="headerlink" title="用户临时禁用与恢复"></a>用户临时禁用与恢复</h4><p>概述：临时禁用一个用户而不删除</p><p>禁用操作如下，操作后重启生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -l 用户名</span><br></pre></td></tr></table></figure><p>恢复操作如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -u 用户名</span><br></pre></td></tr></table></figure><h4 id="用户切换命令"><a href="#用户切换命令" class="headerlink" title="用户切换命令"></a>用户切换命令</h4><h5 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h5><p>概述：su命令切换用户是最简单的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su 选项 用户名</span><br></pre></td></tr></table></figure><p>普通用户切换root用户直接使用su命令就行（需要输入root密码），此外都需要在后面添加用户名</p><h5 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h5><p>概述：相较与su而言，免去了切换root用户的输入密码的流程，需要在/etc/sudoers文件里添类似<code>root ALL=(ALL) ALL</code>的内容</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(root) /bin/more</span><br><span class="line">用户名 主机名称=（可切换的身份） 可执行的命令</span><br></pre></td></tr></table></figure><blockquote><p>注意：ALL是个特殊的关键字，表示任何主机、身份与命令</p></blockquote><h3 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h3><h4 id="查看用户所属的组命令gronps"><a href="#查看用户所属的组命令gronps" class="headerlink" title="查看用户所属的组命令gronps"></a>查看用户所属的组命令gronps</h4><p>概述：命令后面直接接个用户名即可查看用户的所有组，查询root用户的所属组可以省略用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups 用户名</span><br></pre></td></tr></table></figure><h4 id="创建用户组命令groupadd"><a href="#创建用户组命令groupadd" class="headerlink" title="创建用户组命令groupadd"></a>创建用户组命令groupadd</h4><p>概述：用于添加用户组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 参数</span><br><span class="line">示例：创建一个用户组groupl，指定GID为2000</span><br><span class="line">groupadd -g 2000 groupl</span><br></pre></td></tr></table></figure><h4 id="修改用户组命令groupmod"><a href="#修改用户组命令groupmod" class="headerlink" title="修改用户组命令groupmod"></a>修改用户组命令groupmod</h4><p>概述：修改用户组的属性，如GID、用户组名称等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br><span class="line">示例：修改用户组group1的GID为3000，并更改用户组名为group2</span><br><span class="line">groupmod -g 3000 -n group2 group1</span><br></pre></td></tr></table></figure><h4 id="删除用户组命令groupdel"><a href="#删除用户组命令groupdel" class="headerlink" title="删除用户组命令groupdel"></a>删除用户组命令groupdel</h4><p>概述：命令接用户组名称，删除一个用户组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组名称</span><br></pre></td></tr></table></figure><h4 id="管理用户组中的用户命令gpasswd"><a href="#管理用户组中的用户命令gpasswd" class="headerlink" title="管理用户组中的用户命令gpasswd"></a>管理用户组中的用户命令gpasswd</h4><p>概述：将某个用户添加到某个用户组里，或者将某个用户从某个用户组里删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupwd 选项 用户名 用户组</span><br></pre></td></tr></table></figure><h3 id="liunx文件系统"><a href="#liunx文件系统" class="headerlink" title="liunx文件系统"></a>liunx文件系统</h3><p>概述：文件系统规定了数据在磁盘上的组织<code>储存方式</code>，也规定了系统的<code>访问数据的方式</code>，linux操作系统常用的文件操作系统包括ext3、ext4和xfs</p><h3 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h3><p>概述：目录结构是磁盘等储存设备上文件的组织形式。windows操作系统以磁盘为树状组织结构的根节点；liunx操作系统则只有一个树状结构</p><h4 id="RHEL常用目录"><a href="#RHEL常用目录" class="headerlink" title="RHEL常用目录"></a>RHEL常用目录</h4><p>/：根目录，只含目录，不放文件</p><p>/etc：主要用于存储系统或软件的管理文件和配置文件</p><p>/bin：用于存储可执行文件</p><p>/home：普通用户的工作目录</p><p>/usr：用于存储用户程序（/usr/bin）、库文件（/usr/lib）、文档（/usr/share/doc）</p><p>/root：超级用户工作目录</p><p>/lib：用于存储动态链接共享库文件</p><p>/boot：用于存储操作系统启动时所需要的文件</p><p>/mnt：用于存储挂载存储设备的挂载目录</p><p>/proc：用于存储系统内存的映射，可以直接通过访问/proc目录下的文件获取系统信息</p><p>/opt：用于存储附加的应用程序软件包</p><p>/tmp：用于存储临时文件，重启系统，该目录下的文件就会被清除</p><p>/swap：用于存储虚拟内存交换时所用文件</p><h4 id="访问路径"><a href="#访问路径" class="headerlink" title="访问路径"></a>访问路径</h4><p>绝对路径：以根目录“/”为起点，表示系统中某个/目录的位置。例如/home/itheima/file/a.txt</p><p>相对路径：以当前目录为起点，表示系统中某个文件/目录的位置。用户在/home/itheima目录下，相对路径即为file/a.txt</p><h3 id="liunx文件类型"><a href="#liunx文件类型" class="headerlink" title="liunx文件类型"></a>liunx文件类型</h3><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><p>普通文件：文件属性用-开头</p><p>目录文件：文件属性用d开头</p><p>设备文件：linux把每个设备都看成一个文件，设备文件一般存储在/dev目录下。字符设备文件属性用c开头，块设备文件属性用b开头</p><p>链接文件：文件属性用l开头</p><p>管道文件文：文件属性用p开头</p><p>套接字文件：文件属性用s开头</p><h4 id="查看当前目录下文件类型"><a href="#查看当前目录下文件类型" class="headerlink" title="查看当前目录下文件类型"></a>查看当前目录下文件类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><h3 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h3><h4 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h4><p>概述：查看当前工作目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h4><p>概述：用于切换用户的工作目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 目录</span><br></pre></td></tr></table></figure><h4 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h4><p>概述：用于列出参数的属性信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls 选项 参数</span><br></pre></td></tr></table></figure><p>常用选项：</p><p>不带选项可以查看当前目录</p><p>-a：显示当前目录下的全部文件（包括隐藏文件）</p><h4 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h4><p>概述：用创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir 选项 参数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls               </span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class="line">                                                                                                                                       </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ mkdir itheima    </span><br><span class="line">                                                                                                                                       </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls</span><br><span class="line">Desktop  Documents  Downloads  itheima  Music  Pictures  Public  Templates  Videos</span><br></pre></td></tr></table></figure><blockquote><p>注意：创建多层目录的时候，需要带选项-p</p></blockquote><h4 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h4><p>概述：用于删除目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir [-p] 参数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls</span><br><span class="line">Desktop  Documents  Downloads  itheima  Music  Pictures  Public  Templates  Videos</span><br><span class="line">                                                                                                                                       </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ rmdir itheima</span><br><span class="line">                                                                                                                                       </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls</span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br></pre></td></tr></table></figure><blockquote><p>注意：-p用于删除非空目录</p></blockquote><h3 id="文件内容显示命令"><a href="#文件内容显示命令" class="headerlink" title="文件内容显示命令"></a>文件内容显示命令</h3><h4 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h4><p>概述：用于把文件内容打印到输出设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 选项 文件名</span><br></pre></td></tr></table></figure><h4 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h4><p>概述：分页查询文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 选项 文件名</span><br></pre></td></tr></table></figure><p>more命令常用快捷键</p><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>f/Space</td><td>显示下一页</td></tr><tr><td>Enter</td><td>显示下一行</td></tr><tr><td>q/Q</td><td>退出</td></tr></tbody></table></div><h4 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h4><p>概述：分页查询文件内容，并支持向上翻文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 选项 文件名</span><br></pre></td></tr></table></figure><p>less命令快捷键</p><div class="table-container"><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>/字符串</td><td>向下搜索字符串</td></tr><tr><td>？字符串</td><td>向上搜索字符串</td></tr><tr><td>b或PageUp或⬆</td><td>向上翻页</td></tr><tr><td>d或pageDown或⬇</td><td>向下翻页</td></tr><tr><td>空格键</td><td>向下翻页</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table></div><h4 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h4><p>概述：用于查看文件的前n行内容（默认显示10行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head 选项 文件名</span><br></pre></td></tr></table></figure><h4 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h4><p>概述：用于查看文件的后n行的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail 选项 文件名</span><br></pre></td></tr></table></figure><h3 id="文件查询命令"><a href="#文件查询命令" class="headerlink" title="文件查询命令"></a>文件查询命令</h3><h4 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h4><p>概述：可以通过关键字，从指定的目录开始递归搜索各各子目录查找符合条件的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 路径 选项 查询关键字</span><br></pre></td></tr></table></figure><h4 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h4><p>概述：用于搜寻可执行文件的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which 命令</span><br></pre></td></tr></table></figure><h4 id="whereis命令"><a href="#whereis命令" class="headerlink" title="whereis命令"></a>whereis命令</h4><p>概述：与which命令相似，但它还可以查找帮助文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis 选项 命令</span><br></pre></td></tr></table></figure><h3 id="文件内容统计"><a href="#文件内容统计" class="headerlink" title="文件内容统计"></a>文件内容统计</h3><p>概述：用于统计文件的字节数、字数和行数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc 选项 文件名</span><br></pre></td></tr></table></figure><p>wc常用选项</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>统计指定文件中文件的字节数</td></tr><tr><td>-l</td><td>统计指定文件中文件的行数</td></tr><tr><td>-w</td><td>统计指定文件中文件的字数</td></tr></tbody></table></div><h3 id="文件的复制、移动、删除"><a href="#文件的复制、移动、删除" class="headerlink" title="文件的复制、移动、删除"></a>文件的复制、移动、删除</h3><h4 id="文件复制命令cp"><a href="#文件复制命令cp" class="headerlink" title="文件复制命令cp"></a>文件复制命令cp</h4><p>概述：用于将一个或多个文件复制到指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp 选项 原文件或目录 目标文件或着目录</span><br></pre></td></tr></table></figure><h4 id="文件移动命令mv"><a href="#文件移动命令mv" class="headerlink" title="文件移动命令mv"></a>文件移动命令mv</h4><p>概述：此命令有两个作用，一个用于重命名文件，第二个用于移动文件/目录到指定目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv 选项 文件/目录 目标文件/目录</span><br></pre></td></tr></table></figure><p>mv命令常用选项</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-f</td><td>强制移动文件或重命名文件</td></tr><tr><td>-i</td><td>与-f相反，在移动文件或重命名文件之前给出提示</td></tr></tbody></table></div><h4 id="文件删除命令rm"><a href="#文件删除命令rm" class="headerlink" title="文件删除命令rm"></a>文件删除命令rm</h4><p>概述：用于删除文件/目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm 选项 文件/目录</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ echo &quot;hello world&quot; &gt;&gt; a.txt</span><br><span class="line">                                                                                                                                                                                                                                      </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls         </span><br><span class="line">a.txt  Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class="line">                                                                                                                                                                                                                       </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ rm a.txt</span><br><span class="line">                                                                                                                                                                  </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls         </span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br></pre></td></tr></table></figure><h3 id="文件更新（可新建文件）"><a href="#文件更新（可新建文件）" class="headerlink" title="文件更新（可新建文件）"></a>文件更新（可新建文件）</h3><p>概述：用于修改文件/目录文件的时间为系统时间，包括文件的存取时间和修改时间。如果不存在，则会<code>创建一个新的文件</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 选项 文件名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ echo &quot;hello world&quot; &gt;&gt; a.txt</span><br><span class="line">                                                                                                                                                                                                         </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls -l a.txt</span><br><span class="line">-rw-rw-r-- 1 kali kali 12  9月30日 08:19 a.txt</span><br><span class="line">                                                                                                                                                                                                         </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ touch a.txt</span><br><span class="line">                                                                                                                                                                                                                                                                                                               </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls -l a.txt</span><br><span class="line">-rw-rw-r-- 1 kali kali 12  9月30日 08:20 a.txt</span><br></pre></td></tr></table></figure><h3 id="文件压缩和解压"><a href="#文件压缩和解压" class="headerlink" title="文件压缩和解压"></a>文件压缩和解压</h3><h4 id="gzip命令与gunzip命令"><a href="#gzip命令与gunzip命令" class="headerlink" title="gzip命令与gunzip命令"></a>gzip命令与gunzip命令</h4><p>概述：如下命令用于压缩文件，得到.gz文件。改命令对压缩文件不会保留原文件，且压缩多文件时，gzip命令只会对它们单独压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip 选项 文件名</span><br></pre></td></tr></table></figure><p>概述：如下命令用于解压.gz压缩包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip 选项 压缩包</span><br></pre></td></tr></table></figure><p>示例：压缩并解压文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ echo &quot;hello world&quot; &gt;&gt; a.txt</span><br><span class="line">                                                                                                                                                                  </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ echo &quot;hello world&quot; &gt;&gt; b.txt </span><br><span class="line">                                                                                                                                                             </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls</span><br><span class="line">a.txt  b.txt  Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class="line">                                                                                                                                                                  </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ gzip a.txt b.txt</span><br><span class="line">                                                                                                                                                                  </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls</span><br><span class="line">a.txt.gz  b.txt.gz  Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class="line">                                                                                                                                                                  </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ gunzip -v a.txt.gz b.txt.gz </span><br><span class="line">a.txt.gz:       -16.7% -- replaced with a.txt</span><br><span class="line">b.txt.gz:       -16.7% -- replaced with b.txt</span><br><span class="line">                                                                                                                                                                  </span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ls</span><br><span class="line">a.txt  b.txt  Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br></pre></td></tr></table></figure><h4 id="查看压缩包内容"><a href="#查看压缩包内容" class="headerlink" title="查看压缩包内容"></a>查看压缩包内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat 压缩包</span><br></pre></td></tr></table></figure><h4 id="bzip2命令与bunzip命令"><a href="#bzip2命令与bunzip命令" class="headerlink" title="bzip2命令与bunzip命令"></a>bzip2命令与bunzip命令</h4><p>概述：如下命令用于压缩文件获得.bz2格式的压缩包，与gzip命令相比，此命令更加高效，且使用-k可以保留原文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 选项 文件名</span><br></pre></td></tr></table></figure><p>概述：用于解压文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 选项 压缩包</span><br></pre></td></tr></table></figure><h4 id="zip命令与unzip命令"><a href="#zip命令与unzip命令" class="headerlink" title="zip命令与unzip命令"></a>zip命令与unzip命令</h4><p>概述：zip命令可以压缩文件获得.zip压缩包。使用该命令会保留原文件。多个文件需要压缩可以将它们压缩成一个压缩包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip 选项 压缩包名 文件名</span><br></pre></td></tr></table></figure><p>概述：用于解压文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip 选项 压缩包名</span><br></pre></td></tr></table></figure><h4 id="文件打包命令tar"><a href="#文件打包命令tar" class="headerlink" title="文件打包命令tar"></a>文件打包命令tar</h4><p>概述：用于把一个许多文件/目录打包成.tar格式文件包，但它不是一个压缩命令，打包之后的文件与原文件的大小相同。在压缩文件的时候，通常先用tar命令将文件打包，再使用gzip或者bzip2压缩命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar 选项 包名 文件/目录</span><br></pre></td></tr></table></figure><h3 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h3><p>概述：用户对文件/目录的访问权限可分为三种，分别是读、写、执行</p><p>字符表示法：</p><div class="table-container"><table><thead><tr><th>权限</th><th>对应字符</th><th>文件</th><th>目录</th></tr></thead><tbody><tr><td>读权限</td><td>r</td><td>可查看文件内容</td><td>可以列出目录的中内容</td></tr><tr><td>写权限</td><td>w</td><td>可修改文件内容</td><td>可以在目录中创建、删除文件</td></tr><tr><td>执行权限</td><td>x</td><td>可执行该文件</td><td>可以进入目录</td></tr></tbody></table></div><p>数字表示法：</p><p>概述：在数字表示法中，用户对文件/目录的权限可以用个3位二进制数表示。如果用户具有某一个权限，则对应位置为1.否则为0。这样用户的访问权限就可以表示为一个3位的二进制数，其值最大为7，因此此可以看作为一个八进制数。（例如：文件的访问权限为rw-rw-r—，对应的数值表示法为110110100，则每三个一组，分别表示<code>文件的所有者</code>、<code>同组用户</code>和<code>其他用户</code>的访问权限，转换为八进制本别为6、6、4，因此a.txt的访问权限为664。</p><h4 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h4><p>采用字符方式更改文件/目录权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 选项 a|U|g|o +|-|= modo 文件/目录</span><br></pre></td></tr></table></figure><p>a|U|g|o表示用户：</p><ul><li>a:所有用户</li><li>u:文件所有者</li><li>g:同组用户</li><li>o:其他用户</li></ul><p>+|-|=表示权限的设置：</p><p>+：添加权限</p><p>-：取消权限</p><p>=：设置权限</p><p>modo表示所设置的权限，即读（r）、写（w）、执行（x）权限</p><p>采用数字方式更改文件/目录权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 数值表示的权限 文件/目录</span><br></pre></td></tr></table></figure><h4 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h4><p>概述：chown命令用于更改文件/目录的所有者。默认情况下，文件/目录的所有者为创建该文件/目录的用户，或者文件/目录被创建时指定的用户，但是，通过chown命令修改文件/目录的所有者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 选项  用户 文件/目录</span><br></pre></td></tr></table></figure><h3 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h3><p>概述：在linux操作系统中，每个文件都有一个i-node编号，文件内容由i-node节点中记录来指向。在访问文件内容时，通过文件名找到文件对应的i-node节点，根据i-node节点中的信息指示找到的存储文件数据的block数据块，从而完成文件数据的访问</p><h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h4><p>概述：硬链接就是给文件的i-node节点分配创建多个文件名，通过任何一个文件名都可以找到文件对应的i-node节点，进而找到存储文件数据的block数据块完成文件访问。</p><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>概述：软链接实际是个特殊的文件，其中定义了文件的信息，如文件位置、文件大小等。实质上软链接就是创建了一个新的i-node节点</p><h4 id="文件链接管理命令In"><a href="#文件链接管理命令In" class="headerlink" title="文件链接管理命令In"></a>文件链接管理命令In</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In 选项 原文件 链接文件</span><br></pre></td></tr></table></figure><p>注意：使用-s表示添加软链接，不使用就是硬链接</p><h3 id="使用vim编译器"><a href="#使用vim编译器" class="headerlink" title="使用vim编译器"></a>使用vim编译器</h3><h4 id="vim编译器的启动、保存和退出"><a href="#vim编译器的启动、保存和退出" class="headerlink" title="vim编译器的启动、保存和退出"></a>vim编译器的启动、保存和退出</h4><ul><li><p>启动vim：vim启动是非常简单的，直接在命令行输入vim和文件名即可，如果文件存在，则是打开文件，否则系统就会创建一个新的文件，语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vim 文件名</span><br></pre></td></tr></table></figure></li><li><p>保存和退出vim：当编辑文件之后需要保存的时候，在保存的时候使用<code>:wq</code>命令，再按一次Enter键即可保存文件并退出</p></li></ul><h4 id="vim编辑器工作模式"><a href="#vim编辑器工作模式" class="headerlink" title="vim编辑器工作模式"></a>vim编辑器工作模式</h4><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>概述：每次用vim打开文件，默认进入命令模式。在命令模式下，用户可以控制光标移动，对文本进行复制、粘贴、删除和查找等操作，但无法对文件执行手动的输入、修改等编辑操作。</p><blockquote><p>注意：当处于编辑模式或者末行模式中，可以通过Esc键切换到命令模式</p></blockquote><p>移动光标：</p><div class="table-container"><table><thead><tr><th>级别</th><th>命令快捷键</th><th>含义</th></tr></thead><tbody><tr><td>字符级</td><td>←或者h</td><td>使光标向字符的左边移动</td></tr><tr><td></td><td>→或着l</td><td>使光标向字符的右边移动</td></tr><tr><td>单词级</td><td>w</td><td>使光标移动到下个单词的首字母</td></tr><tr><td></td><td>e</td><td>使光标移动到本单词的尾字母</td></tr><tr><td></td><td>b</td><td>使光标移动本单词的首字母</td></tr><tr><td>行级</td><td>↑或k</td><td>使光标移动到上一行</td></tr><tr><td></td><td>↓或j</td><td>使光标移动到下一行</td></tr><tr><td></td><td>$</td><td>使光标移动到当前行尾</td></tr><tr><td></td><td>0</td><td>使光标移动至当前行首</td></tr><tr><td>段落级</td><td>{</td><td>使光标移至段落结尾</td></tr><tr><td></td><td>}</td><td>使光标移至段落首部</td></tr><tr><td>屏幕级</td><td>H</td><td>使光标移至屏幕首部</td></tr><tr><td></td><td>L</td><td>使光标移至屏幕尾部</td></tr><tr><td>文档级</td><td>G</td><td>使光标移至文档尾行</td></tr><tr><td></td><td>n+G</td><td>使光标移至文档的第n行</td></tr></tbody></table></div><p>复制和粘贴文本：</p><div class="table-container"><table><thead><tr><th>命令快捷键</th><th>含义</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前所在行</td></tr><tr><td>n+yy</td><td>复制n行内容（包括光标所在行）</td></tr><tr><td>y+e</td><td>从光标所在位置开始复制直到当前单词结尾</td></tr><tr><td>y+$</td><td>从光标所在位置开始复制直到当前行结尾</td></tr><tr><td>y+{</td><td>从当前段落开始的位置复制到光标所在位置</td></tr><tr><td>p</td><td>将复制的内容粘贴到光标所在的位置</td></tr></tbody></table></div><p>删除文本：</p><div class="table-container"><table><thead><tr><th>命令快捷键</th><th>含义</th></tr></thead><tbody><tr><td>x</td><td>删除光标所在的字符</td></tr><tr><td>dd</td><td>删除光标所在的当前行</td></tr><tr><td>n+dd</td><td>删除包括光标所在行的后边n行内容</td></tr><tr><td>d+$</td><td>删除光标位置到行尾的所有内容</td></tr></tbody></table></div><p>其他操作：</p><div class="table-container"><table><thead><tr><th>命令快捷键</th><th>含义</th><th>命令快捷键</th><th>含义</th></tr></thead><tbody><tr><td>u</td><td>撤销命令</td><td>J</td><td>合并两行的内容</td></tr><tr><td>.</td><td>重复执行上一个命令</td><td>r+字符</td><td>快速替换光标所在字符</td></tr></tbody></table></div><h5 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h5><p>概述：编辑模式也称为输入模式，在该模式下，用户可以正常地输入、修改文件内容。编辑模式可由命令模式进入，在命令模式下按i、a、o或s等快捷键可以进入编辑模式，这些快捷键大小写均可以切换到编辑模式，只是切换作用不同。</p><div class="table-container"><table><thead><tr><th>命令快捷键</th><th>含义</th><th>命令快捷键</th><th>含义</th></tr></thead><tbody><tr><td>i</td><td>光标定位到字符之前</td><td>o</td><td>在本行下面新插入一行</td></tr><tr><td>I</td><td>光标定位到本行行首</td><td>O</td><td>在本行上面新插入一行</td></tr><tr><td>a</td><td>光标定位到字符之后</td><td>s</td><td>删除光标所在处的字符</td></tr><tr><td>A</td><td>光标定位到本行行尾</td><td>S</td><td>删除光标所在的整行文本</td></tr></tbody></table></div><h5 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h5><p>概述：所谓末行模式，就是在文件最后一行输入命令完成一定的操作。末行模式主要用于保存或不保存并退出，以及设置vim编辑器的工作环境。在命令模式下输入<code>：</code>符号可以切换到末行模式。</p><div class="table-container"><table><thead><tr><th>命令快捷键</th><th>含义</th></tr></thead><tbody><tr><td>:q</td><td>退出vim编辑器</td></tr><tr><td>:wq</td><td>保存并退出vim编辑器</td></tr><tr><td>:q!</td><td>强制退出vim编辑器，不保存对文件的修改</td></tr><tr><td>:wq!</td><td>强制保存文件退出vim编辑器</td></tr><tr><td>:set nu</td><td>设置行号，仅对本次操作有效，当重新打开文件时，若需要行号，要重新设置</td></tr><tr><td>:set nonu</td><td>取消行号，仅对本次操作有效</td></tr><tr><td>:n</td><td>使光标移动到第n行</td></tr><tr><td>:/字符串</td><td>在文件中从上至下搜索字符串</td></tr><tr><td>:?字符串</td><td>在文件中从下至上搜索字符串</td></tr><tr><td>:s/字符串1/字符串2</td><td>将当前光标所在行的第一个字符串1替换成字符串2</td></tr><tr><td>:s/字符串1/字符串2/g</td><td>将当前光标所在的行的所有字符串1替换为字符串2</td></tr><tr><td>:%s/字符串1/字符串2/g</td><td>将全文的字符串1都替换为字符串2</td></tr><tr><td>:%s/字符串1/字符串2/gc</td><td>将全文中的字符串1都替换成字符串2，且每替换一个内容都有相应的提示</td></tr></tbody></table></div><h3 id="管理软件包"><a href="#管理软件包" class="headerlink" title="管理软件包"></a>管理软件包</h3><h4 id="rpm命令管理软件包"><a href="#rpm命令管理软件包" class="headerlink" title="rpm命令管理软件包"></a>rpm命令管理软件包</h4><p>安装软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm 选项 RPM软件包</span><br></pre></td></tr></table></figure><p>注意：选项一般使用<code>-ivh</code></p><p>查询软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm 选项 RPM软件包</span><br></pre></td></tr></table></figure><p>注意：一般使用<code>-q</code>来查询软件包的信息</p><p>升级软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm 选项 RPM软件包</span><br></pre></td></tr></table></figure><p>注意：一般使用<code>-Uvh</code>来安装该高版本的软件包，会将旧版本的软件包删除再安装新版本</p><p>卸载软件</p><p>概述：一般使用<code>-e</code>选项卸载软件包，卸载成功，rpm命令没有输出结果；如果失败就会有rpm的提示信息</p><h4 id="dnf命令管理软件包"><a href="#dnf命令管理软件包" class="headerlink" title="dnf命令管理软件包"></a>dnf命令管理软件包</h4><p>安装软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install 软件包</span><br></pre></td></tr></table></figure><p>查询软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf list 软件包</span><br></pre></td></tr></table></figure><p>检测升级软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf upgrade 软件名称</span><br></pre></td></tr></table></figure><p>注意：如果不指定软件名称就会升级所有的课升级软件</p><p>清理过期所有无用数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf clean all</span><br></pre></td></tr></table></figure><p>注意：将all可以改为指定软件包名称，只清理指定软件包软件过期数据</p><p>卸载软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf -y remove 软件包</span><br></pre></td></tr></table></figure><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>概述：当运行程序时，Linux系统会为程序创建一个特殊的环境，用于分配管理程序执行时所需的资源（如CPU或内存），以保证程序可以独立运行，不受其他程序干扰，这个特殊的环境就称为进程。</p><h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4><p>概述：在执行过程中，主要有就绪态、运行态和睡眠态3种状态</p><ul><li>就绪态：处于就绪态的进程，所需的其他资源都已经分配到位，只等待系统分配CPU。</li><li>运行态：处于运行态的进程是指已经到分配CPU，正在运行的进程。如果时间片用完，处于运行态的进程会进入就绪态。如果因为其他原因而失去CPU，进程就会从运行态进入睡眠态</li><li>睡眠态：进程因为某种原因暂时不能拥有CPU，就会进入睡眠态</li></ul><h4 id="进程的标识符"><a href="#进程的标识符" class="headerlink" title="进程的标识符"></a>进程的标识符</h4><ul><li>进程标识符：每个进程都有个唯一的标识符，即进程标识符（Process ID，PID)。</li><li>用户标识符：用户标识符（User ID，UID）标识创建这个进程的用户</li><li>组标识符：组标识符（Group ID，GID）标识创建进程用户的所属组</li></ul><h3 id="进程管理常用命令"><a href="#进程管理常用命令" class="headerlink" title="进程管理常用命令"></a>进程管理常用命令</h3><h4 id="进程查看命令"><a href="#进程查看命令" class="headerlink" title="进程查看命令"></a>进程查看命令</h4><p>1.ps命令</p><p>概述：ps命令用于查看系统中正在运行的进程信息，包括进程状态、占用资源，它是最基本也是最强大的进程查看命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps 选项 参数</span><br></pre></td></tr></table></figure><p>常用选项：<code>-aux</code>选项可以显示所有终端所有用户有关进程的详细信息；<code>-ef</code>选项用于显示系统中所有进程的主要信息。</p><p>2.top命令</p><p>概述：可以动态的地显示进程状态信息，默认每隔3秒刷新一下系统的整体的运行状态情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top 选项 参数</span><br></pre></td></tr></table></figure><p>常用选项：<code>-i</code>可以忽略闲置和僵死的进程</p><p>快捷键：Ctrl+z可以暂停任务</p><p>2.pstree命令</p><p>概述：可以树状形式显示系统中进程，即显示一个进程树，从中观察出进程的中的进程派生关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree 选项</span><br></pre></td></tr></table></figure><p>常用选项：<code>-h</code>列出树状图，特别标注当前正在执行的进程</p><p>4.pgrep命令</p><p>概述：根据服务器名称，从进程队列中查找与该服务有关的进程，查找成功后显示进程的PID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgrep 选项 参数</span><br></pre></td></tr></table></figure><h4 id="进程终止命令"><a href="#进程终止命令" class="headerlink" title="进程终止命令"></a>进程终止命令</h4><p>1.kill命令</p><p>概述：可以终止指定的进程，其工作原理是发送某个信号给指定进程，以改变进程的状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 选项 参数</span><br></pre></td></tr></table></figure><p>注意：kill命令的选项一般是信号，参数为PID。使用<code>kill -l</code>可以查看预定义的信号</p><p>常用信号：9号信号(SIGKILL)可以无条件终止指定进程</p><p>2.killall命令</p><p>概述：用于终止某个服务所对应的全部进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall 选项 参数</span><br></pre></td></tr></table></figure><h3 id="任务的前台与后台调度"><a href="#任务的前台与后台调度" class="headerlink" title="任务的前台与后台调度"></a>任务的前台与后台调度</h3><p>1.jobs命令</p><p>概述：用于显示系统中暂停的任务列表即任务状态，包括后台任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs 选项 参数</span><br></pre></td></tr></table></figure><p>注意：jobs命令的参数是任务标识号，选项一般使用<code>-l</code>可以显示进程号</p><p>2.bg命令</p><p>概述：用于将前台任务调度至后台执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bg 参数</span><br></pre></td></tr></table></figure><p>注意：bg的参数是任务标识号</p><p>3.fg命令</p><p>概述：用户将后台任务调度到前台执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg 参数</span><br></pre></td></tr></table></figure><p>注意：fg的参数也是任务标识号</p><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><p>概述：在操作系统中，服务是一类常驻再内存中的，且可以提供一些功能来满足用户需求的进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl 功能命令 服务进程</span><br></pre></td></tr></table></figure><p>常用功能命令：</p><div class="table-container"><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>启动服务进程</td></tr><tr><td>stop</td><td>终止服务进程</td></tr><tr><td>status</td><td>查询服务进程运行情况，列出该服务的详细信息</td></tr><tr><td>restart</td><td>重启服务进程</td></tr><tr><td>enable</td><td>设置服务开机自启动</td></tr><tr><td>disable</td><td>取消服务开机自启动</td></tr><tr><td>reload</td><td>重新加载指定服务的配置文件（并非所有的服务都支持改参数，使用restart可实现相同功能）</td></tr></tbody></table></div><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>概述：在使用Linux系统过程中，有时需要执行一些周期性、规律的任务，如定时维护系统资源、定期备份数据库等</p><h4 id="at命令"><a href="#at命令" class="headerlink" title="at命令"></a>at命令</h4><p>概述：at命令用于执行一次性计划任务，一般用于满足临时性的工作需求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at 选项 参数</span><br></pre></td></tr></table></figure><blockquote><p>注意：参数一般是时间日期，at命令允许使用各种各样的时间格式，选项<code>-l</code>用于查看计划任务，<code>-f</code>可以从指定文件中读取任务，<code>-d</code>删除计划任务，参数为任务编号。</p></blockquote><h4 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h4><p>概述：可以周期性的重复执行某个任务，通常需要将任务命令写在一个文件中，这个任务文件叫作crontab文件。使用crontab命令加载这个文件，到指定时间系统会自动执行文件中的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab 选线 参数</span><br></pre></td></tr></table></figure><h3 id="磁盘概述"><a href="#磁盘概述" class="headerlink" title="磁盘概述"></a>磁盘概述</h3><p>概述：在Linux操作系统中，一切皆为文件，磁盘设备也不例外。</p><h4 id="磁盘设备命名规则"><a href="#磁盘设备命名规则" class="headerlink" title="磁盘设备命名规则"></a>磁盘设备命名规则</h4><p>概述：Linux操作系统中的磁盘设备也是文件，磁盘设备文件存储在/dev目录下，用户可以进入/dev目录查看磁盘设备文件。其实除了磁盘设备，其他所有文件都存储在/dev目录下。</p><h4 id="查看磁盘使用情况"><a href="#查看磁盘使用情况" class="headerlink" title="查看磁盘使用情况"></a>查看磁盘使用情况</h4><p>1.df命令</p><p>概述：可以查看磁盘的使用情况，包括磁盘容量、已用空间大小、可用空间大小、磁盘使用率等信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df 选项 磁盘设备</span><br></pre></td></tr></table></figure><p>注意：常用选项有<code>-h</code>可以以易读的格式显示该磁盘设备的使用情况，<code>-l</code>只显示本地文件系统，<code>-T</code>显示文件系统类型</p><p>示例：查看/dev/sda1的使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[/dev]</span><br><span class="line">└─$ df -h /dev/sda1</span><br><span class="line">文件系统        大小  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda1        48G   16G   31G   34% /</span><br></pre></td></tr></table></figure><p>2.du命令</p><p>概述：用于查看文件或目录的磁盘占用情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du 选项 磁盘设备</span><br></pre></td></tr></table></figure><p>示例：查看当前目录下所有子目录的大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/tools]</span><br><span class="line">└─$ du -h</span><br><span class="line">24K     ./MySQL/mysql/support-files</span><br><span class="line">20K     ./MySQL/mysql/docs</span><br><span class="line">8.0K    ./MySQL/mysql/lib/pkgconfig</span><br><span class="line">39M     ./MySQL/mysql/lib/plugin/debug</span><br><span class="line">92M     ./MySQL/mysql/lib/plugin</span><br><span class="line">8.0K    ./MySQL/mysql/lib/mecab/etc</span><br><span class="line">40M     ./MySQL/mysql/lib/mecab/dic/ipadic_euc-jp</span><br><span class="line">51M     ./MySQL/mysql/lib/mecab/dic/ipadic_utf-8</span><br><span class="line">40M     ./MySQL/mysql/lib/mecab/dic/ipadic_sjis</span><br><span class="line">130M    ./MySQL/mysql/lib/mecab/dic</span><br><span class="line">130M    ./MySQL/mysql/lib/mecab</span><br><span class="line">3.4M    ./MySQL/mysql/lib/private/icudt73l/brkitr</span><br><span class="line">3.8M    ./MySQL/mysql/lib/private/icudt73l</span><br><span class="line">276K    ./MySQL/mysql/lib/private/sasl2</span><br><span class="line">55M     ./MySQL/mysql/lib/private</span><br><span class="line">310M    ./MySQL/mysql/lib</span><br><span class="line">404K    ./MySQL/mysql/share/spanish</span><br><span class="line">404K    ./MySQL/mysql/share/danish</span><br><span class="line">404K    ./MySQL/mysql/share/polish</span><br><span class="line">404K    ./MySQL/mysql/share/romanian</span><br><span class="line">404K    ./MySQL/mysql/share/norwegian-ny</span><br><span class="line">12K     ./MySQL/mysql/share/aclocal</span><br><span class="line">404K    ./MySQL/mysql/share/swedish</span><br><span class="line">404K    ./MySQL/mysql/share/slovak</span><br><span class="line">408K    ./MySQL/mysql/share/serbian</span><br><span class="line">404K    ./MySQL/mysql/share/french</span><br><span class="line">404K    ./MySQL/mysql/share/estonian</span><br><span class="line">404K    ./MySQL/mysql/share/hungarian</span><br><span class="line">404K    ./MySQL/mysql/share/english</span><br><span class="line">412K    ./MySQL/mysql/share/greek</span><br><span class="line">404K    ./MySQL/mysql/share/bulgarian</span><br><span class="line">404K    ./MySQL/mysql/share/italian</span><br><span class="line">404K    ./MySQL/mysql/share/dutch</span><br><span class="line">408K    ./MySQL/mysql/share/portuguese</span><br><span class="line">412K    ./MySQL/mysql/share/japanese</span><br><span class="line">404K    ./MySQL/mysql/share/czech</span><br><span class="line">404K    ./MySQL/mysql/share/norwegian</span><br><span class="line">412K    ./MySQL/mysql/share/ukrainian</span><br><span class="line">408K    ./MySQL/mysql/share/korean</span><br><span class="line">244K    ./MySQL/mysql/share/charsets</span><br><span class="line">420K    ./MySQL/mysql/share/russian</span><br><span class="line">412K    ./MySQL/mysql/share/german</span><br><span class="line">11M     ./MySQL/mysql/share</span><br><span class="line">798M    ./MySQL/mysql/bin</span><br><span class="line">28K     ./MySQL/mysql/include/mysql</span><br><span class="line">440K    ./MySQL/mysql/include</span><br><span class="line">856K    ./MySQL/mysql/man/man1</span><br><span class="line">12K     ./MySQL/mysql/man/man8</span><br><span class="line">872K    ./MySQL/mysql/man</span><br><span class="line">1.1G    ./MySQL/mysql</span><br><span class="line">1.6G    ./MySQL</span><br><span class="line">1.6G    .</span><br></pre></td></tr></table></figure><blockquote><p>注意：常用-h显示当前目录及其子目录所占用空间的大小，及当前home目录及子目录的大小，最末尾</p><p>的为所有目录的总大小。</p></blockquote><h3 id="添加磁盘"><a href="#添加磁盘" class="headerlink" title="添加磁盘"></a>添加磁盘</h3><p>概述：一块磁盘需要经过分区、格式化、挂载操作之后才能使用，为了后面更好的了解操作磁盘分区、格式化、挂载。需要 一块新磁盘。</p><p>1.点击在vmware的菜单栏中虚拟机，里面有个设置选项，点击设置</p><p>2.进入“硬件”选项卡中，选中“硬盘”选项，点击下方“添加”，进入向导对话框</p><p>3.选择硬件类型为“硬盘”，然后单击“下一步”，进入硬盘类型选择界面，选择”SCSI“虚拟磁盘类型，然后下一步</p><p>4.进入选择磁盘界面，选中“创建新虚拟磁盘”，点击“下一步“，进入”指定磁盘容量“界面。</p><p>5.磁盘大小就随自己填，如果没有特别的想法的建议用默认推荐大小，然后选中”将虚拟磁盘拆分成多个文件“下一步</p><p>6.选择自己的存储位置，点击完成，添加成功之后需要重新启动系统才能识别系统。</p><blockquote><p>注意：请在这里设置一个快照，后面的操作如果失误，可能引起虚拟磁盘损坏，导致系统崩坏，需要重新开个虚拟机。别问我为什么知道，因为我也崩了，心态直接炸掉，想回档都回不了。</p></blockquote><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><p>概述：磁盘分区有利于数据的分类处理，提高磁盘的使用率与读取速率。</p><h4 id="MBR分区规则"><a href="#MBR分区规则" class="headerlink" title="MBR分区规则"></a>MBR分区规则</h4><p>概述：主引导记录方式进行分区。第一个扇区是最重要的，它记录了3部分信息，分别是主引导记录、分区表信息和结束符。一块磁盘最多只有4个主分区。MBR还具有扩展分区，可以将第一个扇区中的一个分区指向另一个分区，指向的分区也叫做逻辑分区，逻辑分区可以分很多个。</p><h4 id="MBR分区管理"><a href="#MBR分区管理" class="headerlink" title="MBR分区管理"></a>MBR分区管理</h4><p>概述：可通过fdisk命令对磁盘分区进行管理。可操作包括创建分区、删除分区、查看分区等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk 选项 磁盘</span><br></pre></td></tr></table></figure><blockquote><p>注意：常用选项<code>-l</code>显示磁盘及分区详细信息，<code>-s</code>显示磁盘分区容量</p></blockquote><p>使用fdisk命令交互页面，在终端输入“fdisk 磁盘”即可进入交互页面</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/dev]</span><br><span class="line">└─# fdisk /dev/sdb   </span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.40).                                                                                                                                                                      </span><br><span class="line">Changes will remain in memory only, until you decide to write them.                                                                                                                                      </span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS (MBR) disklabel with disk identifier 0x6c3d0f01.</span><br><span class="line"></span><br><span class="line">Command (m for help): </span><br></pre></td></tr></table></figure><p>常用快捷键：</p><div class="table-container"><table><thead><tr><th>命令快捷键</th><th>说明</th><th>命令快捷键</th><th>说明</th></tr></thead><tbody><tr><td>d</td><td>删除分区</td><td>p</td><td>打印分区表</td></tr><tr><td>F</td><td>列出为分区的空闲区</td><td>i</td><td>打印某个分区的相关信息</td></tr><tr><td>l</td><td>列出已知的分区类型</td><td>w</td><td>将分区表写入磁盘并退出</td></tr><tr><td>n</td><td>添加新分区</td><td>q</td><td>退出而不保存更改</td></tr></tbody></table></div><p>1.查看分区情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): F</span><br><span class="line">Unpartitioned space /dev/sdb: 20 GiB, 21473787904 bytes, 41940992 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line">Start      End  Sectors Size</span><br><span class="line"> 2048 41943039 41940992  20G</span><br></pre></td></tr></table></figure><p>2.创建分区</p><ul><li><p>创建主分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): n # 创建分区</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p):  #第一个分区默认创建主分区</span><br><span class="line"></span><br><span class="line">Using default response p.</span><br><span class="line">Partition number (1-4, default 1):  #第一个主分区默认编号为1</span><br><span class="line">First sector (2048-41943039, default 2048):  #默认起点为2048</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-41943039, default 41943039): +2G #设置主分区大小为2GB</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &#x27;Linux&#x27; and of size 2 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): p #打印分区表，查看分区情况</span><br><span class="line">Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x6c3d0f01</span><br><span class="line"></span><br><span class="line">Device     Boot Start     End Sectors Size Id Type</span><br><span class="line">/dev/sdb1        2048 4196351 4194304   2G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): </span><br></pre></td></tr></table></figure><p>本次操作创建了一个 大小为2GB的主分区/dev/sdb1。</p></li><li><p>创建逻辑分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): n #创建分区</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p): e #选择扩展分区</span><br><span class="line">Partition number (2-4, default 2): 3 #设置扩展分区编号为3</span><br><span class="line">First sector (4196352-41943039, default 4196352):  #扩展分区起点为保持默认</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (4196352-41943039, default 41943039): +5G #设置扩展分区大小为5GB</span><br><span class="line"></span><br><span class="line">Created a new partition 3 of type &#x27;Extended&#x27; and of size 5 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): p #打印分区表，查看分区情况</span><br><span class="line">Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x6c3d0f01</span><br><span class="line"></span><br><span class="line">Device     Boot   Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sdb1          2048  4196351  4194304   2G 83 Linux</span><br><span class="line">/dev/sdb3       4196352 14682111 10485760   5G  5 Extended</span><br><span class="line"></span><br><span class="line">Command (m for help): n #创建分区</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (1 primary, 1 extended, 2 free)</span><br><span class="line">   l   logical (numbered from 5)</span><br><span class="line">Select (default p): l #选择逻辑分区</span><br><span class="line"></span><br><span class="line">Adding logical partition 5</span><br><span class="line">First sector (4198400-14682111, default 4198400):  #逻辑分区起点保持默认</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (4198400-14682111, default 14682111): +2G #设置逻辑分区大小为2GB</span><br><span class="line"></span><br><span class="line">Created a new partition 5 of type &#x27;Linux&#x27; and of size 2 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): p #打印分区表，查看分区情况</span><br><span class="line">Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x6c3d0f01</span><br><span class="line"></span><br><span class="line">Device     Boot   Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sdb1          2048  4196351  4194304   2G 83 Linux</span><br><span class="line">/dev/sdb3       4196352 14682111 10485760   5G  5 Extended</span><br><span class="line">/dev/sdb5       4198400  8392703  4194304   2G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): n #创建分区</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (1 primary, 1 extended, 2 free)</span><br><span class="line">   l   logical (numbered from 5)</span><br><span class="line">Select (default p): l  #选择创建逻辑分区</span><br><span class="line"></span><br><span class="line">Adding logical partition 6</span><br><span class="line">First sector (8394752-14682111, default 8394752):  #逻辑分区起点保持默认</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (8394752-14682111, default 14682111):  #第二个逻辑分区大小保持默认</span><br><span class="line"></span><br><span class="line">Created a new partition 6 of type &#x27;Linux&#x27; and of size 3 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help): p #打印分区表，查看分区情况</span><br><span class="line">Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x6c3d0f01</span><br><span class="line"></span><br><span class="line">Device     Boot   Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sdb1          2048  4196351  4194304   2G 83 Linux</span><br><span class="line">/dev/sdb3       4196352 14682111 10485760   5G  5 Extended</span><br><span class="line">/dev/sdb5       4198400  8392703  4194304   2G 83 Linux</span><br><span class="line">/dev/sdb6       8394752 14682111  6287360   3G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): </span><br></pre></td></tr></table></figure><p>本次操作创建了一个扩展分区/dev/sdb3，两个逻辑分区/dev/sdb5和/dev/sdb6</p></li><li><p>删除分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Command (m for help): d #删除分区</span><br><span class="line">Partition number (1,3,5,6, default 6): 6 #指定分区编号</span><br><span class="line"></span><br><span class="line">Partition 6 has been deleted.</span><br><span class="line"></span><br><span class="line">Command (m for help): p  #打印分区编号，查看分区情况</span><br><span class="line">Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x6c3d0f01</span><br><span class="line"></span><br><span class="line">Device     Boot   Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sdb1          2048  4196351  4194304   2G 83 Linux</span><br><span class="line">/dev/sdb3       4196352 14682111 10485760   5G  5 Extended</span><br><span class="line">/dev/sdb5       4198400  8392703  4194304   2G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): </span><br></pre></td></tr></table></figure><p>本次操作删除了逻辑分区/dev/sdb6</p></li><li><p>退出，输入w保存并退出，使用q则是直接退出不保存。</p></li></ul><blockquote><p>注意：MBR分区虽然简单易用，但它不能处理大容量的磁盘，超过2TB的磁盘便无法使用MBR方式进行分区。随着存储设备的发展，MBR方式不能满足需求，逐渐被<code>GPT分区</code>取代。</p></blockquote><h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><p>概述：磁盘分区完成之后，需要在分区上创建文件系统以规定数据的存储方式，即为格式化分区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs 选项 文件系统 分区</span><br></pre></td></tr></table></figure><p>mkfs命令常用选项：</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>指定文件系统，如果不指定文件系统，默认为ext2</td></tr><tr><td>-f</td><td>强制格式化</td></tr></tbody></table></div><p>示例：在/dev/sdb磁盘创建一个文件系统为ext3的分区，然后进行格式化，设置文件系统ext4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/dev]</span><br><span class="line">└─# parted /dev/sdb      //进入parted命令交互模式，创建分区    </span><br><span class="line">GNU Parted 3.6</span><br><span class="line">Using /dev/sdb</span><br><span class="line">Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.</span><br><span class="line">(parted) mklabel gpt     //这里我也不知道为什么这条语句失效                                                 </span><br><span class="line">(parted) mklabel gpt                                                      </span><br><span class="line">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want</span><br><span class="line">to continue?</span><br><span class="line">Yes/No? yes                                                               </span><br><span class="line">(parted) mkpart                                                           </span><br><span class="line">Partition name?  []? itheima</span><br><span class="line">File system type?  [ext2]? ext3                                           </span><br><span class="line">Start? 1                                                                  </span><br><span class="line">End? 2000                                                                 </span><br><span class="line">(parted) print    //创建完成分区之后，查看分区情况                                                        </span><br><span class="line">Model: VMware, VMware Virtual S (scsi)</span><br><span class="line">Disk /dev/sdb: 21.5GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name     Flags</span><br><span class="line"> 1      1049kB  2000MB  1999MB  ext3         itheima</span><br><span class="line"></span><br><span class="line">(parted) quit                                                             </span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">                                                                                                                  </span><br><span class="line">┌──(root㉿kali)-[/dev]</span><br><span class="line">└─# mkfs -t ext4 /dev/sdb1     //格式化分区/dev/sdb1分区</span><br><span class="line">mke2fs 1.47.1 (20-May-2024)</span><br><span class="line">Creating filesystem with 487936 4k blocks and 122160 inodes</span><br><span class="line">Filesystem UUID: 20342f35-0ba8-4419-af60-0e624552c797</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">        32768, 98304, 163840, 229376, 294912</span><br><span class="line"></span><br><span class="line">Allocating group tables: done                            </span><br><span class="line">Writing inode tables: done                            </span><br><span class="line">Creating journal (8192 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done </span><br><span class="line"></span><br><span class="line">                                                                                                                  </span><br><span class="line">┌──(root㉿kali)-[/dev]</span><br><span class="line">└─# parted /dev/sdb1 print   //查看/dev/sdb1分区情况</span><br><span class="line">Model: Unknown (unknown)</span><br><span class="line">Disk /dev/sdb1: 1999MB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: loop</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start  End     Size    File system  Flags</span><br><span class="line"> 1      0.00B  1999MB  1999MB  ext4</span><br></pre></td></tr></table></figure><p>概述：使用parted命令创建了/dev/sdb1分区，文件系统为ext3。分区创建完成之后使用mkfs命令格式化/dev/sdb1分区，指定文件系统为ext4。格式化完成之后。使用parted /dev/sdb1 print 命令查看分区情况，由输出结果可知，/dev/sdb1分区的文件系统变成了ext4。</p><h3 id="挂载与卸载"><a href="#挂载与卸载" class="headerlink" title="挂载与卸载"></a>挂载与卸载</h3><p>概述：在windows操作系统中，磁盘分区经过格式化之后就可以直接使用了；但在Linux操作系统中，格式化后的磁盘分区必须经过挂载才可以使用。</p><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>概述：挂载就是将磁盘分区（或者其他硬件设备）与一个目录进行关联，这样就可以在磁盘分区存储数据。Linux提供了mount命令用于实现磁盘分区挂载，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount 分区名称 挂载目录</span><br></pre></td></tr></table></figure><p>在上述格式中，挂载目录又称为挂载点。一般将磁盘分区挂载到/mut目录下。</p><p>示例：将/dev/sdb1分区挂载到/mut/tmp目录下，并编辑hello文件，存储在/dev/sdb1磁盘中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/dev]</span><br><span class="line">└─# mkdir /mnt/tmp    //创建/mnt/tmp目录                                                                                                              </span><br><span class="line">┌──(root㉿kali)-[/dev]</span><br><span class="line">└─# mount /dev/sdb1 /mnt/tmp       //将/dev/sdb1挂载到/mnt/tmp目录下                                                                                                          </span><br><span class="line">┌──(root㉿kali)-[/dev]</span><br><span class="line">└─# cd  /mnt/tmp                                                                                                                </span><br><span class="line">┌──(root㉿kali)-[/mnt/tmp]</span><br><span class="line">└─# vim hello        //在这里编辑了hello mount放在文件里                                                                                                         </span><br><span class="line">┌──(root㉿kali)-[/mnt/tmp]</span><br><span class="line">└─# ls         //查看当前目录下是否有hello文件</span><br><span class="line">hello  lost+found                                                                                                                 </span><br><span class="line">┌──(root㉿kali)-[/mnt/tmp]</span><br><span class="line">└─# df -h hello        //查看hello文件的存储分区     </span><br><span class="line">文件系统        大小  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sdb1       1.8G  504K  1.7G    1% /mnt/tmp</span><br></pre></td></tr></table></figure><blockquote><p>概述：将/dev/sdb1分区挂载到/mnt/tmp目录下，并编辑hello文件进行存储，在通过df命令查看hello文件的存储分区，由输出结果可知，hello文件存储在/dev/sdb1分区。</p></blockquote><p>注意：mount命令挂载之后，虽然可以立即使用磁盘分区，但是系统重启之后，挂载就会失效。如果想让挂载永久生效，就必须把挂载信息按照一定格式写入/etc/fstab文件中。/etc/fstab文件中包括者挂载所需要的信息，一旦挂载信息写入之后，挂载就会永久有效。/etc/fstab文件中挂载信息格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设备文件 挂件目录 格式类型 权限选项 自检 优先级</span><br></pre></td></tr></table></figure><p>上述格式中，各个字段的含义如下。</p><ul><li>设备文件：通常是设备路径或名称，如/dev/sdb1。</li><li>挂载目录：设备要挂载到目录，通常需要提前创建好。</li><li>格式类型：指定文件系统的格式，如ext3、ext4、xfs、swap、iso9960（光盘设备）等。</li><li>权限选项：通常设置为defualts，保存默认即可。</li><li>自检：如果设置为1，则开机后进行磁盘自检；如果设置为0，则不自检。</li><li>优先级：如果自检字段设置为1，则可在改字段中设置多块磁盘的检测优先级；如果自检字段为0，则该字段也设置为0。</li></ul><p>注意：除了挂载磁盘分区，mount命令也可以挂载移动硬盘、U盘、镜像文件等设备。读者可以根据磁盘分区的挂载方式，挂载其他设备。</p><h4 id="查看挂载信息"><a href="#查看挂载信息" class="headerlink" title="查看挂载信息"></a>查看挂载信息</h4><p>概述：可以查看磁盘分区挂载到了哪个目录。</p><ol><li><p>findmnt命令</p><p>findmnt命令用于快速查看设备的挂载信息，其常用语句格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findmnt 设备名称</span><br></pre></td></tr></table></figure><p>在上格式中，如果指定设备名称，则列出该设备的挂载信息；如果不指定设备名称，则列出所有设备的挂载信息。</p></li><li><p>lsblk命令</p><p>lsblk命令用于列出除RAM盘之外的所有可用的块设备信息，包括硬盘、闪存盘、CD-ROM等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk 选项 设备名称</span><br></pre></td></tr></table></figure><p>lsblk常用选项</p><p>| 选项 | 说明                 | 选项 | 说明                   |<br>| —— | —————————— | —— | ——————————— |<br>| -a   | 显示所有设备信息     | -m   | 显示设备权限信息       |<br>| -f   | 显示设备文件系统信息 | -l   | 以列表形式显示设备信息 |</p><blockquote><p>注意：使用这个命令如果没有指定设备名称，则会列出所有设备信息。</p></blockquote></li></ol><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>概述：卸载就是取消磁盘分区与目录的关联关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount 磁盘分区/挂载目录</span><br></pre></td></tr></table></figure><blockquote><p>注意：umount命令可以是磁盘分区，也可以是挂载目录。</p></blockquote><h3 id="LVM概述"><a href="#LVM概述" class="headerlink" title="LVM概述"></a>LVM概述</h3><p>概述：逻辑卷管理（LVM，Logical Volume Management）是一种用于管理硬盘存储的工具，允许系统管理员在运行时动态地调整磁盘分区。LVM 提供了更灵活的存储管理方案，能够简化磁盘管理和提高存储利用率。LVM 适用于需要灵活存储管理的环境，如服务器和高性能计算集群。</p><h3 id="RAID概述"><a href="#RAID概述" class="headerlink" title="RAID概述"></a>RAID概述</h3><p>概述：冗余阵列独立磁盘（RAID，Redundant Array of Independent Disks） 是一种将多个物理硬盘组合成一个逻辑单元的技术，以提高数据存储的性能和可靠性。RAID 通过不同的配置（级别）来实现数据冗余、性能提升和故障恢复。RAID 常用于需要高可用性和性能的存储系统，如数据库服务器和文件服务器。</p><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><p>概述：计算机网络是继电信网络、有线电视网络之后出现的世界级大型网络。在计算机网络领域中，网络有若干个节点的链路组成，网络中的节点可以是计算机、交换机、路由器。</p><h3 id="Linux操作系统基本网路配置"><a href="#Linux操作系统基本网路配置" class="headerlink" title="Linux操作系统基本网路配置"></a>Linux操作系统基本网路配置</h3><h4 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h4><p>概述：在网络中，虽然可以通过IP地址访问主机，但IP地址并不便与记忆，因此，大多数用户还是通过主机名访问主机。Linux操作系统提供了hostname和hostnamectl两个命令来显示、设置系统主机名，下面分别介绍这两个命令的使用。</p><ol><li><p>hostname命令</p><p>概述：用于查询、修改主机名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname 选项 参数</span><br></pre></td></tr></table></figure><p>常用命令选项：</p><p>| 选项 | 说明                                     |<br>| —— | ———————————————————— |<br>| -a   | 显示主机别名                             |<br>| -f   | 显示完全格式的域名                       |<br>| -i   | 显示指定主机的IP地址                     |<br>| -s   | 以短格式显示，仅显示第一个点号之前的部分 |</p><blockquote><p>注意：hostname命令只是临时更改主机名，当系统重启之后，新的主机名就会失效了，如果要是新设置的主机永久生效，可以在主机名配置文件/etc/hostname中进行更改。</p></blockquote></li><li><p>hostnamectl命令</p><p>hostnamectl是从CentOS Linux 7开始新增的命令，也是用于查询、修改主机名。CentOS Linux 7及之后的版本的操作系统定义了以下3种主机名。</p><p>临时主机名（tranient）：在系统中临时分配的主机名。</p><p>静态主机名（static）：又称内核主机名或系统主机名，是系统启动时从/etc/host/name文件自动初始化的主机名。</p><p>高级主机名（pretty）：属于修饰性主机，可以使用特殊字符，如itheima‘s host。</p><p>由于CentOS Linux 7及之后版本的操作系统定义了复杂的主机名，原来的hostname命令已经无法完成复杂主机名的设置，所以增加了hostnamectl命令以实现主机的查询与设置，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl 选项/命令 参数</span><br></pre></td></tr></table></figure><p>常用选项/命令：</p><p>| 选项/命令   | 说明                 | 选项/命令    | 说明               |<br>| —————- | —————————— | —————— | ————————— |<br>| —transient | 显示或修改临时主机名 | staus        | 显示当前主机名信息 |<br>| —static    | 显示或修改静态主机名 | set-hostname | 设置               |<br>| —pretty    | 显示或修改高级主机名 |              |                    |</p><blockquote><p>注意：使用hostnamectl命令修改主机永久生效。在设置临时主机名、静态主机名和高级主机名时，主机名称要使用双引号（”“）括起来。如果设置静态主机名，则不使用临时主机名。</p></blockquote></li></ol><h4 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h4><p>概述：网卡计算机能够联网的基础，因此，网络配置其实就是网卡配置。下面将从网卡命名规范、网卡配置文件、禁用和启动网卡3个方面来讲解网卡的配置。</p><h5 id="网卡命令规范"><a href="#网卡命令规范" class="headerlink" title="网卡命令规范"></a>网卡命令规范</h5><p>概述：之前的CentOS 操作系统对以太网的命令采用的是eth#命名法，如eht0、eth1等，但是CentOS Strea 9的网卡命名规则发生了变化。</p><p>网卡名称的前两个字符的不同含义如下。</p><ul><li>en：表示以太网（Etherner）。</li><li>wl：表示无线局域网（WLAN）。</li><li>ww：表示无线广域网（WWAN）。</li></ul><p>网卡名称的第三个字符及后面字符的含义如下。</p><ul><li>o#：o表示网卡，”#“符号为内置网卡的设备编号。</li><li>s#：s表示网卡为外置网卡，”#“符号为热插件接口（slot）编号。</li><li>x#：当第三个字符为x时，”#“符号表示网卡的MAC地址。</li><li>p#s#：p表示PCI插口，p后面的”#“符号表示PCI插口编号；s表示热插拔接口，s后面的”#“符号表示热插拔接口编号。</li></ul><p>查看当前主机网卡ip命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p>使用此命令输出结果，可以显示出主机中的所有网卡，第一块网卡名为lo，用于访问本地网络，ip地址为127.0.0.1，即本机地址。第二块网卡用于接入外网，如果还有第三第四块网卡，可能为虚拟的网络连接端口</p><p>注意：在这些网卡中，最重要的是第二块网卡，只有开启该网卡，才能进行网络连接。在安装操作系统时，设置了网络类型为NAT模式，因此，en33网卡处于开启状态。并且ens33网卡可以通过DHCP（动态主机配置协议）自动获取IP地址。</p><h5 id="网卡配置文件"><a href="#网卡配置文件" class="headerlink" title="网卡配置文件"></a>网卡配置文件</h5><p>在Linux操作系统中，一切皆为文件，因此网卡配置其实就是编辑网卡配置文件，不同的操作系统的网卡配置文件不一样，路径也会不一样，所以这边是操作kali系统的网卡配置文件。</p><p>kali编辑网卡配置文件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>然后在配置过程中有需要我们物理主机的一些网络配置信息，使用ipconfig</p><ul><li><code>VMware Network Adapter VMnet1</code> 是 VMware 虚拟化软件（如 VMware Workstation 或 VMware Player）中创建的另一个虚拟网络适配器。与 <code>VMnet8</code>（通常用于 NAT 模式）不同，<code>VMnet1</code> 通常用于 桥接模式或 仅主机网络（Host-Only Network）。</li><li><code>VMware Network Adapter VMnet8</code> 是 VMware 虚拟化软件（如 VMware Workstation 或 VMware Player）中创建的一个虚拟网络适配器。<code>VMnet8</code> 通常用于 NAT 模式。</li></ul><p>接着我们就可以在网络配置文件中添加信息了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># The primary network interface</span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address x.x.x.x //设置eth0的IP地址，使用VMware8的网络号，主机号你就看哪个空闲你就用哪个</span><br><span class="line">netmask 255.255.255.0 //配置eth0的子网掩码</span><br><span class="line">gateway 192.168.X.2 //桥接模式用x.1</span><br></pre></td></tr></table></figure><p>然后还要去修改一个dns生效的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>将默认的dns改为腾讯、阿里的dns</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 119.29.29.29</span><br><span class="line">nameserver 223.5.5.5</span><br></pre></td></tr></table></figure><p>配置完IP信息后，我们重启Kali的网络服务，让网络配置生效</p><p>重启网络服务之前需要关闭NetworkManager，并且禁止该服务开机自启</p><p>注:关闭NetworkManager服务,该服务是网络服务的图形管理工具,该服务会自动接管networking服务,有可能造成重启networking服务时配置不生效的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop NetworkManager</span><br><span class="line">sudo systemctl disable NetworkManager</span><br></pre></td></tr></table></figure><p>再重启一下kali网络服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart networking</span><br></pre></td></tr></table></figure><p>然后查看一下ip，如果没有更改，就再重启一下kali的网络服务</p><p>更改成功之后测试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 4 www.baidu.com</span><br></pre></td></tr></table></figure><p>如果丢失为0，则配置成功</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>概述：Shell 是一种用户与操作系统之间的接口，它允许用户通过命令行与操作系统进行交互。Shell 可以是命令行界面（CLI）或图形用户界面（GUI），但通常所说的 Shell 指的是命令行界面。</p><blockquote><p>注意：shell脚本语言比较简单，如果有一定语言基础，推荐使用<a href="https://www.runoob.com/linux/linux-shell.html">Shell 教程 | 菜鸟教程</a></p></blockquote><h3 id="其他相关kali的操作"><a href="#其他相关kali的操作" class="headerlink" title="其他相关kali的操作"></a>其他相关kali的操作</h3><h4 id="更新kali的源，获取更新包-更新软件"><a href="#更新kali的源，获取更新包-更新软件" class="headerlink" title="更新kali的源，获取更新包/更新软件"></a>更新kali的源，获取更新包/更新软件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h4 id="kalilinux开启端口、关闭防火墙"><a href="#kalilinux开启端口、关闭防火墙" class="headerlink" title="kalilinux开启端口、关闭防火墙"></a>kalilinux开启端口、关闭防火墙</h4><p>概述：这里我们有用到ufw的操作命令，但是kali是没有安装这个命令的，所以需要手动安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ufw</span><br></pre></td></tr></table></figure><h5 id="查看防火墙状态（默认情况inaction）"><a href="#查看防火墙状态（默认情况inaction）" class="headerlink" title="查看防火墙状态（默认情况inaction）"></a>查看防火墙状态（默认情况inaction）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw status</span><br></pre></td></tr></table></figure><h5 id="防火墙版本"><a href="#防火墙版本" class="headerlink" title="防火墙版本"></a>防火墙版本</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw version</span><br></pre></td></tr></table></figure><h5 id="启动ufw防火墙"><a href="#启动ufw防火墙" class="headerlink" title="启动ufw防火墙"></a>启动ufw防火墙</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw enable</span><br></pre></td></tr></table></figure><h5 id="关闭ufw防火墙"><a href="#关闭ufw防火墙" class="headerlink" title="关闭ufw防火墙"></a>关闭ufw防火墙</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw disable</span><br></pre></td></tr></table></figure><h5 id="默认禁止访问所有"><a href="#默认禁止访问所有" class="headerlink" title="默认禁止访问所有"></a>默认禁止访问所有</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw default deny</span><br></pre></td></tr></table></figure><h5 id="开放22-TCP端口"><a href="#开放22-TCP端口" class="headerlink" title="开放22/TCP端口"></a>开放22/TCP端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 22/tcp</span><br></pre></td></tr></table></figure><h5 id="开放80端口-tcp-udp"><a href="#开放80端口-tcp-udp" class="headerlink" title="开放80端口(tcp/udp)"></a>开放80端口(tcp/udp)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 53</span><br></pre></td></tr></table></figure><h5 id="禁止外部访问"><a href="#禁止外部访问" class="headerlink" title="禁止外部访问"></a>禁止外部访问</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw deny 3306</span><br></pre></td></tr></table></figure><h5 id="删除已经添加过的规则"><a href="#删除已经添加过的规则" class="headerlink" title="删除已经添加过的规则"></a>删除已经添加过的规则</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw delete allow 22</span><br></pre></td></tr></table></figure><h5 id="允许此IP访问所有的本机端口"><a href="#允许此IP访问所有的本机端口" class="headerlink" title="允许此IP访问所有的本机端口"></a>允许此IP访问所有的本机端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow from 192.168.1.100</span><br></pre></td></tr></table></figure><h5 id="删除上面的规则"><a href="#删除上面的规则" class="headerlink" title="删除上面的规则"></a>删除上面的规则</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw delete allow from 192.168.1.100</span><br></pre></td></tr></table></figure><h5 id="禁止对8888端口的访问"><a href="#禁止对8888端口的访问" class="headerlink" title="禁止对8888端口的访问"></a>禁止对8888端口的访问</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw deny 8888</span><br></pre></td></tr></table></figure><h5 id="打开来自192-168-0-1的tcp请求的22端口"><a href="#打开来自192-168-0-1的tcp请求的22端口" class="headerlink" title="打开来自192.168.0.1的tcp请求的22端口"></a>打开来自192.168.0.1的tcp请求的22端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow proto tcp from 192.168.0.1 to any port 22</span><br></pre></td></tr></table></figure><h4 id="给kali安装Google输入法"><a href="#给kali安装Google输入法" class="headerlink" title="给kali安装Google输入法"></a>给kali安装Google输入法</h4><h4 id="给kali设置中文"><a href="#给kali设置中文" class="headerlink" title="给kali设置中文"></a>给kali设置中文</h4><p>这条命令需要root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;光速入门linux，把玩linux的常用命令行&quot;&gt;&lt;a href=&quot;#光速入门linux，把玩linux的常用命令行&quot; class=&quot;headerlink&quot; title=&quot;光速入门linux，把玩linux的常用命令行&quot;&gt;&lt;/a&gt;光速入门linux，把玩linux</summary>
      
    
    
    
    <category term="工具" scheme="https://yufusir.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="kali" scheme="https://yufusir.github.io/tags/kali/"/>
    
    <category term="Linux" scheme="https://yufusir.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>图形化界面管理学生系统（附有详细解析）</title>
    <link href="https://yufusir.github.io/posts/aee26bdb.html"/>
    <id>https://yufusir.github.io/posts/aee26bdb.html</id>
    <published>2024-11-04T16:00:00.000Z</published>
    <updated>2024-11-07T03:31:02.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图形化界面的学生管理系统"><a href="#图形化界面的学生管理系统" class="headerlink" title="图形化界面的学生管理系统"></a>图形化界面的学生管理系统</h2><blockquote><p>注意：本次项目学习与b站，地址为<a href="https://www.bilibili.com/video/BV1Dg4y1k7SY/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=d7aed904328df9600c4d6478e2ce67b8">基于python和mysql数据库的图形化界面学生管理系统_哔哩哔哩_bilibili</a></p></blockquote><p>然后我下面的内容讲的是关于这个项目怎么在本地运行，与每条代码的功能实现</p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><p>概述：本项目一共有四个文件，还有一个数据库，如果我们只想成功运行这个项目的话，我们只需要对mysql_student.py文件中开头的数据库连接对象进行配置即可，其中如果你的数据库在本地，配置起来是非常简单的，如果你的数据库放在远程服务器或者在虚拟机里，以下内容则是这次配置远程数据库</p><h4 id="添加mysql配置"><a href="#添加mysql配置" class="headerlink" title="添加mysql配置"></a>添加mysql配置</h4><p>概述：默认情况下，mysql可能只允许本地连接，如果是连接虚拟机或者外界的数据库时需要在mysql中的配置文件，MySQL配置文件通常放在<code>/etc/mysql/my.cnf</code>或者<code>/ect/mysqlmysql.conf.d/mysqld.cnf</code>，使用vim编辑器添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind-address = 0.0.0.0  # 允许所有 IP 连接</span><br></pre></td></tr></table></figure><h4 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h4><p>概述：创建具有从远程主机连接的权限的mysql用户，可以在mysql命令行工具执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;your_user&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;your_password&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;your_user&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h4 id="启动mysql服务器"><a href="#启动mysql服务器" class="headerlink" title="启动mysql服务器"></a>启动mysql服务器</h4><p>概述：使mysql服务端运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql #查看MySQL服务器状态</span><br><span class="line">sudo systemctl start mysql  #启动MySQL服务器</span><br></pre></td></tr></table></figure><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><p>概述：MySQL服务器默认端口为3306。你可以使用以下命令来关闭3306端口的防火强从而允许 MySQL 连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 3306 #打开3306端口</span><br><span class="line">sudo ufw deny 3306  #关闭3306端口</span><br></pre></td></tr></table></figure><h4 id="查找服务器ip"><a href="#查找服务器ip" class="headerlink" title="查找服务器ip"></a>查找服务器ip</h4><p>概述：使用ifcomfig命令查看Linux的ip地址，地址在<code>inet</code>字段后面</p><h3 id="源代码与代码解析"><a href="#源代码与代码解析" class="headerlink" title="源代码与代码解析"></a>源代码与代码解析</h3><p>概述：理解代码有利于自己以后的服务器开发，下面记录着我对代码的理解</p><h4 id="用LoginPage-py实现登录注册界面"><a href="#用LoginPage-py实现登录注册界面" class="headerlink" title="用LoginPage.py实现登录注册界面"></a>用LoginPage.py实现登录注册界面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from tkinter import messagebox</span><br><span class="line">import mysql_student</span><br><span class="line">from MianPgae import MianPage</span><br><span class="line"></span><br><span class="line">class LoginPage:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.root = master</span><br><span class="line"></span><br><span class="line">        # 定义窗口面，设置窗口大小，设置左上角的标题</span><br><span class="line">        self.root.geometry(&#x27;300x150&#x27;)</span><br><span class="line">        self.root.title(&#x27;登录页&#x27;)</span><br><span class="line">        # 创建一个新的 Frame（一个容器），并将其附加到主窗口 self.root 上</span><br><span class="line">        # 同时把这个 Frame 的引用存储在 self.page 中，以便后续使用。这使得你可以在self.page中添加其他的组件，形成一个完整的界面部分。</span><br><span class="line">        self.page = Frame(self.root)</span><br><span class="line">        # 将窗口的控件进行简单的布局</span><br><span class="line">        self.page.pack()</span><br><span class="line"></span><br><span class="line">        # 通过键盘键入账号，密码的容器StringVar() 是 Python 的 Tkinter 库中的一个类，用于在 Tkinter 应用程序中管理和跟踪字符串类型的变量。</span><br><span class="line">        # StringVar() 可以与 Tkinter 控件绑定，使得当变量的值发生变化时，相关控件的显示内容也会自动更新，反之亦然。</span><br><span class="line">        self.username = StringVar()</span><br><span class="line">        self.password = StringVar()</span><br><span class="line">        # 账号框，Label是标签控件，Entry是单行输入框控件，grid() 方法用于将控件放置在一个网格布局中。</span><br><span class="line">        # row指定行位置，column指定列位置，pady用于设置上下标签的间距</span><br><span class="line">        Label(self.page, text=&#x27;账号: &#x27;).grid(row=1, column=1)</span><br><span class="line">        Entry(self.page, textvariable=self.username).grid(row=1, column=2)</span><br><span class="line">        # 密码框，textvariable=self.password 是一个 Tkinter 变量（通常是 StringVar 类型）</span><br><span class="line">        # 用于跟踪输入框中的文本内容。self.password 应该在类的其他部分定义，用于存储用户输入的密码。</span><br><span class="line">        Label(self.page, text=&#x27;密码: &#x27;, ).grid(row=2, column=1, pady=18)</span><br><span class="line">        Entry(self.page, show=&#x27;*&#x27;, textvariable=self.password).grid(row=2, column=2)</span><br><span class="line">        # 注册登录退出三个选项，Button是一个按钮控件</span><br><span class="line">        # command=self.register 指定当按钮被点击时要执行的命令。self.register 是一个方法，应该在类的其他部分定义，用于处理注册逻辑。</span><br><span class="line">        Button(self.page, text=&#x27;注册&#x27;, command=self.register).grid(row=3, column=1, pady=4)</span><br><span class="line">        Button(self.page, text=&#x27;登录&#x27;, command=self.login).grid(row=3, column=2)</span><br><span class="line">        Button(self.page, text=&#x27;退出&#x27;, command=self.page.quit).grid(row=3, column=3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 注册部分调用add_login类来实现注册新账号</span><br><span class="line">    def register(self):</span><br><span class="line">        # 释放self.page中的所有组件与框架</span><br><span class="line">        self.page.destroy()</span><br><span class="line">        add_login(self.root)</span><br><span class="line"></span><br><span class="line">    # 点击登录按键后去查找账号密码是否正确，不正确发出警告，正确则进入信息页面</span><br><span class="line">    def login(self):</span><br><span class="line">        uname = self.username.get()</span><br><span class="line">        pwd = self.password.get()</span><br><span class="line">        # Python可以返回多个值，在这里check_login()函数返回了两个值</span><br><span class="line">        flag, message = mysql_student.check_login(uname, pwd) # 通过文件mysql_student的函数判断账号密码是否正确</span><br><span class="line">        if flag:</span><br><span class="line">            self.page.pack_forget()</span><br><span class="line">            MianPage(self.root)</span><br><span class="line">        else: messagebox.showwarning(title = &#x27;警告&#x27;, message = message)</span><br><span class="line">        # messagebox.showwarning 函数用于显示一个警告对话框，通常用于提示用户某些潜在的问题或警告。</span><br><span class="line">        # title: 这是对话框的标题，通常显示在窗口的标题栏中。在你的例子中，title=&#x27;警告&#x27; 表示对话框的标题是“警告”。</span><br><span class="line">        # message: 这是要显示的消息内容，通常是一个字符串。在你的例子中，message=message 表示将变量 message 中的内容作为对话框的消息显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主要负责注册页面的实现</span><br><span class="line">class add_login:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line"></span><br><span class="line">        self.page = master</span><br><span class="line"></span><br><span class="line">        self.username = StringVar()             # 账号容器</span><br><span class="line">        self.password = StringVar()             # 密码容器</span><br><span class="line">        self.password_examine = StringVar()     # 二次键入密码容器</span><br><span class="line">        self.password_root = StringVar()        # 管理员密码容器</span><br><span class="line">        # 管理员密码用于查验管理员身份，若一致才能注册账号并登录</span><br><span class="line"></span><br><span class="line">        self.page.title(&#x27;注册账号&#x27;)</span><br><span class="line">        self.page.geometry(&#x27;300x200&#x27;)</span><br><span class="line"></span><br><span class="line">        self.root = Frame(self.page)</span><br><span class="line">        self.root.pack()</span><br><span class="line"></span><br><span class="line">        Label(self.root, text=&#x27;账   号: &#x27;).grid(row=1, column=1)</span><br><span class="line">        Entry(self.root, textvariable=self.username).grid(row=1, column=2)</span><br><span class="line"></span><br><span class="line">        # 密码</span><br><span class="line">        Label(self.root, text=&#x27;密   码: &#x27;).grid(row=2, column=1, pady=18)</span><br><span class="line">        Entry(self.root,  show = &#x27;*&#x27;, textvariable=self.password).grid(row=2, column=2)</span><br><span class="line"></span><br><span class="line">        Label(self.root, text=&#x27;确 认 密 码: &#x27;).grid(row=3, column=1)</span><br><span class="line">        Entry(self.root,  show = &#x27;*&#x27;, textvariable=self.password_examine).grid(row=3, column=2)</span><br><span class="line"></span><br><span class="line">        Label(self.root, text= &#x27;管理员密码: &#x27;).grid(row=4, column=1, pady=18)</span><br><span class="line">        Entry(self.root, show=&#x27;*&#x27;, textvariable=self.password_root).grid(row=4, column=2)</span><br><span class="line"></span><br><span class="line">        Button(self.root, text=&#x27;返  回&#x27;, command=self.login_page).grid(row=5, column=1)</span><br><span class="line">        Button(self.root, text=&#x27;注  册&#x27;, command=self.examine).grid(row=5, column=2)</span><br><span class="line"></span><br><span class="line">    # 用户取消账号注册，选择取消，进入登录界面</span><br><span class="line">    def login_page(self):</span><br><span class="line">        # 隐藏框架，不会销毁对象,这里替换用destory()函数销毁也是可行的</span><br><span class="line">        self.root.pack_forget()</span><br><span class="line">        LoginPage(self.page)</span><br><span class="line"></span><br><span class="line">    # 英文意思检查，检验，用户检验账号密码是否合规，例如长度，账号是否已经被注册，管理员密码是否正确</span><br><span class="line">    def examine(self):</span><br><span class="line">        self.uname = self.username.get()</span><br><span class="line">        self.pwd = self.password.get()</span><br><span class="line">        self.pwd_exm = self.password_examine.get()</span><br><span class="line">        self.pwd_root = self.password_root.get()</span><br><span class="line">        if len(self.uname) &lt; 5:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;账号不符合要求，请输入最少5位字符&#x27;)</span><br><span class="line">        elif mysql_student.check_usname(self.uname) == True:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;账号已存在，请更改你的账号&#x27;)</span><br><span class="line">        elif len(self.pwd) &lt; 8:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;密码不符合要求，请输入最少8位字符&#x27;)</span><br><span class="line">        elif self.pwd != self.pwd_exm:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;两次密码不相同，请重新输入&#x27;)</span><br><span class="line">        elif self.pwd_root != &#x27;root&#x27;:</span><br><span class="line">            messagebox.showwarning(title=&#x27;警告&#x27;, message=&#x27;管理员密码错误，无法注册账号&#x27;)</span><br><span class="line">        else: self.login()</span><br><span class="line"></span><br><span class="line">    # 同登录页面的login, 实现账号密码的新添加以及进入主页面，即信息页面</span><br><span class="line">    def login(self):</span><br><span class="line">        mysql_student.add_admin_name_pwd(self.uname, self.pwd)</span><br><span class="line">        self.root.pack_forget()</span><br><span class="line">        MianPage(self.page)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 创建一个Frame对象</span><br><span class="line">    page = Tk()</span><br><span class="line">    LoginPage(page)</span><br><span class="line">    # 当用户关闭窗口时，程序就会终止</span><br><span class="line">    page.mainloop()</span><br></pre></td></tr></table></figure><h4 id="用MianPgae-py实现主页面，并完善菜单功能"><a href="#用MianPgae-py实现主页面，并完善菜单功能" class="headerlink" title="用MianPgae.py实现主页面，并完善菜单功能"></a>用MianPgae.py实现主页面，并完善菜单功能</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from views import ChangeFrame, DeleteFrame, InsertFrame, SearchFrame, HelpFrame</span><br><span class="line">import mysql_student</span><br><span class="line">import keyboard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主页面的实现</span><br><span class="line">class MianPage:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.root = master</span><br><span class="line">        self.root.title(&#x27;学生信息管理系统&#x27;)</span><br><span class="line">        self.root.geometry(&#x27;570x290&#x27;)</span><br><span class="line">        self.create_page()</span><br><span class="line"></span><br><span class="line">    # 用于创建和配置主界面的菜单以及不同的功能框架，通过menu组件创建菜单</span><br><span class="line">    def create_page(self):</span><br><span class="line">        # 创建了多个功能框架（如插入、查询、删除、修改和帮助）</span><br><span class="line">        self.insert_frame = InsertFrame(self.root)</span><br><span class="line">        self.search_frame = SearchFrame(self.root)</span><br><span class="line">        self.delete_frame = DeleteFrame(self.root)</span><br><span class="line">        self.change_frame = ChangeFrame(self.root)</span><br><span class="line">        self.help_frame = HelpFrame(self.root)</span><br><span class="line">        # 创建一个菜单栏，tearoff=False 表示菜单不会被分离为独立窗口。</span><br><span class="line">        menubar = Menu(self.root, tearoff=False)</span><br><span class="line"></span><br><span class="line">        # 对于菜单按钮的一个实现</span><br><span class="line">        # 第一个大按钮录入</span><br><span class="line">        menubar.add_command(label=&#x27; 录 入 &#x27;, command=self.show_insert)</span><br><span class="line"></span><br><span class="line">        # 第二部分查询按钮，实现最复杂的一部分</span><br><span class="line">        # 创建一个子菜单</span><br><span class="line">        submenu_search = Menu(menubar)</span><br><span class="line">        # 实现降序， 快捷键为ctrl + j</span><br><span class="line">        # label: 菜单项的名称，用户在菜单中看到的文本。</span><br><span class="line">        # command: 当用户选择该菜单项时要调用的函数（方法）。</span><br><span class="line">        # accelerator: 显示在菜单项旁边的快捷键提示，通常用于提高用户操作的效率。</span><br><span class="line">        submenu_search.add_command(label = &#x27;降   序&#x27;, command=self.show_search_sort_down,accelerator=&quot;Ctrl + J&quot;)</span><br><span class="line">        # 分割降序和其他部分，降序是是否选，下面的是多选一，默认为选择学号</span><br><span class="line">        submenu_search.add_separator()</span><br><span class="line">        submenu_search.add_command(label=&#x27;学   号&#x27;,  command=self.show_search_id,  accelerator=&quot;Ctrl + D&quot;)</span><br><span class="line">        submenu_search.add_command(label=&#x27;总   分&#x27;, command=self.show_search_total, accelerator=&quot;Ctrl + T&quot;)</span><br><span class="line">        submenu_search.add_command(label=&#x27;数   学&#x27;, command=self.show_search_math,accelerator=&quot;Ctrl + M&quot;)</span><br><span class="line">        submenu_search.add_command(label=&#x27;英   语&#x27;, command=self.show_search_english, accelerator=&quot;Ctrl + E&quot;)</span><br><span class="line">        submenu_search.add_command(label=&#x27;计算机&#x27;, command=self.show_search_computer, accelerator=&quot;Ctrl + S&quot;)</span><br><span class="line"></span><br><span class="line">        # 实现快捷键</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+j&#x27;, self.show_search_sort_down)    # 降序快捷键ctrl+j</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+d&#x27;, self.show_search_id)           # 学号快捷键ctrl+d</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+t&#x27;, self.show_search_total)        # 总分快捷键ctrl+t</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+m&#x27;, self.show_search_math)         # 数学快捷键ctrl+m</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+e&#x27;, self.show_search_english)      # 英语快捷键ctrl+e</span><br><span class="line">        keyboard.add_hotkey(&#x27;ctrl+s&#x27;, self.show_search_computer)     # 计算机快捷键ctrl+s</span><br><span class="line"></span><br><span class="line">        #实现剩下的主菜单栏</span><br><span class="line">        menubar.add_cascade(label=&#x27; 查 询 &#x27;, menu = submenu_search)</span><br><span class="line">        menubar.add_command(label=&#x27; 删 除 &#x27;, command=self.show_delete)</span><br><span class="line">        menubar.add_command(label=&#x27; 修 改 &#x27;, command=self.show_change)</span><br><span class="line">        menubar.add_command(label=&#x27; 帮 助 &#x27;, command=self.show_help)</span><br><span class="line">        # 创建的菜单栏 menubar 配置到主窗口 self.root 中，使得菜单可见并可用。</span><br><span class="line">        self.root.config(menu = menubar)</span><br><span class="line"></span><br><span class="line">        # 下面是一个事件处理函数，当用户右键点击时会被调用。</span><br><span class="line">        def xShowMenu(event):</span><br><span class="line">            menubar.post(event.x_root, event.y_root)  # 将菜单条绑定上事件，坐标为x和y的root位置</span><br><span class="line"></span><br><span class="line">        self.root.bind(&quot;&lt;Button-3&gt;&quot;, xShowMenu)       # 设定鼠标右键触发事件，调用xShowMenu方法</span><br><span class="line">        self.show_insert()  # 进入程序第一个进入就是插入界面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 升或降序排列的值由mysql.student.sort_student 的值来决定，每点击一次就异或上一改变其值</span><br><span class="line">    def show_search_sort_down(self):</span><br><span class="line">        mysql_student.sort_student ^= 1</span><br><span class="line">        self.show_search()</span><br><span class="line"></span><br><span class="line">    # 下面都是剩下几种排序的实现</span><br><span class="line">    def show_search_id(self):</span><br><span class="line">        mysql_student.sort_data = 0</span><br><span class="line">        self.show_search()</span><br><span class="line">    def show_search_total(self):</span><br><span class="line">        mysql_student.sort_data = 1</span><br><span class="line">        self.show_search()</span><br><span class="line">    def show_search_math(self):</span><br><span class="line">        mysql_student.sort_data = 2</span><br><span class="line">        self.show_search()</span><br><span class="line">    def show_search_english(self):</span><br><span class="line">        mysql_student.sort_data = 3</span><br><span class="line">        self.show_search()</span><br><span class="line">    def show_search_computer(self):</span><br><span class="line">        mysql_student.sort_data = 4</span><br><span class="line">        self.show_search()</span><br><span class="line"></span><br><span class="line">    # 创建某一个页面需要把前面页面留下的东西给pack_forget()来清空一下，然后在实现功能</span><br><span class="line">    def show_insert(self):</span><br><span class="line">        self.insert_frame.pack()</span><br><span class="line">        self.search_frame.pack_forget()</span><br><span class="line">        self.delete_frame.pack_forget()</span><br><span class="line">        self.change_frame.pack_forget()</span><br><span class="line">        self.help_frame.pack_forget()</span><br><span class="line"></span><br><span class="line">    def show_search(self):</span><br><span class="line">        self.insert_frame.pack_forget()</span><br><span class="line">        self.delete_frame.pack_forget()</span><br><span class="line">        self.change_frame.pack_forget()</span><br><span class="line">        self.help_frame.pack_forget()</span><br><span class="line">        self.search_frame.pack()</span><br><span class="line">        # 显示学生信息</span><br><span class="line">        self.search_frame.show_search_data()</span><br><span class="line"></span><br><span class="line">    def show_delete(self):</span><br><span class="line">        self.delete_frame.pack()</span><br><span class="line">        self.insert_frame.pack_forget()</span><br><span class="line">        self.search_frame.pack_forget()</span><br><span class="line">        self.change_frame.pack_forget()</span><br><span class="line">        self.help_frame.pack_forget()</span><br><span class="line"></span><br><span class="line">    def show_change(self):</span><br><span class="line">        self.change_frame.pack()</span><br><span class="line">        self.insert_frame.pack_forget()</span><br><span class="line">        self.search_frame.pack_forget()</span><br><span class="line">        self.delete_frame.pack_forget()</span><br><span class="line">        self.help_frame.pack_forget()</span><br><span class="line">    def show_help(self):</span><br><span class="line">        self.change_frame.pack_forget()</span><br><span class="line">        self.insert_frame.pack_forget()</span><br><span class="line">        self.search_frame.pack_forget()</span><br><span class="line">        self.delete_frame.pack_forget()</span><br><span class="line">        self.help_frame.pack()</span><br></pre></td></tr></table></figure><h4 id="用mysql-student-py对远程数据库的连接与数据操作"><a href="#用mysql-student-py对远程数据库的连接与数据操作" class="headerlink" title="用mysql_student.py对远程数据库的连接与数据操作"></a>用mysql_student.py对远程数据库的连接与数据操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from tkinter import *</span><br><span class="line">import pymysql</span><br><span class="line"># 创建连接数据库student的对象conn</span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=&#x27;xxxx.xxxx.xxxx.xxxx&#x27;,  # 数据库主机名或者ip</span><br><span class="line">    port=xxx,  # 数据库端口号，默认为3306,需要把防火墙打开，或者指定主机</span><br><span class="line">    user=&#x27;xxx&#x27;,  # 数据库用户名</span><br><span class="line">    password=&#x27;xxx&#x27;,  # 数据库密码</span><br><span class="line">    autocommit=True  # 设置修改数据无需确认</span><br><span class="line">)</span><br><span class="line"># 获取游标对象</span><br><span class="line">sort_student = int(0)</span><br><span class="line">sort_data = int(0)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()  # 创建一个游标对象的关键步骤，之后你可以使用这个游标来执行 SQL 语句</span><br><span class="line"></span><br><span class="line"># 创建数据库，若有则不创建</span><br><span class="line">cursor.execute(&quot;create database if not exists student;&quot;)</span><br><span class="line">conn.select_db(&quot;student&quot;) # 建立与数据库的连接</span><br><span class="line"></span><br><span class="line"># 创建学生信息表， 若有则不创建</span><br><span class="line">cursor.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS students(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(10),</span><br><span class="line">    kulas varchar(10),</span><br><span class="line">    math int,</span><br><span class="line">    english int,</span><br><span class="line">    computer int,</span><br><span class="line">    total int</span><br><span class="line">);&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建账号密码表，若有则不创建</span><br><span class="line">cursor.execute(&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS admin_name_pwd(</span><br><span class="line">    name varchar(10),</span><br><span class="line">    pwd varchar(10)</span><br><span class="line">);&quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断登录的账号密码是否都正确</span><br><span class="line">def check_login(uname, pwd):</span><br><span class="line">    cursor.execute(&quot;select * from admin_name_pwd&quot;)</span><br><span class="line">    results = cursor.fetchall()  # 是游标对象的方法之一，用于获取查询结果的所有行。它返回一个列表，其中每一项都是一个表示一行数据的元组。如果没有更多的行可供提取，它将返回一个空列表。</span><br><span class="line">    # print(results) # 用于测试</span><br><span class="line">    for na, pd in results:</span><br><span class="line">        if na == uname and pd == pwd:</span><br><span class="line">            return True, &#x27;登录成功&#x27;</span><br><span class="line">    return False, &#x27;登录失败,账号或密码错误&#x27;</span><br><span class="line"></span><br><span class="line"># 添加正确注册的账号以及密码</span><br><span class="line">def add_admin_name_pwd(uname, pwd):</span><br><span class="line">    cursor.execute(&quot;insert into admin_name_pwd values(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;);&quot;.format(uname, pwd))</span><br><span class="line"></span><br><span class="line"># 检验注册的账号名称是否已经存在</span><br><span class="line">def check_usname(uname):</span><br><span class="line">    cursor.execute(&quot;select count(*) from admin_name_pwd anp where name = &#x27;&#123;0&#125;&#x27;;&quot;.format(uname))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取数据库中学生所有信息，按给定的信息给出</span><br><span class="line"># 通过全局变量sort_data以及sort_student</span><br><span class="line"># sort_student 为0代表升序，为一代表降序</span><br><span class="line">def all():</span><br><span class="line">    if sort_student == 1:</span><br><span class="line">        if sort_data == 0:</span><br><span class="line">            cursor.execute(&quot;select * from students order by id;&quot;)</span><br><span class="line">        elif sort_data == 1:</span><br><span class="line">            cursor.execute(&quot;select * from students order by total;&quot;)</span><br><span class="line">        elif sort_data == 2:</span><br><span class="line">            cursor.execute(&quot;select * from students order by math;&quot;)</span><br><span class="line">        elif sort_data == 3:</span><br><span class="line">            cursor.execute(&quot;select * from students order by english;&quot;)</span><br><span class="line">        elif sort_data == 4:</span><br><span class="line">            cursor.execute(&quot;select * from students order by computer;&quot;)</span><br><span class="line">    else:</span><br><span class="line">        if sort_data == 0:</span><br><span class="line">            cursor.execute(&quot;select * from students order by id desc;&quot;)</span><br><span class="line">        elif sort_data == 1:</span><br><span class="line">            cursor.execute(&quot;select * from students order by total desc;&quot;)</span><br><span class="line">        elif sort_data == 2:</span><br><span class="line">            cursor.execute(&quot;select * from students order by math desc;&quot;)</span><br><span class="line">        elif sort_data == 3:</span><br><span class="line">            cursor.execute(&quot;select * from students order by english desc;&quot;)</span><br><span class="line">        elif sort_data == 4:</span><br><span class="line">            cursor.execute(&quot;select * from students order by computer desc;&quot;)</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&#x27;id&#x27;, &#x27;name&#x27;, &#x27;kulas&#x27;, &#x27;math&#x27;, &#x27;english&#x27;, &#x27;computer&#x27;, &#x27;total&#x27;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    # 通过数据得到的数据是元组类型，需要压缩成字典类型便于输出</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"></span><br><span class="line"># 查询录入的学号是否存在</span><br><span class="line"></span><br><span class="line">def check_student_id(id):</span><br><span class="line">    cursor.execute(&quot;select count(*) from students where id = &#x27;&#123;0&#125;&#x27;;&quot;.format(id))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        return False, &quot;该学号已存在请重新输入&quot;</span><br><span class="line">    return True, &#x27;录入成功&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 单独查询某个班级的成绩</span><br><span class="line">def search_kulas(kulas_value):</span><br><span class="line">    cursor.execute(&quot;select * from students where kulas = &#x27;&#123;0&#125;&#x27;;&quot;.format(kulas_value))</span><br><span class="line">    data = cursor.fetchall()</span><br><span class="line">    key = (&#x27;id&#x27;, &#x27;name&#x27;, &#x27;kulas&#x27;, &#x27;math&#x27;, &#x27;english&#x27;, &#x27;computer&#x27;, &#x27;total&#x27;)</span><br><span class="line">    jsonList = []</span><br><span class="line">    # 通过数据得到的数据是元组类型，需要压缩成字典类型便于输出</span><br><span class="line">    for i in data:</span><br><span class="line">        jsonList.append(dict(zip(key, i)))</span><br><span class="line">    return jsonList</span><br><span class="line"># 插入一条学生信息</span><br><span class="line">def insert(stu):</span><br><span class="line">    cursor.execute(&quot;insert into students values(&#x27;&#123;0&#125;&#x27;, &#x27;&#123;1&#125;&#x27;, &#x27;&#123;2&#125;&#x27;,&#x27;&#123;3&#125;&#x27;, &#x27;&#123;4&#125;&#x27;, &#x27;&#123;5&#125;&#x27;, &#x27;&#123;6&#125;&#x27;);&quot;.</span><br><span class="line">                   format(stu[0], stu[1], stu[2], stu[3], stu[4], stu[5], stu[6]))</span><br><span class="line"></span><br><span class="line"># 通过id来删除学生信息</span><br><span class="line">def delete_id(user_id):</span><br><span class="line">    cursor.execute(&quot;select count(*) from students where id = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_id))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        cursor.execute(&quot;delete from students where id = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_id))</span><br><span class="line">        return True, &#x27;删除成功&#x27;</span><br><span class="line">    else: return False, &#x27;学号为&#x27; + str(user_id) + &#x27;的学生不存在&#x27;</span><br><span class="line"></span><br><span class="line"># 通过名字来删除学生信息</span><br><span class="line">def delete_name(user_name):</span><br><span class="line">    cursor.execute(&quot;select count(*) from students where name = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_name))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    # print(res)</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        cursor.execute(&quot;delete from students where name = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_name))</span><br><span class="line">        return True, &#x27;删除成功&#x27;</span><br><span class="line">    else: return False, &#x27;姓名为&#x27; + str(user_name) + &#x27;的学生不存在&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过id来查询学生的信息</span><br><span class="line">def search_id(user_id):</span><br><span class="line">    cursor.execute(&quot;select count(*) from students where id = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_id))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        cursor.execute(&quot;select * from students where id = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_id))</span><br><span class="line">        stu = cursor.fetchall()</span><br><span class="line">        return True, stu</span><br><span class="line">    else:</span><br><span class="line">        return False, &#x27;学号为&#x27; + str(user_id) + &#x27;的学生不存在&#x27;</span><br><span class="line"></span><br><span class="line"># 通过学生姓名来查询剩余的信息</span><br><span class="line">def search_name(user_name):</span><br><span class="line">    cursor.execute(&quot;select count(*) from students where name = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_name))</span><br><span class="line">    res = cursor.fetchall()</span><br><span class="line">    if res[0][0]:</span><br><span class="line">        cursor.execute(&quot;select * from students where name = &#x27;&#123;0&#125;&#x27;;&quot;.format(user_name))</span><br><span class="line">        stu = cursor.fetchall()</span><br><span class="line">        return True, stu</span><br><span class="line">    else:</span><br><span class="line">        return False, &#x27;名字为&#x27; + str(user_name) + &#x27;的学生不存在&#x27;</span><br><span class="line"></span><br><span class="line"># 下面内容是初始化数据库，不过需要手动解开注释</span><br><span class="line">tuple = (</span><br><span class="line">         (20, &#x27;徐寒研&#x27;, &#x27;软件开发4班&#x27;, 68, 59, 86, 213),</span><br><span class="line">         (19, &#x27;荣浩博&#x27;, &#x27;软件开发4班&#x27;, 56, 83, 20, 159),</span><br><span class="line">         (18, &#x27;刘德泽&#x27;, &#x27;软件开发4班&#x27;, 78, 83, 89, 250),</span><br><span class="line">         (17, &#x27;陈涵梁&#x27;, &#x27;软件开发4班&#x27;, 68, 99, 67, 234),</span><br><span class="line">         (16, &#x27;宋明玉&#x27;, &#x27;软件开发4班&#x27;, 79, 72, 90, 241),</span><br><span class="line">         (15, &#x27;邓海洋&#x27;, &#x27;软件开发4班&#x27;, 68, 47, 89, 204),</span><br><span class="line">         (14, &#x27;快乐男孩&#x27;, &#x27;软件开发4班&#x27;, 79, 78, 48, 205),</span><br><span class="line">         (13, &#x27;周解青&#x27;, &#x27;软件开发4班&#x27;, 69, 78, 82, 229),</span><br><span class="line">         (12, &#x27;帅哥&#x27;, &#x27;软件开发4班&#x27;, 72, 47, 88, 207),</span><br><span class="line">         (11, &#x27;金十一&#x27;, &#x27;物联网3班&#x27;, 84, 68, 92, 244),</span><br><span class="line">         (10, &#x27;郑十&#x27;, &#x27;物联网2班&#x27;, 81, 75, 88, 244),</span><br><span class="line">         (9, &#x27;吴九&#x27;, &#x27;大数据1班&#x27;, 92, 87, 61, 240),</span><br><span class="line">         (8, &#x27;周八&#x27;, &#x27;软件土木3班&#x27;, 87, 71, 92, 250),</span><br><span class="line">         (7, &#x27;孙七&#x27;, &#x27;计算机1班&#x27;, 64, 76, 83, 223),</span><br><span class="line">         (6, &#x27;赵六&#x27;, &#x27;软件开发4班&#x27;, 48, 86, 75, 209),</span><br><span class="line">         (5, &#x27;王五&#x27;, &#x27;软件金融2班&#x27;, 78, 92, 62, 232),</span><br><span class="line">         (4, &#x27;李四&#x27;, &#x27;软件会计2班&#x27;, 80, 83, 45, 208),</span><br><span class="line">         (3, &#x27;张三&#x27;, &#x27;软件土木5班&#x27;, 61, 72, 77, 210),</span><br><span class="line">         (2, &#x27;陈二&#x27;, &#x27;计算机5班&#x27;, 81, 67, 72, 220),</span><br><span class="line">         (1, &#x27;刘一&#x27;, &#x27;软件开发4班&#x27;, 60, 85, 67, 212))</span><br><span class="line"></span><br><span class="line"># 手动解除即可将这些信息添加进数据库中，使用之后需重新注释</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 往student中加入信息，若有则不加入</span><br><span class="line">for stu in tuple:</span><br><span class="line">    if check_student_id(stu[0])[0] == True:</span><br><span class="line">        insert(stu)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 加入初始账号，若有则不加入</span><br><span class="line">if check_usname(&quot;root&quot;) == False:</span><br><span class="line">    add_admin_name_pwd(&#x27;root&#x27;, &#x27;root&#x27;)</span><br></pre></td></tr></table></figure><h4 id="用views-py实现各项功能的框架"><a href="#用views-py实现各项功能的框架" class="headerlink" title="用views.py实现各项功能的框架"></a>用views.py实现各项功能的框架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br></pre></td><td class="code"><pre><span class="line">from tkinter import *</span><br><span class="line">from tkinter import ttk</span><br><span class="line">import mysql_student</span><br><span class="line">from tkinter import messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实现录入页面的类</span><br><span class="line">class InsertFrame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line">        self.id = StringVar()</span><br><span class="line">        self.name = StringVar()</span><br><span class="line">        self.kulas = StringVar()</span><br><span class="line">        self.math = StringVar()</span><br><span class="line">        self.english = StringVar()</span><br><span class="line">        self.computer = StringVar()</span><br><span class="line"></span><br><span class="line">        # 打印录入是否成功信息</span><br><span class="line">        self.status_insert = StringVar()</span><br><span class="line"></span><br><span class="line">        self.insert_page()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 打印修输入的项目以及输入框</span><br><span class="line">    def insert_page(self):</span><br><span class="line">        Label(self, text=&#x27;学   号 : &#x27;).grid(row=1, column=1, pady=5)</span><br><span class="line">        self.entry_id = Entry(self, textvariable=self.id)</span><br><span class="line">        self.entry_id.grid(row=1, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text = &#x27;姓   名 : &#x27;).grid(row=2, column = 1, pady=5)</span><br><span class="line">        self.entry_name = Entry(self, textvariable=self.name)</span><br><span class="line">        self.entry_name.grid(row = 2, column = 2, pady = 5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;班   级 : &#x27;).grid(row=3, column=1, pady=5)</span><br><span class="line">        self.entry_kulas = Entry(self, textvariable=self.kulas)</span><br><span class="line">        self.entry_kulas.grid(row=3, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;数   学 : &#x27;).grid(row=4, column=1, pady=5)</span><br><span class="line">        self.entry_math = Entry(self, textvariable=self.math)</span><br><span class="line">        self.entry_math.grid(row=4, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;英   语 : &#x27;).grid(row=5, column=1, pady=5)</span><br><span class="line">        self.entry_english = Entry(self, textvariable=self.english)</span><br><span class="line">        self.entry_english.grid(row=5, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;计算机 : &#x27;).grid(row=6, column=1, pady=5)</span><br><span class="line">        self.entry_computer = Entry(self, textvariable=self.computer)</span><br><span class="line">        self.entry_computer.grid(row=6, column=2, pady=5)</span><br><span class="line"></span><br><span class="line">        Button(self, text = &#x27;清空&#x27;, command = self.insert_deleteValue).grid(row=7, column=1, pady=10)</span><br><span class="line">        Button(self, text = &#x27;录入&#x27;, command = self.insert_data).grid(row = 7, column = 3, pady = 10)</span><br><span class="line"></span><br><span class="line">        Label(self, textvariable=self.status_insert).grid(row=8, column=2, padx=10)</span><br><span class="line">    # 输出所有学生信息</span><br><span class="line">    def insert_data(self):</span><br><span class="line">        # 检查信息是否为空，为空赋初始值</span><br><span class="line">        if not self.id.get():</span><br><span class="line">            self.insert_id = int(0)</span><br><span class="line">        else: self.insert_id = int(self.id.get())</span><br><span class="line"></span><br><span class="line">        if not self.name.get():</span><br><span class="line">            self.insert_name = &#x27;NULL&#x27;</span><br><span class="line">        else: self.insert_name = self.name.get()</span><br><span class="line"></span><br><span class="line">        if not self.kulas.get():</span><br><span class="line">            self.insert_kulas = &#x27;NULL&#x27;</span><br><span class="line">        else: self.insert_kulas = self.kulas.get()</span><br><span class="line"></span><br><span class="line">        if not self.math.get():</span><br><span class="line">            self.insert_math = int(0)</span><br><span class="line">        else: self.insert_math = int(self.math.get())</span><br><span class="line"></span><br><span class="line">        if not self.english.get():</span><br><span class="line">            self.insert_english = int(0)</span><br><span class="line">        else: self.insert_english = int(self.english.get())</span><br><span class="line"></span><br><span class="line">        if not self.computer.get():</span><br><span class="line">            self.insert_computer = int(0)</span><br><span class="line">        else: self.insert_computer = int(self.computer.get())</span><br><span class="line"></span><br><span class="line">        flag, s = mysql_student.check_student_id(self.insert_id) # 查询id</span><br><span class="line">        self.status_insert.set(s)</span><br><span class="line">        if flag == False: # 若已经存在的情况，不能录入</span><br><span class="line">            return</span><br><span class="line">        self.insert_total = self.insert_math + self.insert_computer + self.insert_english</span><br><span class="line">        stu = (self.insert_id, self.insert_name, self.insert_kulas, self.insert_math,</span><br><span class="line">               self.insert_english, self.insert_computer, self.insert_total)</span><br><span class="line">        mysql_student.insert(stu) # 这一部分为存在并导入信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 删除输入框中的内容</span><br><span class="line">    def insert_deleteValue(self):</span><br><span class="line">        self.entry_id.delete(0, END)</span><br><span class="line">        self.entry_name.delete(0, END)</span><br><span class="line">        self.entry_kulas.delete(0, END)</span><br><span class="line">        self.entry_math.delete(0, END)</span><br><span class="line">        self.entry_english.delete(0, END)</span><br><span class="line">        self.entry_computer.delete(0, END)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实现查找功能的类</span><br><span class="line">class SearchFrame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line"></span><br><span class="line">        self.table_search_view = Frame()</span><br><span class="line"></span><br><span class="line">        self.show_table_search()</span><br><span class="line"></span><br><span class="line">    # 实现显示查询页面的整个大框架分布</span><br><span class="line">    def show_table_search(self):</span><br><span class="line">        columns = (&quot;id&quot;, &quot;name&quot;, &quot;kulas&quot;, &quot;math&quot;, &quot;english&quot;, &quot;computer&quot;, &quot;total&quot;)</span><br><span class="line">        columns_values = (&quot;学号&quot;, &quot;姓名&quot;, &quot;班级&quot;, &quot;数学&quot;, &quot;英语&quot;, &quot;计算机&quot;, &quot;总分&quot;)</span><br><span class="line">        # 创建一个表格，使数据都在这个表格显示</span><br><span class="line">        # show = &#x27;headings&#x27;是显示表头，columns = columns定义表中的列</span><br><span class="line">        self.tree_view = ttk.Treeview(self, show = &#x27;headings&#x27;, columns = columns)</span><br><span class="line"></span><br><span class="line">        for col in columns:  # 设置每列的宽度与对其方式</span><br><span class="line">            self.tree_view.column(col, width = 80, anchor = &#x27;center&#x27;)</span><br><span class="line"></span><br><span class="line">        for col, colvalue in zip(columns, columns_values):  # zip 函数将 columns 和 columns_values 配对</span><br><span class="line">            self.tree_view.heading(col, text = colvalue)  # 设置每一列的表头名称。</span><br><span class="line"></span><br><span class="line">        self.tree_view.pack(fill = BOTH, expand = True)  # 将 Treeview 控件添加到窗口中，并设置其填充和扩展方式，使其在窗口大小变化时能够适应。</span><br><span class="line">        self.show_search_data()</span><br><span class="line"></span><br><span class="line">        self.kulas_kulas = StringVar()</span><br><span class="line">        Entry(self, textvariable=self.kulas_kulas).pack(side = LEFT)</span><br><span class="line">        Button(self, text=&#x27;按班查询&#x27;, command=self.search_kulas).pack(side=LEFT) # , command = self.treeviewClick</span><br><span class="line">        Button(self, text = &#x27;删   除&#x27;, command=self.treeviewClick).pack(side = RIGHT)</span><br><span class="line"></span><br><span class="line">        # 下面循环加函数是实现点击标题实现排序</span><br><span class="line">        # 处理数字列的排序</span><br><span class="line">        def treeview_sort_column1(tv, col, reverse):  # Treeview、列名、排列方式</span><br><span class="line">            l = [(tv.set(k, col), k) for k in tv.get_children(&#x27;&#x27;)]</span><br><span class="line">            l.sort(key=lambda t: int(t[0]), reverse=reverse)  # 排序方式</span><br><span class="line">            for index, (val, k) in enumerate(l):  # 根据排序后索引移动</span><br><span class="line">                tv.move(k, &#x27;&#x27;, index)</span><br><span class="line">            tv.heading(col, command=lambda: treeview_sort_column1(tv, col, not reverse))  # 重写标题，使之成为再点倒序的标题</span><br><span class="line">            self.tree_color()  # 启动程序，根据奇偶行设为不同的背景颜色</span><br><span class="line">        # 处理文本列的排序</span><br><span class="line">        def treeview_sort_column2(tv, col, reverse):  # Treeview、列名、排列方式</span><br><span class="line">            l = [(tv.set(k, col), k) for k in tv.get_children(&#x27;&#x27;)]</span><br><span class="line">            l.sort(reverse=reverse)  # 排序方式</span><br><span class="line">            for index, (val, k) in enumerate(l):  # 根据排序后索引移动</span><br><span class="line">                tv.move(k, &#x27;&#x27;, index)</span><br><span class="line">            tv.heading(col, command=lambda: treeview_sort_column2(tv, col, not reverse))  # 重写标题，使之成为再点倒序的标题</span><br><span class="line">            self.tree_color()  # 启动程序，根据奇偶行设为不同的背景颜色</span><br><span class="line"></span><br><span class="line">        for i in range(7):  # 给所有标题加（循环上边的“手工”）</span><br><span class="line">            if i &gt;= 1 and i &lt;=2:</span><br><span class="line">                self.tree_view.heading(columns[i], text=columns_values[i], command=lambda _col=columns[i]: treeview_sort_column2(self.tree_view, _col, False))</span><br><span class="line">            else: self.tree_view.heading(columns[i], text = columns_values[i], command=lambda _col = columns[i]: treeview_sort_column1(self.tree_view, _col, False))</span><br><span class="line">        # 定义背景色风格</span><br><span class="line">        self.tree_view.tag_configure(&#x27;even&#x27;, background=&#x27;lightblue&#x27;)  # even标签设定为浅蓝色背景颜色</span><br><span class="line"></span><br><span class="line">    def search_kulas(self): # 根据输入的班级查询学生信息并更新表格。</span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)):</span><br><span class="line">            pass</span><br><span class="line">        if not self.kulas_kulas.get():</span><br><span class="line">            self.show_search_data()</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.kulas_value = self.kulas_kulas.get()</span><br><span class="line">            students = mysql_student.search_kulas(self.kulas_value)</span><br><span class="line"></span><br><span class="line">        index = -1</span><br><span class="line">        for stu in students:  # index + 1 用于将新数据插入到最后一行</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values = (</span><br><span class="line">                stu[&#x27;id&#x27;], stu[&#x27;name&#x27;], stu[&#x27;kulas&#x27;], stu[&#x27;math&#x27;],</span><br><span class="line">                stu[&#x27;english&#x27;], stu[&#x27;computer&#x27;], stu[&#x27;total&#x27;]</span><br><span class="line">            ))</span><br><span class="line">        self.tree_color()  # 启动程序，根据奇偶行设为不同的背景颜色</span><br><span class="line"></span><br><span class="line">    def treeviewClick(self):  # 单击</span><br><span class="line">        for item in self.tree_view.selection():</span><br><span class="line">            item_text = self.tree_view.item(item, &quot;values&quot;)</span><br><span class="line">            mysql_student.delete_id(item_text[0])  # 删除所选行的第一列的值</span><br><span class="line">            self.show_search_data()</span><br><span class="line"></span><br><span class="line">    # 显示数据库中学生信息表上的信息</span><br><span class="line">    def show_search_data(self):</span><br><span class="line"></span><br><span class="line">        for _ in map(self.tree_view.delete, self.tree_view.get_children(&#x27;&#x27;)): # 删除原本显示的数据</span><br><span class="line">            pass</span><br><span class="line">        students = mysql_student.all() # 获取数据库中的信息并以字典形式返回</span><br><span class="line">        index = -1</span><br><span class="line">        for stu in students:</span><br><span class="line">            self.tree_view.insert(&#x27;&#x27;, index + 1, values=(</span><br><span class="line">                stu[&#x27;id&#x27;], stu[&#x27;name&#x27;], stu[&#x27;kulas&#x27;], stu[&#x27;math&#x27;],</span><br><span class="line">                stu[&#x27;english&#x27;], stu[&#x27;computer&#x27;], stu[&#x27;total&#x27;]</span><br><span class="line">            ))</span><br><span class="line">        self.tree_color()  # 启动程序，根据奇偶行设为不同的背景颜色</span><br><span class="line"></span><br><span class="line">    def tree_color(self):  # 表格栏隔行显示不同颜色函数</span><br><span class="line">        items = self.tree_view.get_children()  # 得到根目录所有行的iid</span><br><span class="line">        i = 0  # 初值</span><br><span class="line">        for hiid in items:</span><br><span class="line">            if i / 2 != int(i / 2):  # 判断奇偶</span><br><span class="line">                tag1 = &#x27;&#x27;  # 奇数行</span><br><span class="line">            else:</span><br><span class="line">                tag1 = &#x27;even&#x27;  # 偶数行</span><br><span class="line">            self.tree_view.item(hiid, tag=tag1)  # 偶数行设为浅蓝色的tag=&#x27;even&#x27;</span><br><span class="line">            i += 1  # 累加1</span><br><span class="line"></span><br><span class="line"># 实现删除页面的类</span><br><span class="line">class DeleteFrame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root, width = 570, height = 290)</span><br><span class="line"></span><br><span class="line">        self.delete_student = StringVar()</span><br><span class="line">        self.status_student = StringVar()</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;请输入需要删除学生的&#x27;).place(x = 40, y = 60)</span><br><span class="line">        Label(self, text=&#x27;姓名或者学号&#x27;).place(x=64, y=80)</span><br><span class="line">        Entry(self, textvariable=self.delete_student).place(x = 30, y = 100)</span><br><span class="line">        Button(self, text=&#x27;按学号查询&#x27;, command=self.id_delete).place(x = 30, y = 130)</span><br><span class="line">        Button(self, text=&#x27;按姓名查询&#x27;, command=self.name_delete).place(x=110, y=130)</span><br><span class="line">        Label(self, textvariable=self.status_student).place(x = 45, y = 160)</span><br><span class="line"></span><br><span class="line">        self.id = StringVar()</span><br><span class="line">        self.name = StringVar()</span><br><span class="line">        self.kulas = StringVar()</span><br><span class="line">        self.math = StringVar()</span><br><span class="line">        self.english = StringVar()</span><br><span class="line">        self.computer = StringVar()</span><br><span class="line"></span><br><span class="line">        Label(self, text = &#x27;学   号 :&#x27;).place(x=300, y=20)</span><br><span class="line">        Label(self, textvariable=self.id).place(x=360, y=20)</span><br><span class="line">        Label(self, text=&#x27;姓   名 :&#x27;).place(x=300, y=50)</span><br><span class="line">        Label(self, text = &#x27;姓   名 :&#x27;, textvariable=self.name).place(x=360, y=50)</span><br><span class="line">        Label(self, text=&#x27;班   级 :&#x27;).place(x=300, y=80)</span><br><span class="line">        Label(self, text = &#x27;班   级 :&#x27;, textvariable=self.kulas).place(x=360, y=80)</span><br><span class="line">        Label(self, text=&#x27;数   学 :&#x27;).place(x=300, y=110)</span><br><span class="line">        Label(self, textvariable=self.math).place(x=360, y=110)</span><br><span class="line">        Label(self, text=&#x27;英   语 :&#x27;).place(x=300, y=140)</span><br><span class="line">        Label(self, textvariable=self.english).place(x=360, y=140)</span><br><span class="line">        Label(self, text=&#x27;计算机 :&#x27;).place(x=300, y=170)</span><br><span class="line">        Label(self, textvariable=self.computer).place(x=360, y=170)</span><br><span class="line"></span><br><span class="line">        self.status_delete = StringVar()</span><br><span class="line">        Button(self, text=&#x27;删    除&#x27;, command=self.delete_stu).place(x=340, y=210)</span><br><span class="line">        Label(self, textvariable=self.status_delete).place(x=300, y=250)</span><br><span class="line"></span><br><span class="line">    # 通过学号来删除对应学生的信息</span><br><span class="line">    def id_delete(self):</span><br><span class="line">        if self.delete_student.get():</span><br><span class="line">            self.search_user_id = self.delete_student.get()</span><br><span class="line">            flag, stu = mysql_student.search_id(self.search_user_id)</span><br><span class="line">            if flag:</span><br><span class="line">                self.id.set(stu[0][0]),self.name.set(stu[0][1])</span><br><span class="line">                self.kulas.set(stu[0][2]),self.math.set(stu[0][3])</span><br><span class="line">                self.english.set(stu[0][4]),self.computer.set(stu[0][5])</span><br><span class="line">                self.status_student.set(&#x27;数据查询成功&#x27;)</span><br><span class="line">            else:</span><br><span class="line">                self.status_student.set(stu)</span><br><span class="line">        else:</span><br><span class="line">            self.status_student.set(&#x27;请输入需要查询的信息&#x27;)</span><br><span class="line">    def name_delete(self):</span><br><span class="line">        if self.delete_student.get():</span><br><span class="line">            self.search_user_name = self.delete_student.get()</span><br><span class="line">            flag, stu = mysql_student.search_name(self.search_user_name)</span><br><span class="line">            if flag:</span><br><span class="line">                self.id.set(stu[0][0])</span><br><span class="line">                self.name.set(stu[0][1])</span><br><span class="line">                self.kulas.set(stu[0][2])</span><br><span class="line">                self.math.set(stu[0][3])</span><br><span class="line">                self.english.set(stu[0][4])</span><br><span class="line">                self.computer.set(stu[0][5])</span><br><span class="line">                self.status_student.set(&#x27;数据查询成功&#x27;)</span><br><span class="line">            else:</span><br><span class="line">                self.status_student.set(stu)</span><br><span class="line">        else:</span><br><span class="line">            self.status_student.set(&#x27;请输入需要查询的信息&#x27;)</span><br><span class="line"></span><br><span class="line">    def delete_stu(self):</span><br><span class="line">        flag, str = mysql_student.delete_id(self.id.get())</span><br><span class="line">        if not self.id.get():</span><br><span class="line">            str = &#x27;需要删除信息不能NULL&#x27;</span><br><span class="line">        self.status_delete.set(str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实现修改页面的类</span><br><span class="line">class ChangeFrame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root, width = 570, height = 290)</span><br><span class="line">        # Label(self, text = &#x27;修改页面&#x27;).pack()</span><br><span class="line">        # 查询的修改信息，以及查询、修改成功的提示</span><br><span class="line">        self.change_student = StringVar()</span><br><span class="line">        self.status_student = StringVar()</span><br><span class="line">        self.status_name = StringVar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 存储学生信息已经更改的变量</span><br><span class="line">        self.id = StringVar()</span><br><span class="line">        self.name = StringVar()</span><br><span class="line">        self.kulas = StringVar()</span><br><span class="line">        self.math = StringVar()</span><br><span class="line">        self.english = StringVar()</span><br><span class="line">        self.computer = StringVar()</span><br><span class="line"></span><br><span class="line">        # 用于存储修改之前的信息</span><br><span class="line">        self.id_change_before = StringVar()</span><br><span class="line">        self.name_change_before = StringVar()</span><br><span class="line">        self.kulas_change_before = StringVar()</span><br><span class="line">        self.math_change_before = StringVar()</span><br><span class="line">        self.english_change_before = StringVar()</span><br><span class="line">        self.computer_change_before = StringVar()</span><br><span class="line"></span><br><span class="line">        self.insert_page()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 打印修输入的项目以及输入框</span><br><span class="line">    def insert_page(self):</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;请输入需要查询学生的&#x27;).place(x=40, y=60)</span><br><span class="line">        Label(self, text=&#x27;姓名或者学号&#x27;).place(x=64, y=80)</span><br><span class="line">        Entry(self, textvariable=self.change_student).place(x=30, y=100)</span><br><span class="line">        Button(self, text=&#x27;按学号查询&#x27;, command=self.id_change).place(x=30, y=130)</span><br><span class="line">        Button(self, text=&#x27;按姓名查询&#x27;, command=self.name_change).place(x=110, y=130)</span><br><span class="line">        Label(self, textvariable=self.status_student).place(x=45, y=160)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;学   号 : &#x27;).place(x=240, y=20)</span><br><span class="line">        Label(self, textvariable=self.id_change_before).place(x=320, y=20)</span><br><span class="line">        self.entry_id = Entry(self, textvariable=self.id)</span><br><span class="line">        self.entry_id.place(x=380, y=20)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;姓   名 : &#x27;).place(x=240, y=50)</span><br><span class="line">        Label(self, textvariable=self.name_change_before).place(x=315, y=50)</span><br><span class="line">        self.entry_name = Entry(self, textvariable=self.name)</span><br><span class="line">        self.entry_name.place(x=380, y=50)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;班   级 : &#x27;).place(x=240, y=80)</span><br><span class="line">        Label(self, textvariable=self.kulas_change_before).place(x=300, y=80)</span><br><span class="line">        self.entry_kulas = Entry(self, textvariable=self.kulas)</span><br><span class="line">        self.entry_kulas.place(x=380, y=80)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;数   学 : &#x27;).place(x=240, y=110)</span><br><span class="line">        Label(self, textvariable=self.math_change_before).place(x=318, y=110)</span><br><span class="line">        self.entry_math = Entry(self, textvariable=self.math)</span><br><span class="line">        self.entry_math.place(x=380, y=110)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;英   语 : &#x27;).place(x=240, y=140)</span><br><span class="line">        Label(self, textvariable=self.english_change_before).place(x=318, y=140)</span><br><span class="line">        self.entry_english = Entry(self, textvariable=self.english)</span><br><span class="line">        self.entry_english.place(x=380, y=140)</span><br><span class="line"></span><br><span class="line">        Label(self, text=&#x27;计算机 : &#x27;).place(x=240, y=170)</span><br><span class="line">        Label(self, textvariable=self.computer_change_before).place(x=318, y=170)</span><br><span class="line">        self.entry_computer = Entry(self, textvariable=self.computer)</span><br><span class="line">        self.entry_computer.place(x=380, y=170)</span><br><span class="line"></span><br><span class="line">        Button(self, text=&#x27;修    改&#x27;, command = self.create_user).place(x=320, y=220)</span><br><span class="line"></span><br><span class="line">        Label(self, textvariable=self.status_name).place(x=305, y=250)</span><br><span class="line"></span><br><span class="line">    # 通过学号或者姓名来查询学生信息，优先通过学号，若未输入学号，则通过姓名来查询</span><br><span class="line">    def id_change(self):</span><br><span class="line">        if self.change_student.get():</span><br><span class="line">            self.search_user_id = self.change_student.get()</span><br><span class="line">            flag, stu = mysql_student.search_id(self.search_user_id)</span><br><span class="line">            if flag:</span><br><span class="line">                self.change_Information(stu)</span><br><span class="line">                self.status_student.set(&#x27;数据查询成功&#x27;)</span><br><span class="line">            else:</span><br><span class="line">                self.status_student.set(stu)</span><br><span class="line">        else:</span><br><span class="line">            self.status_student.set(&#x27;请输入需要查询的信息&#x27;)</span><br><span class="line"></span><br><span class="line">    def name_change(self):</span><br><span class="line">        if self.change_student.get():</span><br><span class="line">            self.search_user_name = self.change_student.get()</span><br><span class="line">            flag, stu = mysql_student.search_name(self.search_user_name)</span><br><span class="line">            if flag:</span><br><span class="line">                self.change_Information(stu)</span><br><span class="line">                self.status_student.set(&#x27;数据查询成功&#x27;)</span><br><span class="line">            else:</span><br><span class="line">                self.status_student.set(stu)</span><br><span class="line">        else:</span><br><span class="line">            self.status_student.set(&#x27;请输入需要查询的信息&#x27;)</span><br><span class="line">    def change_Information(self, stu):</span><br><span class="line">        self.id.set(stu[0][0])</span><br><span class="line">        self.name.set(stu[0][1])</span><br><span class="line">        self.kulas.set(stu[0][2])</span><br><span class="line">        self.math.set(stu[0][3])</span><br><span class="line">        self.english.set(stu[0][4])</span><br><span class="line">        self.computer.set(stu[0][5])</span><br><span class="line">        self.id_change_before.set(stu[0][0])</span><br><span class="line">        self.name_change_before.set(stu[0][1])</span><br><span class="line">        self.kulas_change_before.set(stu[0][2])</span><br><span class="line">        self.math_change_before.set(stu[0][3])</span><br><span class="line">        self.english_change_before.set(stu[0][4])</span><br><span class="line">        self.computer_change_before.set(stu[0][5])</span><br><span class="line">    # 通过获取输入框的信息来修改数据库中学生的信息</span><br><span class="line">    def create_user(self):</span><br><span class="line">        if not self.id.get():</span><br><span class="line">            self.insert_id = int(0)</span><br><span class="line">            self.status_name.set(&#x27;请输入修改的学号&#x27;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            self.insert_id = int(self.id.get())</span><br><span class="line"></span><br><span class="line">        if not self.name.get():</span><br><span class="line">            self.insert_name = &#x27;NULL&#x27;</span><br><span class="line">        else:</span><br><span class="line">            self.insert_name = self.name.get()</span><br><span class="line"></span><br><span class="line">        if not self.kulas.get():</span><br><span class="line">            self.insert_kulas = &#x27;NULL&#x27;</span><br><span class="line">        else:</span><br><span class="line">            self.insert_kulas = self.kulas.get()</span><br><span class="line"></span><br><span class="line">        if not self.math.get():</span><br><span class="line">            self.insert_math = int(0)</span><br><span class="line">        else:</span><br><span class="line">            self.insert_math = int(self.math.get())</span><br><span class="line"></span><br><span class="line">        if not self.english.get():</span><br><span class="line">            self.insert_english = int(0)</span><br><span class="line">        else:</span><br><span class="line">            self.insert_english = int(self.english.get())</span><br><span class="line"></span><br><span class="line">        if not self.computer.get():</span><br><span class="line">            self.insert_computer = int(0)</span><br><span class="line">        else:</span><br><span class="line">            self.insert_computer = int(self.computer.get())</span><br><span class="line">        mysql_student.delete_id(self.id_change_before.get())</span><br><span class="line">        self.insert_total = self.insert_math + self.insert_computer + self.insert_english</span><br><span class="line">        stu = (self.insert_id, self.insert_name, self.insert_kulas, self.insert_math,</span><br><span class="line">               self.insert_english, self.insert_computer, self.insert_total)</span><br><span class="line">        mysql_student.insert(stu)</span><br><span class="line"></span><br><span class="line">        self.status_name.set(&#x27;数据修改成功&#x27;)</span><br><span class="line"></span><br><span class="line"># 实现帮助页面的类，主要打印一些程序运行的帮助以及规则</span><br><span class="line">class HelpFrame(Frame):</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        super().__init__(root)</span><br><span class="line"></span><br><span class="line">        Label(self, text = &#x27;关于录入界面&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;可以录入所有信息为空的信息，但不建议，且学号具有唯一性&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27; &#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;关于查询界面&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;默认为升序排列，可以根据学生的各类信息进行排列，并能通过快捷键以及鼠标右键实现一定的功能&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;可以查看班级信息以及可以选择信息进行删除&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27; &#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;关于删除界面&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;可以根据学号或者姓名对学生信息进行删除，学号是唯一的&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27; &#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;关于修改界面&#x27;).pack()</span><br><span class="line">        Label(self, text = &#x27;可以通过学号或者姓名来查询学学生信息，但查询名字只会出现第一位学生，按下修改键出现提示即成功&#x27;).pack()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图形化界面的学生管理系统&quot;&gt;&lt;a href=&quot;#图形化界面的学生管理系统&quot; class=&quot;headerlink&quot; title=&quot;图形化界面的学生管理系统&quot;&gt;&lt;/a&gt;图形化界面的学生管理系统&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;注意：本次项目学习与b站，地址为&lt;</summary>
      
    
    
    
    <category term="项目实战" scheme="https://yufusir.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="python" scheme="https://yufusir.github.io/tags/python/"/>
    
    <category term="mysql" scheme="https://yufusir.github.io/tags/mysql/"/>
    
    <category term="linux" scheme="https://yufusir.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>快速熟悉git操作，实现远程开发</title>
    <link href="https://yufusir.github.io/posts/df727d95.html"/>
    <id>https://yufusir.github.io/posts/df727d95.html</id>
    <published>2024-10-01T16:00:00.000Z</published>
    <updated>2024-10-02T06:13:49.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="了解git"><a href="#了解git" class="headerlink" title="了解git"></a>了解git</h3><p>Git 是一个分布式版本控制系统，用于跟踪文件的变化，特别是源代码文件。它允许多个开发者协作开发，管理项目的历史记录，并在需要时恢复到先前的版本。具有版本控制、分布式、分支、合并、远程控制等功能。</p><h3 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h3><p>地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git-scm.com/download/win</span><br></pre></td></tr></table></figure><p>下载安装之后，终端使用<code>git - v</code>查看是否会回显版本，如果回显了就是安装成功。windows操作系统上安装之后会自动安装git bash。</p><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><h4 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br></pre></td></tr></table></figure><p>省略（Local）：本地配置，只对本地创库有效</p><p>—global：全局配置，所有仓库生效</p><p>—system：系统配置，对所有用户生效</p><blockquote><p>注意：用户名中有空格的话需要用双引号括起来，否者直接使用</p></blockquote><h4 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure><h4 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h4><p>概述：保存你的初始化配置，在之后的提交就用不着输入这些信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper</span><br></pre></td></tr></table></figure><h4 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>方法一：本地创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用该命令，会直接在当前目录里生成一个git仓库，如果在这个命令后面添加一个目录名称，就会直接在本目录下生成一个以你定义的目录名称生成新文件夹，这个文件夹里面就是一个新的仓库</p><p>如：<code>git init yufusir</code>这个命令会在当前目录中生成一个yufusir的文件夹，文件里面就是新建的仓库</p></blockquote><p>方法二：远程服务器上克隆一个存在的仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><h3 id="工作区和文件状态"><a href="#工作区和文件状态" class="headerlink" title="工作区和文件状态"></a>工作区和文件状态</h3><h4 id="git分区"><a href="#git分区" class="headerlink" title="git分区"></a>git分区</h4><p>概述：git的本地数据管理分为三个区域，工作区（.git所在的目录）、暂存区（.git/intdex用于临时即将提交修改的修改内容）、本地仓库（.git/objects用于存储git存储代码和版本信息的主要位置）</p><h4 id="git中文件的状态"><a href="#git中文件的状态" class="headerlink" title="git中文件的状态"></a>git中文件的状态</h4><p>未跟踪：新创建但没被git管理起来的文件</p><p>未修改：已经被git管理起来的，但文件没有被修改</p><p>已修改：已经修改过的文件，但没有添加到暂存区里面</p><p>已暂存：已经修改过的文件，并添加到暂存区的文件</p><h3 id="添加和提交文件"><a href="#添加和提交文件" class="headerlink" title="添加和提交文件"></a>添加和提交文件</h3><h4 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h4><p>概述：查看当前仓库处于哪个分之，文件处于怎样的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>注意：如果你看见自己的仓库的分支名称master而不是main，这个是由于git版本的问题，不影响我们的操作</p><h4 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h4><p>概述：将未跟踪文件添加到暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用git add .会将所有文件添加到缓存区</p></blockquote><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>概述：将已暂存的文件提交到仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交信息&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里-m如果不写会进入一个交互界面，默认使用vim来编辑提交信息，vim的基础操作有，使用方向键来移动光标，使用i键进入编辑模式，esc键回到命令界面，输入:wq保存退出即提交完成</p><p>这里如果将-m改为-am的话，这里命令就会同时完成添加暂存区和提交仓库这两个操作，但是不推荐使用，两个命令分开使用是个非常好的习惯</p></blockquote><h4 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h4><p>概述：查看提交记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><blockquote><p>使用git log —online可以查看简洁的提交记录</p></blockquote><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><p>概述：撤销之前的修改内容，回退之前的某个版本</p><p>git reset的三种模式</p><ul><li>—soft 回退到某个版本，并且保留工作区和暂存区的所有修改内容</li><li>—hard 回退到某个版本，并且丢弃工作区和暂存区的所有修改内容</li><li>—mixed 回退到某个版本，只保留工作区的修改内容，丢弃暂存区的修改内容，reset命令的默认参数</li></ul><blockquote><p>后面接第几次修改的id或者HEAD^，HEAD^表示上一次的修改内容</p></blockquote><h4 id="查看已跟踪文件"><a href="#查看已跟踪文件" class="headerlink" title="查看已跟踪文件"></a>查看已跟踪文件</h4><p>概述：包括已修改、已暂存和已提交的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files</span><br></pre></td></tr></table></figure><h4 id="回溯git操作"><a href="#回溯git操作" class="headerlink" title="回溯git操作"></a>回溯git操作</h4><p>概述：git的所有操作都可以回溯，当不小心误操作的时候，需要回溯操作时使用</p><p>示例：当误操作使用了—hard</p><p>第一步：参看操作记录，找到误操作做前的版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>第二步：回退指定版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><p>第三步：确认是否成功退回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --online</span><br></pre></td></tr></table></figure><h3 id="查看差异"><a href="#查看差异" class="headerlink" title="查看差异"></a>查看差异</h3><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>概述：用于查看不同版本之间的差异，查看工作区】暂存区、本地仓库之间的差异、查看不同分支之间的差异</p><p>git diff的操作</p><ul><li><p>直接使用git diff会查看工作区与暂存区的差异</p></li><li><p>git diff HEAD可以查看暂存区和版本库的差异，git diff —cached与此操作一致</p></li><li>git diff 版本1id 版本2id 查看两个版本的差异内容</li><li>git diff 版本id HAED 即可查看指定版本与当前版本的差异，HAED是git的重要重要的概念，它指向分支最新的提交分支点</li><li>git diff HAED~ HAED 表示当前版本与上一个版本的差异，其中~可以用^替换，效果一样，符号后面<code>接数字</code>表示<code>上几个版本</code></li><li>git diff 分支名1 分支名2 比较分支之间的差异</li></ul><blockquote><p>注意：如果后面接上文件名，就只会查看此文件在两个版本的差异</p></blockquote><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>有以下操作：</p><ul><li>使用rm file先从工作区删除文件，使用git add file然后再从暂存区删除内容</li><li>git rm 文件名 可以将文件从工作区和暂存区同时删除</li><li>git rm —cached 文件名 把文件从暂存区删除，保留在当前工作区中</li><li>git rm -r* 递归删除某个目录下的所有子目录和文件，删除后不要忘记提交</li></ul><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>概述：git中里有个特殊文件，叫做<code>.gitignore</code>文件，这个文件的作用也就是可以让我们忽略掉一些不应该被加入到版本库的文件。例如：系统或者软件自动生成的文件、编译产生的中间文件和结果文件、运行时生成日志文件、缓存文件、临时文件和涉及身份、密码、口令、密钥等敏感信息文件</p><h4 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h4><p>添加一个.gitignore文件，将想要忽略的文件的文件名添加到.gitinore文件中即可。例如：在文件中添加*.log就可以。如果想要忽略文件夹的话需要在文件中添加文件夹名并接上一个<code>反斜杠/</code></p><blockquote><p>注意：.gitignore文件生效有个前提，忽略的文件不能是已经被添加到版本库中的文件</p></blockquote><h4 id="gitignore匹配规则"><a href="#gitignore匹配规则" class="headerlink" title=".gitignore匹配规则"></a>.gitignore匹配规则</h4><p>首先.gitignore从上到下逐行匹配，每一行表示一个忽略模式</p><p>规则：</p><ul><li>空行或者以<code>#</code>号开头的行会被git忽略。一般空行用于可读性的分隔，<code>#</code>一般用作注释</li><li>使用标准的Blod模式匹配，例如：<ul><li>星号*通配任意个字符</li><li>问号？匹配单个字符</li><li>中括号[]表示匹配列表中的单个字符，比如：[abc]表示a/b/c</li></ul></li><li>两个星号**表示匹配任意的中间目录</li><li>中括号可以使用短中线连接，比如：<ul><li>[0-9]表示任意一位数字，    [a-z]表示任意一位小写字母</li></ul></li><li>感叹号！表示取反</li></ul><h3 id="SSH配置与克隆仓库"><a href="#SSH配置与克隆仓库" class="headerlink" title="SSH配置与克隆仓库"></a>SSH配置与克隆仓库</h3><h4 id="github的使用"><a href="#github的使用" class="headerlink" title="github的使用"></a>github的使用</h4><p>概述：使用github创建一个仓库，完成时会跳转一个界面，会出现一个亮眼的地址串，在这个前面有两个按钮HTTPS与SSH，它们是使用远程仓库的两种方式，HTTPS这种方式在我们把本地代码push到远程仓库时需要验证用户名与密码（但是这个好像已经停用了），SSH方式则不需要密码，但需要在github上添加ssh公钥的配置。其次这个界面有告诉我们怎么把本地仓库与这个远程仓库关联起来。</p><h4 id="ssh配置"><a href="#ssh配置" class="headerlink" title=".ssh配置"></a>.ssh配置</h4><p>​    首先找到.ssh文件，这个文件一般放在C:\Users\用户名\ .ssh，注意这个文件是隐藏文件，如果找不到的话就直接生成一个.ssh文件，然后进入这个文件里使用终端，输入<code>ssh-keygen -t rsa -b 4096</code>即可以为我们生成rsa协议4096大小的ssh密钥，回车之后它提示我们需要输入密钥的文件名称，这里就需要注意一下，如果你是第一次使用这个命令的话就直接使用回车即可，它会生成一个id_rsa的密钥文件，但是你之前配置过密钥文件的话，这个时候不要回车，否则会覆盖我们之前的密钥文件，这个操作不可逆。我属于第二种情况，所以我在这输入一个新的文件名即可，之后又会让我们输入两次密码，操作过后就完成了密钥的生成并有新的文件生成，一个XXX文件和一个XXX.pub文件，其中XXX文件是私钥文件(谁要也不给！！！)，XXX.pub文件则是公钥文件，我们打开公钥文件并复制里面的内容，回到github页面在点击头像弹出的菜单中再点击settings，再点击左侧有个ssh和gpg密钥配置，在里面点击新建ssh密钥按钮，然后把刚刚复制的公钥内容粘贴到输入框内，取一个任意的标题再点击添加即可。如果再本地配置时没有指定新文件的话ssh的配置已经完成了，如果跟我一样指定文件名的需要创建修改一下config配置文件，需要添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/XXX文件</span><br></pre></td></tr></table></figure><p>这个的意思是当我们访问github的时候，指定使用ssh下的XXX文件这个密钥</p><h4 id="本地仓库与远程仓库"><a href="#本地仓库与远程仓库" class="headerlink" title="本地仓库与远程仓库"></a>本地仓库与远程仓库</h4><blockquote><p>注意：本地修改不会影响到远程仓库，远程仓库的修改也不会影响到本地仓库</p></blockquote><p>git clone repo-address 可以将远程仓库的东西复制到本地仓库</p><p>git push 可以把本地仓库的修改推送给远程仓库</p><p>git pull 可以把远程仓库的修改拉到本地仓库</p><h3 id="关联本地仓库和远程仓库"><a href="#关联本地仓库和远程仓库" class="headerlink" title="关联本地仓库和远程仓库"></a>关联本地仓库和远程仓库</h3><h4 id="添加一个远程仓库"><a href="#添加一个远程仓库" class="headerlink" title="添加一个远程仓库"></a>添加一个远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h4 id="查看当前仓库对应的远程仓库的别名和地址"><a href="#查看当前仓库对应的远程仓库的别名和地址" class="headerlink" title="查看当前仓库对应的远程仓库的别名和地址"></a>查看当前仓库对应的远程仓库的别名和地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h4 id="指定分支为main"><a href="#指定分支为main" class="headerlink" title="指定分支为main"></a>指定分支为main</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure><h4 id="将本地main分支与远程的main分支关联起来"><a href="#将本地main分支与远程的main分支关联起来" class="headerlink" title="将本地main分支与远程的main分支关联起来"></a>将本地main分支与远程的main分支关联起来</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main:main</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果两个分支名相同，则使用git push -u origin main即可</p></blockquote><h4 id="拉取远程仓库的修改内容"><a href="#拉取远程仓库的修改内容" class="headerlink" title="拉取远程仓库的修改内容"></a>拉取远程仓库的修改内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名&gt;&lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><h3 id="在GUI和IDE中使用Git"><a href="#在GUI和IDE中使用Git" class="headerlink" title="在GUI和IDE中使用Git"></a>在GUI和IDE中使用Git</h3><p>概述：常见的图形化工具有github desktop、sourcetree、gitkraken（收费），如果只使用github而且只用简单的图形化工具，推荐使用github desktop</p><h3 id="分支简介和基本操作"><a href="#分支简介和基本操作" class="headerlink" title="分支简介和基本操作"></a>分支简介和基本操作</h3><p>概述：分支是git中一个非常重要的一个功能，我们可以把它看作代码库中的不同版本，可以独立存在并有自己的提交记录，非常适合团队开发和开发管理</p><h4 id="查看当前仓库的所有分支"><a href="#查看当前仓库的所有分支" class="headerlink" title="查看当前仓库的所有分支"></a>查看当前仓库的所有分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><blockquote><p>注意：git checkout 后面接文件名表示恢复文件到修改前的状态，当分支名与文件名相同时，此命令默认切换分支而不是恢复文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch 分支名</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 被合并分支</span><br></pre></td></tr></table></figure><p>注意：使用这条命令需要在目标分支，这条命令会把被合并分支合并到目标分支</p><h4 id="查看分支图"><a href="#查看分支图" class="headerlink" title="查看分支图"></a>查看分支图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --oneline --decorate --all</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>删除已合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></table></figure><p>删除未合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure><h3 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h3><p>概述：如果出现冲突，需要手动编辑冲突文件，修改保存再添加暂存与提交，则解决冲突</p><p>使用git merge —abort可以在提交之前中断合并</p><h3 id="回退和rebase"><a href="#回退和rebase" class="headerlink" title="回退和rebase"></a>回退和rebase</h3><h4 id="恢复用merge合并且被删除的分支"><a href="#恢复用merge合并且被删除的分支" class="headerlink" title="恢复用merge合并且被删除的分支"></a>恢复用merge合并且被删除的分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名 提交id</span><br></pre></td></tr></table></figure><h4 id="回退指定提交点"><a href="#回退指定提交点" class="headerlink" title="回退指定提交点"></a>回退指定提交点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 提交id</span><br></pre></td></tr></table></figure><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><p>概述：会把分支合并在当前分支的最前面，成支线，不产生节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase 分支名</span><br></pre></td></tr></table></figure><blockquote><p>注意：merge优点是不会破环原分支的提交历史，方便回溯和查看，缺点是会产生额外的提交节点，分支图复杂。rebase优点是不会新增额外的提交记录，形成线性历史，比较直观和干净，缺点是会改变提交历史，改变当前分支branch out的节点。避免在共享分支使用rebase</p></blockquote><h3 id="分支管理和工作流模型"><a href="#分支管理和工作流模型" class="headerlink" title="分支管理和工作流模型"></a>分支管理和工作流模型</h3><p>gitflow模型适用于团队技术水平适中，有一定的开发流程和规范的团队</p><p>githubflow模型适用于技术水平比较高的团队或者开源项目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;了解git&quot;&gt;&lt;a href=&quot;#了解git&quot; class=&quot;headerlink&quot; title=&quot;了解git&quot;&gt;&lt;/a&gt;了解git&lt;/h3&gt;&lt;p&gt;Git 是一个分布式版本控制系统，用于跟踪文件的变化，特别是源代码文件。它允许多个开发者协作开发，管理项目的历史记录</summary>
      
    
    
    
    <category term="工具" scheme="https://yufusir.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="https://yufusir.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Mysql快速入门，熟悉基本命令（在kali中使用）</title>
    <link href="https://yufusir.github.io/posts/be51962c.html"/>
    <id>https://yufusir.github.io/posts/be51962c.html</id>
    <published>2024-09-21T16:00:00.000Z</published>
    <updated>2024-12-29T06:29:20.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="了解数据库与mysql"><a href="#了解数据库与mysql" class="headerlink" title="了解数据库与mysql"></a>了解数据库与mysql</h3><p>数据库是一个有组织的数据集合，通常以电子方式存储和管理。数据库的主要目的是有效地存储、检索和管理数据。数据库可以根据不同的需求和结构进行分类。包括关系数据库、非关系数据库、对象数据库和图数据库，MySQL是一个开源的关系数据库管理系统（RDBMS），采用结构化查询语言（SQL）来管理和操作数据。它是最流行的数据库之一，广泛用于各种应用程序和网站。</p><h3 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h3><p>推荐安装在linux中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/</span><br></pre></td></tr></table></figure><p>详细安装教程参考文章<a href="https://blog.csdn.net/weixin_47406082/article/details/131867849?ops_request_misc=%7B%22request%5Fid%22%3A%223B86C914-DBFC-4D2B-A953-6571BFA2CF8B%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=3B86C914-DBFC-4D2B-A953-6571BFA2CF8B&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-131867849-null-null.142^v100^pc_search_result_base8&amp;utm_term=Mysql安装&amp;spm=1018.2226.3001.4187">Mysql超详细安装配置教程(保姆级)_mysql安装及配置超详细教程-CSDN博客</a></p><p>不同类型linux版本对应这不同类型的mysql版本，所需要下载的包也不同，当然你在下在的过程中，网页会自动检测你需要安装哪个版本的mysql</p><p>mysql社区版的安装网页<a href="https://dev.mysql.com/downloads/mysql/">MySQL :: Download MySQL Community Server</a></p><p>进去网页会自动的为你识别电脑需要用到哪个版本的mysql，直接无脑第一个就行</p><p>kali是自带MySQL的，所以这边直接用命令启动就行了</p><blockquote><p>注意：你在使用MySQL的过程中，发现自己的启动服务是MariaDB，请不用慌张，因为MariaDB就是 MySQL 的一个分支，由 MySQL 的原始开发者创建，旨在提供一个开源的替代方案。所以不用觉得自己下载了一个假的MySQL，放心使用与学习</p></blockquote><h3 id="Windows安装MySQL"><a href="#Windows安装MySQL" class="headerlink" title="Windows安装MySQL"></a>Windows安装MySQL</h3><p>首先MySQL的下载地址<a href="https://downloads.mysql.com/archives/installer/">MySQL :: Download MySQL Installer (Archived Versions)</a></p><p>然后这边推荐跟着视频安装，推荐<a href="https://www.bilibili.com/video/BV1jcabemEr7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d7aed904328df9600c4d6478e2ce67b8">手把手教你安装MySQL(最新版本安装)_哔哩哔哩_bilibili</a></p><p>如果安装错误，可能需要geek的卸载，下载地址为<a href="https://geekuninstaller.com/">Geek Uninstaller - the best FREE uninstaller</a></p><p>使用图形化工具推荐navicat，激活教程<a href="https://www.bilibili.com/video/BV1QJ3UeCEef/?spm_id_from=333.999.0.0&amp;vd_source=d7aed904328df9600c4d6478e2ce67b8">【2024最新】navicat17 安装、激活、配置、破解、连接数据库、连接mysql、安装教程、激活教程、破解教程、使用教程_哔哩哔哩_bilibili</a></p><p>激活资源<a href="https://wv4se60lxyk.feishu.cn/wiki/PXulwqPNDizWoakO8HRccJnvnFh">Navicat - 飞书云文档</a></p><blockquote><p>注意：这里安装电脑名与路径都不能有中文</p></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure><h4 id="关闭MySQL服务"><a href="#关闭MySQL服务" class="headerlink" title="关闭MySQL服务"></a>关闭MySQL服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysql</span><br></pre></td></tr></table></figure><h4 id="重启MySQL服务"><a href="#重启MySQL服务" class="headerlink" title="重启MySQL服务"></a>重启MySQL服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><h4 id="检查MySQL的服务状态"><a href="#检查MySQL的服务状态" class="headerlink" title="检查MySQL的服务状态"></a>检查MySQL的服务状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure><h3 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h3><p>概述：按照功能不同，SQL语句可以分为以下几类</p><h4 id="DDL-数据库定义语言"><a href="#DDL-数据库定义语言" class="headerlink" title="DDL 数据库定义语言"></a>DDL 数据库定义语言</h4><p>概述：用来定义数据库对象，比如数据库、表、列等等，相关的关键之包括<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>、<code>TRUNCATE</code>等等</p><h4 id="DML-数据库操作语言"><a href="#DML-数据库操作语言" class="headerlink" title="DML 数据库操作语言"></a>DML 数据库操作语言</h4><p>概述：用于对数据库中的记录进行新增、删除或者修改，关键字包括INSERT、UPDATE、DELETE、CALL等等</p><h4 id="DQL-数据库查询语言"><a href="#DQL-数据库查询语言" class="headerlink" title="DQL 数据库查询语言"></a>DQL 数据库查询语言</h4><p>概述：用来查询数据库中的记录，关键字包括SELECT、WHERE等等</p><h4 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL 数据控制语言"></a>DCL 数据控制语言</h4><p>概述：用来定义数据库的访问权限和安全级别，以及创建用户等等，关键字包括GRANT、REVOKE</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h4 id="首先用root用户启动mysql"><a href="#首先用root用户启动mysql" class="headerlink" title="首先用root用户启动mysql"></a>首先用root用户启动mysql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h4 id="显示当前存在的数据库"><a href="#显示当前存在的数据库" class="headerlink" title="显示当前存在的数据库"></a>显示当前存在的数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASES 库名;</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASES 库名</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 库名;</span><br></pre></td></tr></table></figure><h4 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名 ();</span><br></pre></td></tr></table></figure><blockquote><p>注意：括号中是字段的名称和数据类型，字段之间用逗号隔开，最后的字段后面不用加逗号</p></blockquote><p>示例：创建一个玩家数据的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table player(</span><br><span class="line">id INT,</span><br><span class="line">name VARCHAR(100),</span><br><span class="line">level INT,</span><br><span class="line">exp INT,</span><br><span class="line">gold DECIMAL(10,2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="mysql数据类型"><a href="#mysql数据类型" class="headerlink" title="mysql数据类型"></a>mysql数据类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><p>整数类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根据空间储存1-8分为</span><br><span class="line">TINYINT     1字节</span><br><span class="line">SMALLINT    2字节</span><br><span class="line">INT         4字节</span><br><span class="line">BIGINT      8字节</span><br></pre></td></tr></table></figure><p>浮点数类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Float 4字节</span><br><span class="line">Double 8字节</span><br><span class="line">DECIMAL(长度，保留几位小数)</span><br></pre></td></tr></table></figure><h5 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DATE 日期</span><br><span class="line">TIME 时间</span><br><span class="line">DATETINME 日期时间</span><br><span class="line">TINESTAMP 时间戳</span><br></pre></td></tr></table></figure><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CHAR 定长字符串</span><br><span class="line">VACHAR 变长字符串</span><br><span class="line">TEXT 文本</span><br><span class="line">BLQB 二进制数据</span><br></pre></td></tr></table></figure><h4 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名;</span><br></pre></td></tr></table></figure><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><p>修改表中列的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER table 表名 MODIFY COLUMN 列名 新的数据类型;</span><br></pre></td></tr></table></figure><p>修改表中列名的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME COLUMN 原列名 to 新列名;</span><br></pre></td></tr></table></figure><p>添加新列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD COLUMN 列名 数据类型;</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP COLUMN 列名；</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE 表名；</span><br></pre></td></tr></table></figure><h3 id="数据的增删查改"><a href="#数据的增删查改" class="headerlink" title="数据的增删查改"></a>数据的增删查改</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名（想加入数据的列） VALUES (对应数据)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果values括号中包括了所有列，并且顺序结构与表的结构一致，就可以省略表名后面的括号</p><p>注意：如果想要插入多条数据，可以在values后面添加多个括号</p></blockquote><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名或者* from 表名；</span><br></pre></td></tr></table></figure><h4 id="条件约束"><a href="#条件约束" class="headerlink" title="条件约束"></a>条件约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT 默认值</span><br><span class="line">NULL 可以为空</span><br><span class="line">NOT NULL 不可以为空</span><br><span class="line">UNIQUE 指定唯一</span><br><span class="line">主键约束：用来保证数据的唯一性，不为空，每个表只有一个主键</span><br><span class="line">外键约束：保证数据的一致性，一个表的外键必须是另个表的主键</span><br></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 set 列名 = 值 where 条件子句（列：name=&#x27;王五&#x27;）;</span><br></pre></td></tr></table></figure><blockquote><p>注意：修改多列可以用逗号隔开列举的列，如果没加where会修改整个列的值</p></blockquote><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 where 条件子句；</span><br></pre></td></tr></table></figure><h3 id="数据库的导入与导出"><a href="#数据库的导入与导出" class="headerlink" title="数据库的导入与导出"></a>数据库的导入与导出</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root(用户名) -p 库名 表名 &gt; 文件名.sql </span><br></pre></td></tr></table></figure><blockquote><p>注意：表名可以省略，省略之后就会导出里面全部的表</p></blockquote><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root(用户名) -p 库名 &lt; 文件名.sql </span><br></pre></td></tr></table></figure><h3 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h3><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>概述：用于提取满足标准的记录，它可以同select、update、delete一起使用，后面加上条件语句即可，根据条件的复杂程度配合NOT、AND、OR和括号，如果同时使用需要注意他们的优先级NOT&gt;AND&gt;OR</p><h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4><p>概述：可以指定多个值</p><h4 id="BETWEEN…AND…"><a href="#BETWEEN…AND…" class="headerlink" title="BETWEEN…AND…"></a>BETWEEN…AND…</h4><p>概述：可以用于指定一个连续的范围</p><h4 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h4><p>概述：表示取反</p><h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>概述：用于模糊查询，其中用到两个字符，<code>%</code>与<code>_</code>，%表示任意个字符，_表示任意一个字符</p><h4 id="REGEXP"><a href="#REGEXP" class="headerlink" title="REGEXP"></a>REGEXP</h4><p>概述：使用正则表达式</p><h4 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h4><p>概述：表示空值，查询中不能用某某=null语句，应该用某某  IS NULL，这条语句可以搭配NOT。</p><p>注意：NULL需要使用IS NULL来判断，而空字符串用等号判断</p><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>概述：指定某个字段来排序，如果不指定默认升序(ASC)，在列名后面加DESC可以指定降序，如果需要指定多个字段，可以使用逗号连接</p><blockquote><p>注意：字段或列可以通过数字表示，即第几列</p></blockquote><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>概述：对某列进行一些计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">常用聚合函数</span><br><span class="line">AVG() 返回集合的平均值 </span><br><span class="line">COUNT() 返回集合中的项目个数</span><br><span class="line">MAX() 返回最大值</span><br><span class="line">MIN() 返回最小值</span><br><span class="line">SUM() 求和   \\括号指定列名</span><br><span class="line">SUBSTR(数据类型为字符串的列名，开始位置，截取长度)</span><br><span class="line">ROUND() 对小数进行四舍五入</span><br><span class="line">LEFT(string, length) 函数用于从字符串的左侧提取指定数量的字符。</span><br></pre></td></tr></table></figure><h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>概述：对查询结果进行分组，后面接列名</p><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>概述：一般对分租后的结果筛选，后面接条件语句</p><h4 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h4><p>概述：对结果限制数量，如果后面只接一个数字，就是限制出现几条结果，如果后面出现两个数字并用逗号隔开，第一数字表示偏移量，结果会从这个数字列之后开始显示，第二个数值表示显示几条数据</p><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h4><p>概述：用来合并两个查询的结果，把两个语句用UNION连接即可，此命令会默认清除重复的记录，用UNION ALL就不会清楚重复数据</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, email</span><br><span class="line">FROM employees</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT name, email</span><br><span class="line">FROM contractors;</span><br></pre></td></tr></table></figure><h4 id="INTERSECT"><a href="#INTERSECT" class="headerlink" title="INTERSECT"></a>INTERSECT</h4><p>概述：用来取两个查询结果的交集</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, email</span><br><span class="line">FROM employees</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT name, email</span><br><span class="line">FROM contractors;</span><br></pre></td></tr></table></figure><h4 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h4><p>概述：给一个结果的列取别名</p><h4 id="EXCEPT"><a href="#EXCEPT" class="headerlink" title="EXCEPT"></a>EXCEPT</h4><p>概述：用于取两个查询结果的差集</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, email</span><br><span class="line">FROM employees</span><br><span class="line">EXCEPT</span><br><span class="line">SELECT name, email</span><br><span class="line">FROM contractors;</span><br></pre></td></tr></table></figure><h4 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h4><p>概述：判断一个查询是否有结果，返回1或0</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE EXISTS (</span><br><span class="line">    SELECT 1</span><br><span class="line">    FROM employees e</span><br><span class="line">    WHERE e.department_id = d.id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h4><p>概述：可以根据一个或多个列之间的关系来组合这些表的行。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.name, d.department_name</span><br><span class="line">FROM employees e</span><br><span class="line">FULL JOIN departments d ON e.department_id = d.id;</span><br></pre></td></tr></table></figure><h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h4><p>概述：可以与 <code>SELECT</code> 语句一起使用，以确保返回的结果集中的每一行都是唯一的。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT department_id</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY department_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>概述：一个查询的结果作为另个一查询的条件</p><h3 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>概述:只返回两个表中都有的数据</p><h4 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h4><p>概述：返回左表中的所有数据和右表中匹配的数据，右表中没有的数据用NULL填充</p><h4 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h4><p>概述：返回右表中的所有数据和左表中匹配的数据，左表中没有的数据用NULL填充</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>概述：可以提高查询速率</p><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name</span><br><span class="line">ON tal_name(index_col_name,....)</span><br><span class="line">解释：UNIQUE表示唯一索引,FULLTEXT表示全文索引，SPATIAL表示空间索引，后面的索引名、表名、列名就不解释了</span><br><span class="line"></span><br><span class="line">在修改表结构的时候也可以创建索引</span><br><span class="line">alter table 表名 add index 索引名(列名)</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from 表名</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX 索引名 on 表名</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>概述：是一种虚拟存在的表，本身并不包含数据，而是作为一个查询语句保存在数据字典中，当我们查询视图的时候，它会根据查询语句的定义来动态的生成数据</p><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名</span><br><span class="line">AS</span><br><span class="line">SELECT语句</span><br></pre></td></tr></table></figure><h4 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert VIEW 视图名</span><br><span class="line">AS</span><br><span class="line">SELECT语句</span><br></pre></td></tr></table></figure><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view 视图名；</span><br></pre></td></tr></table></figure><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>概述：存储过程（Stored Procedure）是一种在数据库中存储的预编译的 SQL 代码块，可以被多个应用程序或用户重复调用。存储过程在数据库中以一种独立的方式存在，可以接受参数并执行一系列的 SQL 语句。存储过程是一种强大的工具，可以帮助开发者更高效地管理数据库操作，封装复杂的业务逻辑，提升性能和安全性。在大型应用中，合理使用存储过程可以显著提高开发效率和系统的可维护性。</p><h4 id="查看库里的存储过程"><a href="#查看库里的存储过程" class="headerlink" title="查看库里的存储过程"></a>查看库里的存储过程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW PROCEDURE STATUS WHERE Db = &#x27;your_database_name&#x27;;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>示例：在pubs数据库中创建存储过程max_price，根据指定的图书类型（输入参数）返回该类图书的最高单价（输出参数）。要求在创建存储过程前要先判断该存储过程是否已存在，如果存在，则将其删除。</p><p>在sql server中语句表达</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">use pubs</span><br><span class="line">if exists (select name from sysobjects</span><br><span class="line">where name=&#x27;max_price&#x27;and type=&#x27;P&#x27;)</span><br><span class="line">drop procedure max_price</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">create procedure max_price</span><br><span class="line">@Max_price money output,</span><br><span class="line">@type char(12) </span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">select @Max_price= max(price) </span><br><span class="line">from titles</span><br><span class="line">where type = @type</span><br><span class="line">end</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">declare @max_price money</span><br><span class="line">execute max_price @type =&#x27;mod_cook&#x27; ,@Max_price = @max_price output </span><br><span class="line">print @max_price</span><br></pre></td></tr></table></figure><p>示例：在MySQL语句表达</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">USE pubs;</span><br><span class="line"></span><br><span class="line">-- 删除存储过程，如果存在</span><br><span class="line">DROP PROCEDURE IF EXISTS max_price;</span><br><span class="line"></span><br><span class="line">-- 创建存储过程</span><br><span class="line">DELIMITER //      -- 设置结束符</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE max_price(</span><br><span class="line">    OUT Max_price DECIMAL(10, 2),  -- 使用 DECIMAL 代替 MONEY</span><br><span class="line">    IN type CHAR(12)</span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT MAX(price) INTO Max_price</span><br><span class="line">    FROM titles</span><br><span class="line">    WHERE type = type;  -- 注意这里的 type 是输入参数</span><br><span class="line">END //</span><br><span class="line"></span><br><span class="line">DELIMITER ;      -- 设置结束符</span><br><span class="line"></span><br><span class="line">-- 声明变量</span><br><span class="line">SET @max_price = 0;  -- 初始化变量</span><br><span class="line"></span><br><span class="line">-- 调用存储过程</span><br><span class="line">CALL max_price(@max_price, &#x27;mod_cook&#x27;);</span><br><span class="line"></span><br><span class="line">-- 输出结果</span><br><span class="line">SELECT @max_price AS max_price;  -- 使用 SELECT 输出变量</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;了解数据库与mysql&quot;&gt;&lt;a href=&quot;#了解数据库与mysql&quot; class=&quot;headerlink&quot; title=&quot;了解数据库与mysql&quot;&gt;&lt;/a&gt;了解数据库与mysql&lt;/h3&gt;&lt;p&gt;数据库是一个有组织的数据集合，通常以电子方式存储和管理。数据库的主要</summary>
      
    
    
    
    <category term="工具" scheme="https://yufusir.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Mysql" scheme="https://yufusir.github.io/tags/Mysql/"/>
    
    <category term="kali" scheme="https://yufusir.github.io/tags/kali/"/>
    
    <category term="数据库" scheme="https://yufusir.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>爬虫项目：爬取中国大学的排名并进行可视化</title>
    <link href="https://yufusir.github.io/posts/8a3bc19b.html"/>
    <id>https://yufusir.github.io/posts/8a3bc19b.html</id>
    <published>2024-09-18T16:00:00.000Z</published>
    <updated>2024-09-19T15:41:20.598Z</updated>
    
    <content type="html"><![CDATA[<p>在B站上学的一个小项目</p><p>用来新手爬虫可视化练练手挺适合</p><p>爬取站点<a href="https://www.shanghairanking.cn/rankings/bcur/202411.html">【软科排名】2024年最新软科中国大学排名|中国最好大学排名 (shanghairanking.cn)</a></p><p>爬取内容：大学排名，大学名称，大学省份位置，大学类型，大学评分</p><blockquote><p>别总想着白嫖呀，给我<a href="https://blog.csdn.net/qq_66734705/article/details/142372314?spm=1001.2014.3001.5501">博客</a>点个赞行不</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getHTMLText(url):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url, timeout=30)#使用get请求url,且设置请求的超时时间为30秒</span><br><span class="line">        r.raise_for_status()#检查访问是否成功</span><br><span class="line">        r.encoding = r.apparent_encoding#根据响应内容的类型设置正确的编码，确保后续处理时不会出现编码错误</span><br><span class="line">        html = r.text#将响应的 HTML 内容（文本格式）赋值给变量 html</span><br><span class="line"></span><br><span class="line">        # 将html内容写入文件，检查爬取情况</span><br><span class="line">        filename = &#x27;测试html.text&#x27;</span><br><span class="line">        with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">            f.write(html)</span><br><span class="line"></span><br><span class="line">        return html</span><br><span class="line"></span><br><span class="line">    except:</span><br><span class="line">        print(&quot;爬取失败&quot;)</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fillUnivList(ulist, html):#这个函数作用是对爬取数据的筛选，建议按f12打开爬取网页元素构成以便于理解爬虫步骤</span><br><span class="line">    soup = BeautifulSoup(html, &#x27;html.parser&#x27;)#使用 BeautifulSoup 库解析传入的 HTML 文本，创建一个 soup 对象，方便后续进行 HTML 元素的查找。</span><br><span class="line">    table = soup.find(&#x27;table&#x27;, class_=&#x27;rk-table&#x27;)#在 soup 对象中查找第一个 &lt;table&gt; 标签，且其类名为 rk-table。将找到的表格赋值给变量 table。</span><br><span class="line">    #table: 这是我们要查找的 HTML 标签类型。在这里，我们在寻找一个 &lt;table&gt; 标签。</span><br><span class="line">    #class_=&#x27;rk-table&#x27;: 这是一个过滤条件，表示我们只想找到具有特定类名（rk-table）的 &lt;table&gt; 标签。class_ 是一个参数，用于指定 HTML 元素的类属性。</span><br><span class="line">    if table is None:</span><br><span class="line">        print(&quot;未找到排名表格&quot;)</span><br><span class="line">        return</span><br><span class="line">    tbody = table.find(&#x27;tbody&#x27;)#将tboy标签里的内容全部存入变量tbody中</span><br><span class="line">    #print(tbody) #检查数据内容用的，便于理解操作效果</span><br><span class="line">    if tbody is None:</span><br><span class="line">        print(&quot;未找到&lt;tbody&gt;标签&quot;)</span><br><span class="line">        return</span><br><span class="line">    data = tbody.find_all(&#x27;tr&#x27;)#在 &lt;tbody&gt; 中查找所有的 &lt;tr&gt; 标签（表格行），并将其赋值给变量 data。</span><br><span class="line">    #print(data) #测试 查看数据</span><br><span class="line">    for tr in data:</span><br><span class="line">        tds = tr.find_all(&#x27;td&#x27;)</span><br><span class="line">        if len(tds) &lt; 5:  # 爬取5行td的内容</span><br><span class="line">            continue</span><br><span class="line">        td_2 = tds[2].text.strip() if tds[2].text else &quot;&quot;#这边的if else判断tds[2]是否为空，如果为空就赋予引号的值</span><br><span class="line">        #总而言之：从列表tds中获取第三个元素的文本内容，并去掉该文本两端的空白字符。</span><br><span class="line">        td_3 = tds[3].text.strip() if tds[3].text else &quot;&quot;</span><br><span class="line">        #print(tds[1]) #观察里面的内容，并对其中的内容进行筛选</span><br><span class="line">        ulist.append([tds[0].string.strip(), tds[1].find(&#x27;span&#x27;).string.strip(),</span><br><span class="line">                      td_2, td_3, tds[4].string.strip()])</span><br><span class="line">        #tds[1].find(&#x27;span&#x27;).string.strip() 的意思是：</span><br><span class="line">        # 从 tds 列表中获取第二个 &lt;td&gt; 元素，找到该元素内的第一个 &lt;span&gt; 标签，获取该标签中的文本内容，并去掉文本前后的空白字符。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def printUnivList(ulist, num):#将爬取的内容存入.csv文件</span><br><span class="line">    file_name = &quot;大学排行.csv&quot;</span><br><span class="line">    with open(file_name, &#x27;w&#x27;, newline=&#x27;&#x27;, encoding=&#x27;utf-8&#x27;) as f:#创建或覆盖一个名为 &quot;大学排行.csv&quot; 的文件，使用 UTF-8 编码以支持中文字符。</span><br><span class="line">        writer = csv.writer(f)#使用 csv.writer 创建一个写入器，并写入表头。</span><br><span class="line">        writer.writerow([&quot;排名&quot;, &quot;大学名称&quot;, &quot;省市&quot;, &quot;类型&quot;, &quot;总分&quot;])</span><br><span class="line">        for i in range(num):#写入数据并打印数据用于检查</span><br><span class="line">            u = ulist[i]</span><br><span class="line">            writer.writerow(u)</span><br><span class="line">            print(f&quot;排名：&#123;u[0]&#125;\t大学名称：&#123;u[1]&#125;\t省市：&#123;u[2]&#125;\t类型：&#123;u[3]&#125;\t总分：&#123;u[4]&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 折线图</span><br><span class="line">def drawLineChart(ulist):</span><br><span class="line">    ranks = [(u[0]) for u in ulist]#ranks：从 ulist 中提取每个大学的排名</span><br><span class="line">    scores = [float(u[4]) for u in ulist]#scores：从 ulist 中提取每个大学的总分，并将其转换为浮点数</span><br><span class="line">    names = [u[1] for u in ulist]#names：从 ulist 中提取大学的名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]#设置字体为 SimHei，以支持中文显示。</span><br><span class="line">    plt.figure(dpi=300)  # 设置图像分辨率为300</span><br><span class="line">    plt.figure(figsize=(12, 8)) #设置图像的大小为12x8英寸</span><br><span class="line">    plt.plot(names, scores)#绘制以 ranks 为横坐标、scores 为纵坐标的折线图。</span><br><span class="line"></span><br><span class="line">    plt.xlabel(&#x27;大学名称&#x27;)</span><br><span class="line">    plt.ylabel(&#x27;总分&#x27;)</span><br><span class="line">    plt.title(&#x27;大学排行榜折线图&#x27;)</span><br><span class="line"></span><br><span class="line">    for i in range(len(names)):#在每个点上加上排名</span><br><span class="line">        plt.text(names[i], scores[i], ranks[i], ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, multialignment=&#x27;center&#x27;)</span><br><span class="line"></span><br><span class="line">    plt.xticks(rotation=&#x27;vertical&#x27;)  # 将x轴的字体改为竖向显示</span><br><span class="line"></span><br><span class="line">    plt.savefig(&#x27;大学排行榜折线图.pdf&#x27;, format=&#x27;pdf&#x27;, bbox_inches=&#x27;tight&#x27;)  # bbox_inches=&#x27;tight&#x27; 可以去除多余的空白</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"># 饼图</span><br><span class="line">def generatePieChart(ulist, num):</span><br><span class="line">    provinces = &#123;&#125;</span><br><span class="line">    for i in range(num):</span><br><span class="line">        province = ulist[i][2]</span><br><span class="line">        if province in provinces:</span><br><span class="line">            provinces[province] += 1</span><br><span class="line">        else:</span><br><span class="line">            provinces[province] = 1</span><br><span class="line"></span><br><span class="line">    labels = provinces.keys()</span><br><span class="line">    sizes = provinces.values()</span><br><span class="line">    plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line">    plt.figure(dpi=300)  # 设置图像分辨率为300</span><br><span class="line">    plt.figure(figsize=(8, 6))</span><br><span class="line">    plt.pie(sizes, labels=labels, autopct=&#x27;%1.1f%%&#x27;)</span><br><span class="line">    plt.axis(&#x27;equal&#x27;)</span><br><span class="line">    plt.title(&#x27;大学排行前30名的省份分布&#x27;)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    # plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 柱形图</span><br><span class="line">def printUnivList2(ulist, num):</span><br><span class="line">    ranks = []</span><br><span class="line">    scores = []</span><br><span class="line">    names = []</span><br><span class="line"></span><br><span class="line">    for i in range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        ranks.append(int(u[0]))</span><br><span class="line">        scores.append(float(u[4]))</span><br><span class="line">        names.append(u[1])</span><br><span class="line"></span><br><span class="line">    plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line">    plt.figure(dpi=300)  # 设置图像分辨率为300</span><br><span class="line">    plt.bar(ranks, scores)</span><br><span class="line">    plt.xlabel(&#x27;排名&#x27;)</span><br><span class="line">    plt.ylabel(&#x27;总分&#x27;)</span><br><span class="line">    plt.title(&#x27;大学排名&#x27;)</span><br><span class="line"></span><br><span class="line">    for i in range(len(ranks)):</span><br><span class="line">        # 在每个柱形图上方显示大学名称，并将其旋转45度</span><br><span class="line">        plt.text(ranks[i], scores[i], names[i], ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;, fontsize=3, rotation=45)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 散点图</span><br><span class="line">def generateScatterPlot(ulist, num):</span><br><span class="line">    scores = [float(ulist[i][4]) for i in range(num)]</span><br><span class="line">    ranks = [i + 1 for i in range(num)]</span><br><span class="line">    names = [ulist[i][1] for i in range(num)]</span><br><span class="line">    plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line">    plt.figure(dpi=300)  # 设置图像分辨率为300</span><br><span class="line">    plt.figure(figsize=(12, 8))</span><br><span class="line">    plt.scatter(ranks, scores)</span><br><span class="line">    plt.title(&#x27;大学排名与总分的关系&#x27;)</span><br><span class="line">    plt.xlabel(&#x27;排名&#x27;)</span><br><span class="line">    plt.ylabel(&#x27;总分&#x27;)</span><br><span class="line"></span><br><span class="line">    for i, name in enumerate(names):</span><br><span class="line">        plt.annotate(name, (ranks[i], scores[i]), xytext=(5, 5), textcoords=&#x27;offset points&#x27;, fontsize=8, rotation=45)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 箱形图</span><br><span class="line">def generateBoxPlot(ulist, num):</span><br><span class="line">    scores = [float(ulist[i][4]) for i in range(num)]</span><br><span class="line">    plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line">    plt.figure(dpi=300)  # 设置图像分辨率为300</span><br><span class="line">    plt.figure(figsize=(8, 6))</span><br><span class="line">    plt.boxplot(scores)</span><br><span class="line">    plt.title(&#x27;大学总分箱形图&#x27;)</span><br><span class="line">    plt.ylabel(&#x27;总分&#x27;)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 环形图</span><br><span class="line">def generateDonutChart(ulist, num):</span><br><span class="line">    provinces = &#123;&#125;</span><br><span class="line">    for i in range(num):</span><br><span class="line">        province = ulist[i][2]</span><br><span class="line">        if province in provinces:</span><br><span class="line">            provinces[province] += 1</span><br><span class="line">        else:</span><br><span class="line">            provinces[province] = 1</span><br><span class="line"></span><br><span class="line">    labels = provinces.keys()</span><br><span class="line">    sizes = provinces.values()</span><br><span class="line">    plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line">    plt.figure(dpi=300)  # 设置图像分辨率为300</span><br><span class="line">    plt.figure(figsize=(8, 6))</span><br><span class="line">    _, _, autotexts = plt.pie(sizes, labels=labels, autopct=&#x27;%1.1f%%&#x27;, wedgeprops=dict(width=0.8))</span><br><span class="line">    plt.setp(autotexts, size=8)</span><br><span class="line">    plt.title(&#x27;大学排行前30名的省份分布（环形图）&#x27;)</span><br><span class="line">    plt.axis(&#x27;equal&#x27;)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    ulist = []</span><br><span class="line">    url = &#x27;https://www.shanghairanking.cn/rankings/bcur/202411.html&#x27;</span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    if html is not None:</span><br><span class="line">        fillUnivList(ulist, html)</span><br><span class="line">        printUnivList(ulist, 30)</span><br><span class="line">        printUnivList2(ulist, 30)  # 柱形图</span><br><span class="line">        drawLineChart(ulist)  # 折线图</span><br><span class="line">        generatePieChart(ulist, 30)  # 饼图</span><br><span class="line">        generateScatterPlot(ulist, 30)  # 调用生成散点图的函数</span><br><span class="line">        generateBoxPlot(ulist, 30)  # 调用生成箱形图的函数</span><br><span class="line">        generateDonutChart(ulist, 30)  # 调用生成环形图的函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在B站上学的一个小项目&lt;/p&gt;
&lt;p&gt;用来新手爬虫可视化练练手挺适合&lt;/p&gt;
&lt;p&gt;爬取站点&lt;a href=&quot;https://www.shanghairanking.cn/rankings/bcur/202411.html&quot;&gt;【软科排名】2024年最新软科中国大学排名|中国</summary>
      
    
    
    
    <category term="项目实战" scheme="https://yufusir.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="Python" scheme="https://yufusir.github.io/tags/Python/"/>
    
    <category term="项目实战" scheme="https://yufusir.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    <category term="爬虫" scheme="https://yufusir.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员C++自学笔记</title>
    <link href="https://yufusir.github.io/posts/ca348d9f.html"/>
    <id>https://yufusir.github.io/posts/ca348d9f.html</id>
    <published>2024-08-18T16:00:00.000Z</published>
    <updated>2025-03-07T12:04:45.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-的学习开始"><a href="#C-的学习开始" class="headerlink" title="C++的学习开始"></a>C++的学习开始</h3><h4 id="编译器的下载（Visual-Studio）"><a href="#编译器的下载（Visual-Studio）" class="headerlink" title="编译器的下载（Visual Studio）"></a>编译器的下载（Visual Studio）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://visualstudio.microsoft.com/zh-hans/</span><br></pre></td></tr></table></figure><h4 id="hello-world案例的实现"><a href="#hello-world案例的实现" class="headerlink" title="hello world案例的实现"></a>hello world案例的实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>概述：用于解释说明代码，方便自己与其他程序员理解代码，被注释的内容不会被编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单行注释</span><br><span class="line">//内容</span><br><span class="line"></span><br><span class="line">多行注释</span><br><span class="line">/*</span><br><span class="line">内容</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>概述：给一段指定内存空间起名，方便操作这段内存</p><p>语法：数据类型 变量名 = 初始值；</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>概述：用于记录程序中不可更改的数据</p><p>C++定义常量的两种方式</p><ul><li>define 宏常量：<code>#define 常量名 常量值</code><ul><li>通常在文件上方定义，表示一个常量</li></ul></li><li>const修饰的变量：<code>const 数据类型 常量名 = 常量值</code><ul><li>通常在变量定义前加关键字const，修饰该变量为常量，不可修改</li></ul></li></ul><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>概述：关键字是C++中预先保留的单词（标识符）</p><ul><li>在定义变量或者常量时候，不要用关键字</li></ul><h4 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h4><p>概述：C++规定给标识符（变量，常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到命名知意的效果，方便别人和其他人阅读</p></blockquote><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>概述：C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否者如法给变量分配内存</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>-(2^15~2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>-(2^31~2^31-1)</td></tr><tr><td>long(长整型)</td><td>Windows为4字节，linux为4字节(32位)，8字节(64位)</td><td>-(2^31~2^31-1)</td></tr><tr><td>long long(长长整型)</td><td>8字节</td><td>-(2^63~2^63-1)</td></tr><tr><td>float(单精度)</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double(双精度)</td><td>8字节</td><td>15~16位有效数字</td></tr><tr><td>char(字符型)</td><td>1字节</td><td>一个字符</td></tr><tr><td>bool(布尔型)</td><td>1字节</td><td>true or false</td></tr></tbody></table></div><h4 id="sizeof关键字"><a href="#sizeof关键字" class="headerlink" title="sizeof关键字"></a>sizeof关键字</h4><p>概述：利用sizeof关键字可以统计数据类型所占用内存大小</p><p>语法：sizeoff(数据类型/变量)</p><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>概述：表示一些不能显示出来的ASCII字符</p><div class="table-container"><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格（bs），将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页（ff），将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行（lf），将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车（cr），将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表（ht）（跳到下一个tab位置）</td><td>009</td></tr><tr><td>\v</td><td>垂直制表（vt）</td><td>011</td></tr><tr><td>\ \</td><td>代表一个反斜线字符“\”</td><td>092</td></tr><tr><td>\ ‘</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>\ ‘</td><td>代表</td><td>034</td></tr><tr><td>\?</td><td>代表</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0-7</td><td>3位八进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0-9，a-f</td><td>3位16进制</td></tr></tbody></table></div><h4 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h4><p>概述：用于表示一个字符串</p><p>两种风格</p><ul><li>C风格字符串：char 变量名[] = “字符串值”</li></ul><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ul><li>C++风格字符串：string 变量名 = “字符串值”</li></ul><blockquote><p>注意：C++风格字符串，需要加入头文件#include<string></p></blockquote><h4 id="数据的输入"><a href="#数据的输入" class="headerlink" title="数据的输入"></a>数据的输入</h4><p>概述：从键盘获取数据</p><p>关键字：cin</p><p>语法：cin &gt;&gt; 变量；</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>概述：根据表达式的值返回真值或假值</p><p>逻辑运算符有一下符号：</p><p>逻辑运算符：</p><ul><li>非(!a)：如果a为假，则！a为真；否则反之</li><li>与(a&amp;&amp;b)：如果a和b都为真，则结果为真，否则为假</li><li>或(a||b)：如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</li></ul><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>概述：位运算符主要用于二进制的位运算，并逐位执行操作</p><ul><li>与 &amp;（同为1，则为1）</li><li>或 |（有1，则为1）</li><li>异或 ^（不同则为1）</li><li>取反 ~（1为0，0为1，运算符也要qu）</li></ul><h4 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h4><p>概述：依据条件是否满足，有选择的执行相应的功能</p><blockquote><p>if语句三种形式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//单行格式if语句</span><br><span class="line">if(条件)&#123;</span><br><span class="line">条件满足执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//多行格式if语句</span><br><span class="line">if(条件)&#123;</span><br><span class="line">条件满足执行语句</span><br><span class="line">&#125;else&#123;</span><br><span class="line">条件不满足执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//多条件的if语句</span><br><span class="line">if(条件1)&#123;</span><br><span class="line">条件1满足执行语句</span><br><span class="line">&#125;else if(条件2)&#123;</span><br><span class="line">条件2满足执行语句</span><br><span class="line">&#125;else&#123;</span><br><span class="line">都不满足执行语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：if语句可以嵌套</span><br></pre></td></tr></table></figure><blockquote><p>三目运算符</p><p>语法：表达式1 ？ 表达式2 ：表达式3</p><p>解释：</p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果</p><p>switch语句</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">switch()&#123;</span><br><span class="line">case 结果1：执行语句；break；</span><br><span class="line">case 结果2：执行语句；break；</span><br><span class="line">……</span><br><span class="line">default：执行语句；break；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>概述：依据条件是否满足，循环多次执行某段代码</p><blockquote><p>while循环语句</p><p>概述：满足循环条件，执行循环语句</p><p>语法：while（循环条件）{循环语句}</p><p>do……while循环语句</p><p>概述：满足循环条件，执行循环语句</p><p>语法：do{循环语句}while（循环条件）；</p><p>注意：与while的区别在于do……while会先执行一次循环语句，再判断循环条件</p><p>for循环语句</p><p>概述：满足循环条件，执行循环语句</p><p>语法：for（起始表达式；条件表达式；末尾循环体）{循环语句；}</p></blockquote><h4 id="rand语句"><a href="#rand语句" class="headerlink" title="rand语句"></a>rand语句</h4><p>概述：生成一定范围的随机数</p><p>示例：int num = rand()%100 +1; //生成0+1~99+1之间的随机数</p><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p>概述：用于跳出选择结构或者循环结构</p><p>break使用时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>概述：在循环语句中，跳过本次循环中余下尚未执行的语句，继续进行下一次循环</p><p>注意：continue并没有使整个循环终止，而break会跳出循环</p><h4 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h4><p>概述：如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p>语法：goto 标记；</p><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>概述：所谓数组，就是一个集合，里面存放了相同类型的数据元素，且每个数据元素都是相同的数据类型，数组的内存位置组成也是连续的</p><blockquote><p>一维数组定义的三种方式：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名 [数组长度];</span><br><span class="line"></span><br><span class="line">数据类型 数组名[数组长度] = &#123;值1，值2，……&#125;;</span><br><span class="line"></span><br><span class="line">数据类型 数组名[] = &#123;值1，值2，……&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>二维数组定义的四种方式：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名 [行数] [列数]；</span><br><span class="line"></span><br><span class="line">数据类型 数组名 [行数] [列数] = &#123;&#123;数据1，数据2&#125;，&#123;数据3，数据4&#125;&#125;；</span><br><span class="line"></span><br><span class="line">数据类型 数组名 [行数] [列数] = &#123;数据1，数据2，数据3 ，数据4&#125;；</span><br><span class="line"></span><br><span class="line">数据类型 数组名 [ ] [列数]= &#123;数据1，数据2，数据3 ，数据4&#125;；</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>概述：将一段经常使用的代码封装起来，减少重复代码</p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//函数的声明</span><br><span class="line">返回值类型 函数名 （形参）；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//函数的定义</span><br><span class="line">返回值类型 函数名 （形参）</span><br><span class="line">&#123;</span><br><span class="line">函数体语句</span><br><span class="line">return表达式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//函数的调用</span><br><span class="line">函数名 （实参）；</span><br><span class="line"></span><br><span class="line">注意：所谓值传递，就是函数调用时将实参数值传入形参，如果形参发生变化，并不会影响实参，但是地址传递的形参发生变化，实参也会发生变化（如果不想修改实参，就用值传递，如果想修改实参，就用地址传递）</span><br></pre></td></tr></table></figure><h4 id="函数的分文件编写"><a href="#函数的分文件编写" class="headerlink" title="函数的分文件编写"></a>函数的分文件编写</h4><p>作用：让代码结构更加清晰</p><p>函数份文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件</li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>概述：可以通过指针间接访问内存，内存编号是从0开始记录的，一般用十六进制数字表示，可以利用指针变量保存地址</p><p>语法：<code>数据类型 *变量名；</code></p><p>注意：在32位操作系统下，指针占4个字节，在64位操作系统下，指针占8个字节，跟数据类型无关。</p><h4 id="空指针和野指针"><a href="#空指针和野指针" class="headerlink" title="空指针和野指针"></a>空指针和野指针</h4><p>空指针：指针变量指向内存编号为0的空间（如：int *p = NULL）</p><p>野指针：指针变量指向非法的内存空间（如：int <em>p = （int </em>）0x1100）</p><p>用途：初始化指针变量</p><p>注意：空指针指向的内存是不可以访问的（0-255为系统占用内存，不允许用户访问），且空指针与野指针都不是我们申请的空间，因此不要访问。</p><h4 id="const修饰指针（指针常量与常量指针）"><a href="#const修饰指针（指针常量与常量指针）" class="headerlink" title="const修饰指针（指针常量与常量指针）"></a>const修饰指针（指针常量与常量指针）</h4><p>const修饰指针有三种情况：</p><ul><li>const修饰指针 —常量指针</li><li>const修饰常量 —指针常量</li><li>const即修饰指针，又修饰常量</li></ul><blockquote><p>常量指针与指针常量性质的记忆方法：谁先说谁不变，谁先说谁先写</p></blockquote><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//const修饰的是指针，指针指向可以改，指针指向的值不能改</span><br><span class="line">const int p1 = &amp;a；</span><br><span class="line">p1 = &amp;b；  //正确</span><br><span class="line">*p1 = 100；//报错</span><br><span class="line"></span><br><span class="line">//const修饰的是常量，指针指向不可以改，指针指向的值可以改</span><br><span class="line">const int p2 = &amp;a；</span><br><span class="line">p2 = &amp;b；  //报错</span><br><span class="line">*p2 = 100；//正确</span><br><span class="line"></span><br><span class="line">//const即修饰指针又修饰常量</span><br><span class="line">const int p3 = &amp;a；</span><br><span class="line">p3 = &amp;b；  //报错</span><br><span class="line">*p3 = 100；//报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>概述：结构体属于用户自定义的数据类型，允许用户存储不同数据类型</p><h4 id="结构体定义和使用"><a href="#结构体定义和使用" class="headerlink" title="结构体定义和使用"></a>结构体定义和使用</h4><p>语法：<code>struct 结构体名 &#123;结构体成员列表&#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = {成员1值，成员2值……}</li><li>定义结构体时顺便创建变量</li></ul><p>总结：</p><ul><li>定义结构体时的关键字是struct，不可省略</li><li>创建结构体变量时，关键字struct可以省略</li><li>结构体变量利用操作符”.”访问成员</li></ul><h4 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h4><p>概述：将自定义的结构体放入到数组中方便维护</p><p>语法：<code>struct 结构体名 数组名[元素个数] = &#123; &#123; &#125;,&#123; &#125;, ... &#123; &#125; &#125;</code></p><h4 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h4><p>作用：通过指针访问结构体中的成员</p><ul><li>利用操作符-&gt;可以通过结构体指针访问结构体属性</li></ul><h4 id="结构体嵌套结构体"><a href="#结构体嵌套结构体" class="headerlink" title="结构体嵌套结构体"></a>结构体嵌套结构体</h4><p>概述：结构体中的成员可以是另一个结构体</p><p>总结：在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h4 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h4><p>概述：将结构体作为参数向函数中传递</p><h4 id="结构体中const使用场景"><a href="#结构体中const使用场景" class="headerlink" title="结构体中const使用场景"></a>结构体中const使用场景</h4><p>概述：用const来防止误操作</p><h3 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h3><p>C++程序在执行中，将内存大方向化为四个区域</p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li></ul><p>内存四区意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程</p><h4 id="程序运行前"><a href="#程序运行前" class="headerlink" title="程序运行前"></a>程序运行前</h4><p>在程序编译后，生成了exe可执行程序，未执行该程序前分为了两个区域</p><p>代码区：</p><ul><li>存放cpu执行的机器指令</li><li>代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</li><li>代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令</li></ul><p>全局区：</p><ul><li>全局变量和静态变量存放在此</li><li>全局区还包括常量区，字符串常量和其他常量也存放在此</li><li>该区域的数据在程序结束后由操作系统释放</li></ul><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区存放全局变量，静态变量（由static关键字修饰），常量</li><li>常量区中存放const修饰的全局常量和字符串常量</li></ul><h4 id="程序运行后"><a href="#程序运行后" class="headerlink" title="程序运行后"></a>程序运行后</h4><p>栈区：</p><ul><li>由编译器自动分配释放，存放函数的参数值，局部变量等</li><li>注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</li></ul><p>堆区：</p><ul><li>由程序员分配释放，若程序员不释放，程序结束时由操作系统回收</li><li>在C++中主要利用new在堆区开辟内存</li></ul><h4 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h4><p>C++中利用new操作符在堆区开辟数据</p><p>堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete</p><p>语法：<code>new 数据类型</code></p><p>利用new创建的数据，会返回该数据对应的类型的指针</p><p>注意：自定义数据类型（如：结构体，数组）要用delete[]释放</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="引用的基本使用"><a href="#引用的基本使用" class="headerlink" title="引用的基本使用"></a>引用的基本使用</h4><p>作用：给变量起别名</p><p>语法：数据类型 &amp;别名 = 原名</p><h4 id="引用的注意事项"><a href="#引用的注意事项" class="headerlink" title="引用的注意事项"></a>引用的注意事项</h4><ul><li>引用必须初始化</li><li>引用在初始化后，不可以更改</li></ul><h4 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h4><p>作用：函数传参时，可以利用引用的技术让形参修饰实参</p><p>优点：可以简化指针修改实参</p><h4 id="引用做函数的返回值"><a href="#引用做函数的返回值" class="headerlink" title="引用做函数的返回值"></a>引用做函数的返回值</h4><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：不要返回局部变量引用</p><p>用法：函数调用作为左值</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//返回局部变量引用</span><br><span class="line">int&amp; test01()&#123;</span><br><span class="line">int a = 10;//局部变量</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">//返回静态变量引用</span><br><span class="line">int&amp; test02()&#123;</span><br><span class="line">static int a = 20;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">//不能返回局部变量的引用</span><br><span class="line">int&amp; ref = test01();</span><br><span class="line">cout &lt;&lt;&quot;ref =&quot;&lt;&lt; ref &lt;&lt;enl;//10</span><br><span class="line">cout &lt;&lt;&quot;ref =&quot;&lt;&lt; ref &lt;&lt;enl;//乱码</span><br><span class="line"></span><br><span class="line">//如果函数做左值，那么必须返回引用</span><br><span class="line">int&amp; ref2 = test02</span><br><span class="line">cout &lt;&lt;&quot;ref2 =&quot;&lt;&lt; re2f &lt;&lt;enl;//20</span><br><span class="line">cout &lt;&lt;&quot;ref2 =&quot;&lt;&lt; ref2 &lt;&lt;enl;//20</span><br><span class="line">test02() = 1000;</span><br><span class="line">cout &lt;&lt;&quot;ref2 =&quot;&lt;&lt; re2f &lt;&lt;enl;//1000</span><br><span class="line">cout &lt;&lt;&quot;ref2 =&quot;&lt;&lt; ref2 &lt;&lt;enl;//1000</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h4><p>本质：引用的本质在C++内部实现是一个指针常量</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//发现是引用，转换为 int* const ref = &amp;a;</span><br><span class="line">void func(int&amp; ref)&#123;</span><br><span class="line">ref = 100;//ref是引用，转换为*ref = 100</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a = 10;</span><br><span class="line">//自动转换为int* const ref = &amp;a;指针常量是指针指向不可改，也说明为什么引用不可更改</span><br><span class="line">int&amp; ref = a;</span><br><span class="line">ref = 20;//内部发现ref是引用，自动帮我们转换为：*ref = 20；</span><br><span class="line">cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">func(a);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h4><p>作用：常量引用主要用来修饰形参的，防止误操作</p><p>在函数形参列表中，可以加const修饰形参，防止形参改变实参</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//引用使用的场景，通常用来修斯形参</span><br><span class="line">void showValue(const int&amp; v)&#123;</span><br><span class="line">//v += 10;</span><br><span class="line">cont &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">//int&amp; ref = 10; 引用本身需要一个合法的内存空间，因此这行错误</span><br><span class="line">//加入const就可以了，编译器优化代码，int，temp = 10；const int&amp; ref = temp;</span><br><span class="line">    const int&amp; ref = 10;</span><br><span class="line">    //ref = 100;//加入const后不可以改变变量</span><br><span class="line">    const &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">    //函数中利用常量引用防止误操作修改实参</span><br><span class="line">    int a = 10;</span><br><span class="line">    showValue(a);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h3><h4 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h4><p>概述：在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code>返回值类型 函数名 （参数 = 默认值）&#123;&#125;</code></p><p>注意：</p><ul><li>如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</li><li>如果函数声明有默认值，函数实现的时候就不能有默认参数</li></ul><h4 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h4><p>概述：C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p>语法：<code>返回值类型 函数名 （数据类型）&#123;&#125;</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//函数占位参数，占位参数也可以有默认参数</span><br><span class="line">void func(int a,int = 10)&#123;</span><br><span class="line">cont &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">func(10,10);//占位参数必须填补</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><h4 id="函数重载概述"><a href="#函数重载概述" class="headerlink" title="函数重载概述"></a>函数重载概述</h4><p>作用：函数名可以相同，提高复用性</p><p>函数重载满足条件：</p><ul><li>同一个作用域下</li><li>函数名相同</li><li>函数参数的类型不同，或者个数不同，或者顺序不同</li></ul><p>注意：函数的返回值不可以作为函数重载的条件</p><h4 id="函数重载注意事项"><a href="#函数重载注意事项" class="headerlink" title="函数重载注意事项"></a>函数重载注意事项</h4><ul><li>引用可以作为重载条件</li><li>函数重载碰到函数默认参数（碰到默认参数产生歧义而报错，需要避免）</li></ul><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>概述：C++面向对象的三大特性为：封装，继承，多态，C++认为万物都皆有对象，对象上有其属性和行为，简而言之，具有相同性质的<code>对象</code>，我们可以抽象称为<code>类</code></p><h4 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h4><p>意义：</p><ul><li>将属性和行为作为一个整体，表现在生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p>语法：<code>class 类名&#123;访问权限：属性/行为&#125;;</code></p><p>属性即成员变量，行为即成员函数</p><p>访问权限有三种：</p><ul><li>public        公共权限<ul><li>类内可以访问，类外可以访问</li></ul></li><li>protected  保护权限<ul><li>类内可以访问，类外不可以访问，子类可以访问父类中的保护内容</li></ul></li><li>private       私有权限<ul><li>类内可以访问，类外不可以访问，子类不可以访问父类中的私有内容</li></ul></li></ul><h4 id="struct和class区别"><a href="#struct和class区别" class="headerlink" title="struct和class区别"></a>struct和class区别</h4><p>概述：在C++中struct和class唯一的区别就在于默认的访问权限不同</p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><h4 id="成员属性设置为私有"><a href="#成员属性设置为私有" class="headerlink" title="成员属性设置为私有"></a>成员属性设置为私有</h4><p>优点：</p><ul><li>将所有成员属性设置为私有，可以自己控制读写权限</li><li>对于写权限，我们可以检测数据的有效性</li></ul><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><p>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用。</p><p>语法：类名(){}</p><ul><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次</li></ul><p>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</p><p>语法：~类名(){}</p><ul><li>析构函数，没有返回值也不写viod</li><li>函数名称与类名相同，在名称前面加上符号~</li><li>析构函数不可以有参数，因此不可能发生重载</li><li>程序在对象销毁前会自动调用析构，无需手动调用，而且只会调用一次</li></ul><h4 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h4><p>两种分类方式：</p><ul><li>按参数分为：有参构造和无参构造</li><li>按类型分为：普通构造和拷贝构造</li></ul><p>三种调用：</p><ul><li>括号法</li><li>显示法</li><li>隐式转换法</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//1.构造函数分类</span><br><span class="line">//按照参数分类 有参和无参构造 无参又称为默认构造函数</span><br><span class="line">//按照类型分为 普通构造和拷贝构造</span><br><span class="line">class preson&#123;</span><br><span class="line">public:</span><br><span class="line">//无参（默认）构造函数</span><br><span class="line">preson()&#123;</span><br><span class="line">cout &lt;&lt; &quot;无参构造函数！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//有参构造函数</span><br><span class="line">person(int a)&#123;</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; &quot;有参构造函数！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//拷贝构造函数</span><br><span class="line">person(const person&amp; p)&#123;</span><br><span class="line">age = p.age;</span><br><span class="line">cout &lt;&lt; &quot;拷贝构造函数！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//析构函数</span><br><span class="line">~person()&#123;</span><br><span class="line">cout &lt;&lt; &quot;析构函数！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">public:</span><br><span class="line">int age;</span><br><span class="line">&#125;;</span><br><span class="line">//2.构造函数的调用</span><br><span class="line">//调用无参构造函数</span><br><span class="line">void test01()&#123;</span><br><span class="line">person p;</span><br><span class="line">&#125;</span><br><span class="line">//调用有参的构造函数</span><br><span class="line">void test02()&#123;</span><br><span class="line">//括号法</span><br><span class="line">person p1(10);</span><br><span class="line">//注意：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span><br><span class="line">//person p2();</span><br><span class="line"></span><br><span class="line">//显示法</span><br><span class="line">person p2 = person(10);</span><br><span class="line">person p3 = person(p2);</span><br><span class="line">//person(10)单独写就是匿名对象 当前行结束之后，马上析构</span><br><span class="line"></span><br><span class="line">//隐式转换法</span><br><span class="line">person p4 = 10;//person p4 = person(10);</span><br><span class="line">person p5 = p4;//person p5 = person(p4);</span><br><span class="line">//注意：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span><br><span class="line">    //person p5(p4)</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝构造函数调用时机</p><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值的方式返回局部对象</li></ul><h4 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h4><p>概述：默认情况下，C++编译器至少给一个类添加3个函数</p><ul><li>默认构造函数（无参，函数体为空）</li><li>默认析构函数（无参，函数体为空）</li><li>默认拷贝构造函数，对属性进行拷贝</li></ul><p>规则如下：</p><ul><li>如果用户定义有参构造函数，C++不在提供默认无参构造，但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数，C++不会提供其他的构造函数 </li></ul><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>概述：C++提供了初始化列表语法，用来初始化属性</p><p>语法：<code>构造函数（）：属性1（值1），属性2（值2）…&#123;&#125;</code></p><h4 id="类对象作为类的成员"><a href="#类对象作为类的成员" class="headerlink" title="类对象作为类的成员"></a>类对象作为类的成员</h4><p>概述：C++类中的成员可以是另个类的对象，我们称为该成员为对象成员</p><p>列如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;&#125;</span><br><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">A a;</span><br><span class="line">&#125;</span><br><span class="line">//B类中有对象A作为成员，A为对象成员</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>当类中成员是其他类对象时，我们称该成员为 对象成员</li><li>构造的顺序是：先调用对象成员的构造，再调用本类的构造</li><li>析构顺序与构造相反（口诀：先有零件再装机，先拆机再扔零件）</li></ul><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>概述：静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p>静态成员变量特点</p><ul><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li><li>所有对象共享同一份数据</li></ul><p>静态成员变量两种访问方式</p><ul><li>通过对象（对象.成员变量)</li><li>通过类名（类名::成员变量）</li></ul><p>注意：静态成员变量也是有访问权限的</p><p>静态成员函数特点</p><ul><li>程序共享一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul><p>静态成员函数的访问跟静态成员变量的访问相差无几</p><h4 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h4><p>概述：C++中，类内的成员变量和成员函数分开存储，只有非静态成员变量才属于类的对象上</p><p>结论：</p><ul><li>只有非静态成员变量占对象空间</li><li>静态成员变量不占用对象空间</li><li>函数也不占用对象空间，所有函数共享一个函数实例</li></ul><h4 id="this指针概念"><a href="#this指针概念" class="headerlink" title="this指针概念"></a>this指针概念</h4><p>概述：C++通过特殊的对象指针，this指针可以区分那个对象调用自己的。this指针指向被调用的成员函数所属的对象，this指针是隐含每个非静态成员函数内的一种指针，不需要被定义，直接可以使用</p><p>用途：</p><ul><li>当形参和成员变量同名时，可以用this指针来区别</li><li>在类的非静态成员函数中返回对象本身，可以使用<code>return *this</code></li></ul><h4 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h4><p>概述：C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到了this指针，需要加以判断，保证代码的健壮性</p><h4 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h4><p>常函数：</p><ul><li>成员函数后加const后我们称为这个函数为常函数（类型 函数名（形参） const {}）</li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p>常对象：</p><ul><li><p>声明对象前加const称该对象为常对象</p></li><li><p>常对象只能调用常函数</p></li></ul><h4 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h4><p>概述：在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就可以要用到有元的技术，友元的目的就是让一个函数或者类访问另一个类中的私有成员</p><p>关键字：friend</p><p>友元的三种实现方法</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p>概述：对已有的运算符重新进行重新定义，赋予其另一种功能，以适应不同的数据类型</p><p>编译器通用函数名：operator运算符</p><p>本节内容有（<a href="https://www.bilibili.com/video/BV1et411b73Z?p=121&amp;vd_source=d7aed904328df9600c4d6478e2ce67b8">C++运算符重载_哔哩哔哩_bilibili</a>）</p><ul><li>加号运算符重载</li><li>左移运算符重载</li><li>递增运算符重载</li><li>赋值运算符重载</li><li>关系运算符重载</li><li>函数调用运算符重载</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//只能利用全局函数重载左移运算符</span><br><span class="line">ostrean &amp; operator&lt;&lt;(ostream &amp;cout,Person &amp;p)//本质 operator&lt;&lt; (cout,p) 简化 cout &lt;&lt; p</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;m_A =&quot; &lt;&lt; p.m_A &lt;&lt; &quot; m_B = &quot; &lt;&lt; p.m_B;</span><br><span class="line">return cout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承的基础语法"><a href="#继承的基础语法" class="headerlink" title="继承的基础语法"></a>继承的基础语法</h4><p>语法：<code>class A：继承方式 B；</code></p><p>继承的好处：可以减少重复的代码</p><p>A类称为子类 或 派生类</p><p>B类称为父类 或 基类</p><p>派生类中的成员，包含两个部分：</p><ul><li>一类是从基类继承过来的，一类是自己增加的成员</li><li>从基类继承过过来的表现其共性，而新增的成员体现了其个性</li></ul><h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><p>继承方式一共有三种：</p><ul><li>公共继承（父类的公共成员 到子类中还是公共成员，父类的保护成员 到子类中还是保护成员）</li><li>保护继承（父类的公共成员 到子类中变为保护成员，父类的保护成员 到子类中还是保护成员）</li><li>私有继承（父类的公共成员 到子类中变为私有成员，父类的保护成员 到子类中变为私有成员）</li></ul><p>注意：父类中的私有成员也是被子类继承下去了，只是由编译器给隐藏后 访问不到</p><h4 id="继承中构造和析构顺序"><a href="#继承中构造和析构顺序" class="headerlink" title="继承中构造和析构顺序"></a>继承中构造和析构顺序</h4><p>省流：父构-&gt;子构- &gt;子析-&gt;父析</p><h4 id="继承同名成员处理"><a href="#继承同名成员处理" class="headerlink" title="继承同名成员处理"></a>继承同名成员处理</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或者父类中同名的数据呢？</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域（父类名称::）</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中的同名成员函数，加作用域可以访问到父类中的同名函数</li></ul><p>注意：同名静态成员处理方式和非静态处理方式一样，只不过静态成员有两种访问的方式（通过对象 和 通过类名）</p><h4 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h4><p>概述：C++允许一个类继承多个类</p><p>语法：<code>class 子类：继承方式 父类1，继承方式 父类2……</code></p><p>注意：多继承可能引发父类中的同名成员出现，需要加作用域区分，且C++实际开发中不建议用多继承</p><h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p>概述：两个派生类继承同一个基类，又有某个类同时继承这两个派生类，这种继承被称为菱形继承，或者钻石继承</p><p>问题：菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费，利用虚继承可以解决问题</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class animal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int m_age;</span><br><span class="line">&#125;;</span><br><span class="line">//继承前加关键字virtual后，变为虚继承</span><br><span class="line">//此时公共的父类animal称为虚基类</span><br><span class="line">class sheep : virtual public animal &#123;&#125;;</span><br><span class="line">class tuo   : virtual public animal &#123;&#125;;</span><br><span class="line">class sheeptuo : public sheep,public tuo &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="多态的基本概述"><a href="#多态的基本概述" class="headerlink" title="多态的基本概述"></a>多态的基本概述</h4><p>概述：多态是C++面向对象三大特征之一</p><p>多态分为两类</p><ul><li>静态多态：函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态：派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别</p><ul><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数（用关键字virtual修饰）</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><p>概述：在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容，因此可以将虚函数改为纯虚函数</p><p>纯虚函数语法：<code>virtual 返回值类型 函数名（参数列表）=0；</code></p><p>当类中有了纯虚函数，这个类也被称为抽象类</p><p>抽象类特点：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方法：将父类中的析构函数改为虚析构或者纯虚析构</p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：virtual ~类名(){}</p><p>纯虚析构语法：</p><ul><li>virtual ~类名() = 0;</li><li>类名::~类名(){}</li></ul><p>注意：</p><ul><li>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</li><li>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</li><li>拥有纯虚析构函数的类也属于抽象类</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>文件可以将数据持久化，C++中对文件操作需要包含头文件<fstream></p><p>文件类型分为两种：</p><ol><li>文本文件     -文件以文本的ASCII码形式存储在计算中</li><li>二进制文件 -文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类</p><ul><li>ofstream：写操作</li><li>ifstream：读操作</li><li>fstream：读写操作</li></ul><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>写文件步骤如下：</p><ul><li>包含头文件</li><li>创建流对象<ul><li>ofstream ofs;</li></ul></li><li>打开文件<ul><li>ofs.open(“文件路径”，打开方式);</li></ul></li><li>写数据<ul><li>ofs &lt;&lt; “写入的数据”；</li></ul></li><li>关键文件<ul><li>ofs.close();</li></ul></li></ul><p>文件打开方式：</p><div class="table-container"><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table></div><p>注意：文件打开方式可以配合使用，利用|操作符</p><p>例如：用二进制方式写文件<code>ios::binary|ios::out</code></p><p>总结：</p><ul><li>文件操作必须包含头文件fstream</li><li>读文件可以利用ofstream，或者fstream类</li><li>打开文件时候需要指定操作文件路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>读文件步骤如下：</p><ul><li>包含头文件</li><li>创建流对象<ul><li>ifstream ifs;</li></ul></li><li>打开文件并判断文件是否打开成功<ul><li>ifs.open(“文件路径”，打开方式);</li></ul></li><li>读数据<ul><li>四种方式读取</li></ul></li><li>关键文件<ul><li>ifs.close();</li></ul></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//第一种方式</span><br><span class="line">char bur[1024]=&#123;0&#125;</span><br><span class="line">while (ifs &gt;&gt; buf)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//第二种</span><br><span class="line">char buf[1024]=&#123;0&#125;;</span><br><span class="line">while (ifs.getline(buf,sizeof(buf)))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//第三种</span><br><span class="line">string buf;</span><br><span class="line">while (getline(ifs,buf))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//第四种</span><br><span class="line">char c;</span><br><span class="line">while ((c = ifs.get()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>读文件可以利用ifstream，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close关闭文件</li></ul><h4 id="写二进制文件"><a href="#写二进制文件" class="headerlink" title="写二进制文件"></a>写二进制文件</h4><p>以二进制的方式对文件进行读写操作，打开方式要指定为<code>ios::binary</code></p><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><h4 id="读二进制文件"><a href="#读二进制文件" class="headerlink" title="读二进制文件"></a>读二进制文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char * buffer,int len)；</code></p><p>参数解释：字符指针buffer指向内存中的一段存储空间。len是读写的字节数</p><h3 id="笔记补充"><a href="#笔记补充" class="headerlink" title="笔记补充"></a>笔记补充</h3><p>如果看到这里还没有能解决你的疑问，那么你应该具有了一定的相当的编程基础，这个时候的你已经有能力只通过文档就能学好编程的能力了，这里我推荐一个C++的文档，希望你能解决你的疑问。</p><p><a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">C++ 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;C-的学习开始&quot;&gt;&lt;a href=&quot;#C-的学习开始&quot; class=&quot;headerlink&quot; title=&quot;C++的学习开始&quot;&gt;&lt;/a&gt;C++的学习开始&lt;/h3&gt;&lt;h4 id=&quot;编译器的下载（Visual-Studio）&quot;&gt;&lt;a href=&quot;#编译器的下载（Vis</summary>
      
    
    
    
    <category term="编程笔记" scheme="https://yufusir.github.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://yufusir.github.io/tags/C/"/>
    
    <category term="编程语言" scheme="https://yufusir.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>blog的搭建</title>
    <link href="https://yufusir.github.io/posts/d6cdeee.html"/>
    <id>https://yufusir.github.io/posts/d6cdeee.html</id>
    <published>2024-08-02T16:00:00.000Z</published>
    <updated>2024-08-19T17:02:25.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用Hexo搭建blog"><a href="#利用Hexo搭建blog" class="headerlink" title="利用Hexo搭建blog"></a>利用Hexo搭建blog</h3><p>这篇文章只是用来记录我搭建blog的过程的，虽然我这次布置的有些小小拉跨，但是对于我自己的使用是十分足够的，使用hexo布置blog在GitHub上基本免费的（有钱就别用这种搭建，费时费力），我可能会在之后的时间里对这个网站优化。总体而言，有个独属于自己的博客在感觉上还是不错的。如果也有人想用hexo搭建blog，我会把教程与资料分享在下面，欢迎大家与我互换友链</p><h4 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h4><p>b站安知鱼有一套完整的教程<a href="https://www.bilibili.com/video/BV13v4y1c75G/?spm_id_from=333.788&amp;vd_source=d7aed904328df9600c4d6478e2ce67b8">01.hexo博客搭建最终效果展示_哔哩哔哩_bilibili</a></p><h4 id="中途需要的资源网站与文章"><a href="#中途需要的资源网站与文章" class="headerlink" title="中途需要的资源网站与文章"></a>中途需要的资源网站与文章</h4><p>hexo的安装<a href="https://blog.anheyu.com/posts/ddae.html">使用 Github Pages 和 Hexo 搭建自己的独立博客 | 安知鱼 (anheyu.com)</a></p><p>butterfly的安装<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p><p>butterfly的配置<a href="https://blog.anheyu.com/posts/sdxhu.html">butterfly 重装日记 | 安知鱼 (anheyu.com)</a></p><p>node的官网<a href="https://nodejs.org/en/download/prebuilt-installer">Node.js — Download Node.js® (nodejs.org)</a></p><p>git的官网<a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></p><p>免费图床<a href="https://www.superbed.cn/signup?from_id=127373">https://www.superbed.cn/signup?from_id=127373</a></p><p>注意：有部分软件在国外，所以魔法必要，但如果你的魔法不太行，可以到清华镜像里面找找</p><h4 id="hexo操作"><a href="#hexo操作" class="headerlink" title="hexo操作"></a>hexo操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">清除缓存</span><br><span class="line">hexo cl</span><br><span class="line"></span><br><span class="line">保存</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">本地运行</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">上传github</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">更新动漫数据</span><br><span class="line">hexo bangumi -u</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;利用Hexo搭建blog&quot;&gt;&lt;a href=&quot;#利用Hexo搭建blog&quot; class=&quot;headerlink&quot; title=&quot;利用Hexo搭建blog&quot;&gt;&lt;/a&gt;利用Hexo搭建blog&lt;/h3&gt;&lt;p&gt;这篇文章只是用来记录我搭建blog的过程的，虽然我这次布置的</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://yufusir.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员python自学笔记，超详细（内置环境配置与编译器的下载）</title>
    <link href="https://yufusir.github.io/posts/c0de5885.html"/>
    <id>https://yufusir.github.io/posts/c0de5885.html</id>
    <published>2024-06-08T16:00:00.000Z</published>
    <updated>2024-10-02T06:08:52.169Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python的学习"><a href="#Python的学习" class="headerlink" title="Python的学习"></a>Python的学习</h3><h4 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h4><p>请参考以下文章</p><p><a href="https://blog.csdn.net/Xuange_Aha/article/details/128615437?ops_request_misc=%7B%22request%5Fid%22%3A%22171791844516777224416555%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=171791844516777224416555&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-4-128615437-null-null.142^v100^pc_search_result_base8&amp;utm_term=python环境配置&amp;spm=1018.2226.3001.4187">Python：环境变量配置方法 详细教程_python环境变量的配置-CSDN博客</a></p><h4 id="编译器的下载"><a href="#编译器的下载" class="headerlink" title="编译器的下载"></a>编译器的下载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jetbrains.com.cn/en-us/pycharm/</span><br></pre></td></tr></table></figure><h4 id="HelloWorld案例的实现"><a href="#HelloWorld案例的实现" class="headerlink" title="HelloWorld案例的实现"></a>HelloWorld案例的实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;HelloWorld&quot;)</span><br></pre></td></tr></table></figure><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print()输出括号的内容之后默认回车，变量与变量之间用逗号隔开</span><br><span class="line">input(提示信息)显示提示信息（可有可无），接收键盘的输入，获得的内容默认转换为字符串</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#为单行注释</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;为多行注释</span><br></pre></td></tr></table></figure><p>变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">概述：</span><br><span class="line">能够储存计算结果的或能表示值的抽象概念，变量没有数据类型，可以存储任意数据</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h4><p>概述：判断数据类型</p><h4 id="常见的转换语句"><a href="#常见的转换语句" class="headerlink" title="常见的转换语句"></a>常见的转换语句</h4><div class="table-container"><table><thead><tr><th>语句（函数）</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将对象x转换为字符串</td></tr></tbody></table></div><h4 id="字符串的拼接与格式化"><a href="#字符串的拼接与格式化" class="headerlink" title="字符串的拼接与格式化"></a>字符串的拼接与格式化</h4><p>拼接：</p><p>使用“+”号连接字符串变量或者字符串字面量，但是无法与非字符串类型进行拼接</p><p>格式化：</p><ul><li>“%占位符”%变量</li><li>f“{变量}  {变量}” </li></ul><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if型：</span><br><span class="line"></span><br><span class="line">if 要判断的条件：</span><br><span class="line">条件成立时，要做的事</span><br><span class="line">#注意，用缩进表示归属于的代码块</span><br><span class="line"></span><br><span class="line">if else型：</span><br><span class="line"></span><br><span class="line">if 要判断的条件：</span><br><span class="line">条件成立时，要做的事</span><br><span class="line">else：</span><br><span class="line">条件不成立及要做的事</span><br><span class="line"></span><br><span class="line">if elif else型：</span><br><span class="line"></span><br><span class="line">if 要判断的条件：</span><br><span class="line">条件成立时，要做的事</span><br><span class="line">elif 要判断的条件：</span><br><span class="line">条件成立及要做的事</span><br><span class="line">else：</span><br><span class="line">条件不成立要做的事</span><br></pre></td></tr></table></figure><h4 id="随机数的产生"><a href="#随机数的产生" class="headerlink" title="随机数的产生"></a>随机数的产生</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">num = random.randint(a,b)</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 条件：</span><br><span class="line">条件满足时，做的事情</span><br></pre></td></tr></table></figure><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p>注意用缩进表示层次关系就行</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">for 临时变量 in 待处理数据集（序列）：</span><br><span class="line">循环执行代码</span><br></pre></td></tr></table></figure><p>注意：他会将序列的元素一个一个放入临时变量里在代码区处理，直到所有的元素都处理才停止</p><h4 id="循环中断与停止"><a href="#循环中断与停止" class="headerlink" title="循环中断与停止"></a>循环中断与停止</h4><ul><li>continue：中断循环，直接进入下一次</li><li>break：结束循环</li></ul><h4 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h4><p>功能：</p><p>获得一个数字序列</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range(num)#从0开始到num结束（不含有num本身），步长默认为1</span><br><span class="line">range(num1,num2)#从num1到num2结束（不含有num2本身），步长默认为1</span><br><span class="line">range(num1,num2,step)#从num1到num2结束（不含有num2本身），步长为step</span><br></pre></td></tr></table></figure><p>range用途很多，多数用在for循环场景</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>概述：</p><p>组织好的，可重复使用的，用来实现特定功能的代码段</p><p>定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数名（传入参数）：</span><br><span class="line">函数体</span><br><span class="line">return 返回值</span><br></pre></td></tr></table></figure><h4 id="lambda匿名函数"><a href="#lambda匿名函数" class="headerlink" title="lambda匿名函数"></a>lambda匿名函数</h4><p>概述：无名称的函数，只可临时使用一次</p><p>定义：    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lambda 传入参数：函数体（一行代码）</span><br><span class="line">注意：只能写一行代码，无法写多行代码</span><br></pre></td></tr></table></figure><h4 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def test_return():</span><br><span class="line">return 1,2</span><br><span class="line"></span><br><span class="line">x,y = test_return()</span><br><span class="line">print(x) #结果1</span><br><span class="line">print(y) #结果2</span><br><span class="line"></span><br><span class="line">按照返回的顺序，写对应顺序的多个变量接受即可</span><br><span class="line">变量之间用逗号隔开</span><br><span class="line">支持不同类型的数据return</span><br></pre></td></tr></table></figure><h4 id="多个传参方式"><a href="#多个传参方式" class="headerlink" title="多个传参方式"></a>多个传参方式</h4><ul><li><p>位置传参：根据参数位置来传递参数</p></li><li><p>关键字传参：通过”键=值“形式传递参数，没有顺序要求</p></li><li><p>缺省参数：缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值</p></li><li><p>不定长参数：也叫可变参数，用于不确定调用的时候会传递多少个参数（不传参也可以）</p><ul><li><p>位置传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def user_info(*arge):</span><br><span class="line">print(arge)</span><br><span class="line"></span><br><span class="line">#(&#x27;TOM&#x27;)</span><br><span class="line">user_info(&#x27;TOM&#x27;)</span><br><span class="line">#(&#x27;TOM&#x27;,&#x27;18&#x27;)</span><br><span class="line">user_info(&#x27;TOM&#x27;,18)</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">传进的所有参数都会被args变量收集，他会根据传进参数的位置合并为一个元组（tuple），args是元组类型，这就是元组类型，这就是元组类型，这就是位置传递</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>关键字传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def user_info(**kargs):</span><br><span class="line">print(kwargs)</span><br><span class="line"></span><br><span class="line">#&#123;&#x27;name&#x27;;&#x27;TOM&#x27;,&#x27;age&#x27;;18,&#x27;id&#x27;:110&#125;</span><br><span class="line">user_info(name=&#x27;TOM&#x27;,age=18,id=110)</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">参数是”键=值“形式的形式的情况下，所有的”键=值“都会被kwargs接受，同时会根据”键=值“组成字典</span><br></pre></td></tr></table></figure></li></ul><p>注意：</p><ul><li>位置参数必须出现在其他参数前面，包括函数定义和调用</li></ul><h4 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test_func(compute):</span><br><span class="line">result = compute(1,2)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">def compute(x,y):</span><br><span class="line">return x+y</span><br><span class="line"></span><br><span class="line">test_func(compute) #结果：3</span><br></pre></td></tr></table></figure><p>这是一种计算逻辑的传递，而非数据的传递，就像上述代码那样，不仅仅是相加，相减，相除，等任何逻辑都可以自行定义并作为函数传入</p><h4 id="None"><a href="#None" class="headerlink" title="None"></a>None</h4><p>概述：</p><p>None是类型‘NoneType’的字面量，用于表示：空的，无意义的</p><p>函数不是用return就会默认返回None</p><h4 id="说明文档"><a href="#说明文档" class="headerlink" title="说明文档"></a>说明文档</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">param x: 参数x的说明</span><br><span class="line">param y: 参数y的说明</span><br><span class="line">return:  返回值的说明</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><p>变量注解</p><ul><li>语法一：变量：类型</li><li>语法二：在注释中，#type：类型</li></ul><p>函数注解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数方法名(形参：类型，……，形参：类型) -&gt; 返回值类型：</span><br><span class="line">pass</span><br></pre></td></tr></table></figure><p>注意，返回值类型注解的符号使用：-&gt;</p><p>Union注解（联合类型注解）：</p><ul><li>导包：from typing import Union</li><li>使用：Union[类型，……，类型]</li></ul><h4 id="局部变量与全局变量"><a href="#局部变量与全局变量" class="headerlink" title="局部变量与全局变量"></a>局部变量与全局变量</h4><p>局部变量：</p><p>定义在函数内部，外部无法使用</p><p>全局变量：</p><p>定义在函数外面，函数内外都可以使用，定义在函数内部的变量可以通过global关键字声明为全局变量</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>在程序中是可以做到和生活中那样，设计表格，生产表格，填写表格的组织形式的</p><p>1.在程序中设计表格，我们称为：设计类（class）</p><p>2.在程序中打印生产表格，我们称之为：创建对象</p><p>3.在程序中填写表格，我们称之为：对象属性赋值</p><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>1.类是由哪两部分组成呢？</p><ul><li><p>类的属性，称之为：成员变量</p></li><li><p>类的行为，称之为：成员方法</p><p>注意：函数是写在类外的，定义在类内部，我们都称之为方法</p></li></ul><p>2.类和成员方法的定义语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 类名称:</span><br><span class="line">成员变量</span><br><span class="line"></span><br><span class="line">def 成员方法(self,参数列表):</span><br><span class="line">成员方法体</span><br><span class="line"></span><br><span class="line">对象 = 类名称()</span><br></pre></td></tr></table></figure><p>3.self的作用</p><ul><li>表示类对象本身的意思</li><li>只有通过self，成员方法才能访问类的成员变量</li><li>self出现在形参列表中，但是不占用参数位置，无需理会</li></ul><h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><p>1.现实世界的事物由什么组成？</p><ul><li>属性</li><li>行为</li></ul><p>类也可以包含属性和行为，所以使用类描述现实世界事物非常合适的</p><p>2.类和对象的关系是什么？</p><ul><li>类是程序中的“设计图纸”</li><li>对象是基于图纸生产的具体实体</li></ul><p>3.什么是面向对象编程？</p><p>面向对象编程就是，使用对象进行编程。</p><p>即，设计类，基于类创建对象，并使用对象来完成具体的工作</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>Python类可以使用：<em> init </em> ()方法，称之为构造方法。</p><p>可以实现：</p><ul><li>在创建对象（构造类）的时候，会自动执行。</li><li>在创建类对象（构造类）的时候，将传入的参数自动传递给<em> init </em>方法使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class student:</span><br><span class="line">name = None</span><br><span class="line">age = None     这些可以不写</span><br><span class="line">tel = Nome</span><br><span class="line"></span><br><span class="line">def _init_(self,name.age.tel):</span><br><span class="line">self.name = name</span><br><span class="line">self.age = age</span><br><span class="line">self.tel = tel</span><br><span class="line">print(&quot;student类创建了一个对象&quot;)</span><br></pre></td></tr></table></figure><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><em> init </em></td><td>构造方法，可用于创建类对象的时候设置初始化行为</td></tr><tr><td><em> str </em></td><td>用于实现类对象转字符的行为</td></tr><tr><td><em> lt </em></td><td>用于两个类对象进行小于或大于比较</td></tr><tr><td><em> le </em></td><td>用于两个类进行小于等于或大于等于比较</td></tr><tr><td><em> eq </em></td><td>用于两个类进行相等比较</td></tr></tbody></table></div><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>1.封装的概念是指？</p><p>将现实世界事物在类中描述为属性和方法，即为封装。</p><p>2.什么是私有成员？为什么需要私有成员？</p><p>现实事物有部分属性和行为是不公开对使用者开放的。同样在类的描述属性和方法的时候也需要到达这个要求，就需要定义私有成员了</p><p>3.如何定义私有成员？</p><p>成员变量和成员方法的命名均以 __ 作为开头即可</p><p>4.私有成员的访问限制？</p><ul><li>类对象无法访问私有成员</li><li>类中的其他成员可以访问私有成员</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>什么是继承？</p><p>继承就是一个类，继承另外一个类的成员变量和成员方法</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class 类(父类1,父类2,父类3,...,父类n):</span><br><span class="line">类内容体</span><br></pre></td></tr></table></figure><p>子类构建的类对象，可以</p><ul><li>有自己的成员变量，和成员方法</li><li>使用父类的成员变量和成员方法</li></ul><p>2.单继承和多继承</p><p>单继承：一个类继承另一个类</p><p>多继承：一个类继承多个类，按照顺序从左向右依次继承</p><p>多继承中，如果父类有同名方法或属性，先继承的优先级高于后继承</p><p>3.pass关键之的作用是什么</p><p>pass是占位语句，用来保证函数（方法 ）或类定义的完整，表示无内容，空的意思</p><h4 id="复写"><a href="#复写" class="headerlink" title="复写"></a>复写</h4><p>1.复写表示：</p><p>对父类的成员属性或者成员方法进行重新定义</p><p>2.复写的语法：</p><p>在子类中重新实现同名成员方法或成员属性即可</p><p>3.在子类中，如何调用父类成员</p><p>方法一：</p><ul><li><p>调用父类成员</p><p>使用成员变量：父类名.成员变量</p><p>使用成员方法：父类名.成员方法(self)</p></li></ul><p>方法2：</p><ul><li><p>使用super()调用父类成员变量</p><p>使用成员变量：super().成员变量</p><p>使用成员方法：super().成员方法()</p></li></ul><p>注意：只能可以在子类内部调用父类的同名成员，子类的实体类对象调用默认是调用子类复写的</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>1.什么是多态？</p><p>多态指的是，同一个行为的不同对象获得不同的状态。</p><p>如，定一个函数（方法），通过类型注释声明需要父类对象，实际传入子类对象进行工作，从而获得不同的工作状态 </p><p>2.什么是抽象类（接口的）</p><p>包含抽象方法的类，称之为抽象类。抽象方法是指：没有具体实现的方法（pass）称之为抽象方法</p><p>3.抽象类的作用</p><p>多用于做顶层设计（设计标准），一边子类做具体实现。</p><p>也是对子类的一种软性约束，要求子类必须复写（实现）父类的一些方法，并配合多态使用，获得不同的工作状态。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>1.什么是闭包？</p><p>定义双重函数，内层嵌套可以访问外层函数的变量，将内存函数作为外层函数的返回，此内层函数就是闭包函数</p><p>2.闭包的好处和缺点？</p><ul><li>优点：不定义全局变量，也可以让函数持续访问和修改一个外部变量</li><li>优点：闭包函数引用的外部变量，是外层函数的内部变量。作用域封闭难以被误操作修改</li><li>缺点：额外的内存占用</li></ul><p>3.nonlocal关键字的作用</p><p>在闭包函数（内部函数中）想要修改外部变量的变量值，需要用nonlocal声明这个外部变量</p><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>1.什么是装饰器？</p><p>装饰器就是使用一个闭包函数，在闭包函数内调用目标函数。可以达到不改动目标函数的同时。增加额外的功能。</p><p>2.装饰器的写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def outer(func):</span><br><span class="line">def inner();</span><br><span class="line">print(&quot;我要睡觉了&quot;)</span><br><span class="line">func()</span><br><span class="line">print(&quot;我要起床了&quot;)</span><br><span class="line">return inner</span><br><span class="line">    </span><br><span class="line">@outer</span><br><span class="line">def sleep():</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line">print(&quot;睡眠中……&quot;)</span><br><span class="line">time.sleep(random.randint(1,5))</span><br><span class="line">sleep()</span><br></pre></td></tr></table></figure><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>1.什么是设计模式</p><p>设计模式就是一种编程套路。使用特定的套路得到特定的效果</p><p>2.什么是单例设计模式</p><p>单例模式就是对一个类，只获取其唯一的类实例对象，维持复用它。</p><ul><li>节省空间</li><li>节省创建对象的开销</li></ul><p>3.什么是工厂模式</p><p>将对象的创建由使用原生类本身创造，转换到由特定的工厂方法来创造</p><p>4.好处</p><ul><li>大批量创建对象的时候有统一的入口方法，易于代码维护</li><li>当发生修改，仅修改工厂类的创建方法即可</li><li>符合现实世界模式，即由工厂来制作产品（对象）</li></ul><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>1.什么是进程</p><p>程序在操作系统内运行，即成为一个运行进程</p><p>2.什么是线程</p><p>进程内部可以有多个线程，程序的运行本质上就是由进程内部的线程在实际工作的</p><p>3.什么是并行执行</p><ul><li>多个线程同时在运行，即不同的程序同时运行，称之为：多任务并行执行</li><li>一个进程内多个线程同时在运行，称之为：多线程并行执行</li></ul><p>threading模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">thread_obj = threading.Thread([group [,targer [, name [, args [,kwargs]]]])</span><br><span class="line">- group:暂时无用，未来功能的预留参数</span><br><span class="line">- target:执行目标任务名</span><br><span class="line">- args:以元组的方式给执行任务传参</span><br><span class="line">- kwargs:以字典方式给执行任务传参</span><br><span class="line">- neme:线程名，一般不用设置</span><br><span class="line">#启动线程，让线程开始工作</span><br><span class="line">thread_obj.start()</span><br><span class="line">#创建线程对象</span><br><span class="line">thread_obj = threading.Thread(target=func)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>1.数据库是什么？有什么作用呢？</p><p>数据库就是指数据存储的库，作用就是组织数据并存储数据。</p><p>2.数据库如何组织数据呢？</p><p>按照：库-&gt;表-&gt;数据 三个层级进行组织</p><p>3.数据库软件是什么？我们学习哪种数据库软件呢？</p><p>数据库软件就是提供库-&gt;表-&gt;数据,这种数据组织形式的工具软件，也是称之为数据库管理系统</p><p>常见的数据库软件由：Oracle，MySQL，SQL Server，PostgreSQL，SQLite</p><p>4.数据库和SQL的关系是？</p><p>数据库（软件）提供数据组织储存的能力</p><p>SQL语句则是操作数据，数据库的工具语言</p><h4 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h4><p>概述：</p><p>一种可以存储多个元素的python数据类型</p><p>常见的有list（列表），tuple（元组），str（字符串），set（集合），dict（字典）</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><h4 id="基本格式："><a href="#基本格式：" class="headerlink" title="基本格式："></a>基本格式：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#字面量</span><br><span class="line">[元素1，元素2，元素3，...]</span><br><span class="line"></span><br><span class="line">#定义变量</span><br><span class="line">变量名称 = [元素1，元素2，元素3，...]</span><br><span class="line"></span><br><span class="line">#定义空列表</span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = list[]</span><br></pre></td></tr></table></figure><h4 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h4><p>每个元素都有编号，被称为下标索引</p><ul><li>从前到后的方向，编号从0开始递增</li><li>从后向前的方向，编号从-1开始递减</li></ul><h4 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h4><div class="table-container"><table><thead><tr><th>使用方式</th><th>说明</th></tr></thead><tbody><tr><td>列表.append（元素）</td><td>向列表中追加一个元素</td></tr><tr><td>列表.extend（容器）</td><td>将数据容器的内容依次取出，追加到列表尾部</td></tr><tr><td>列表.insert（下标，元素）</td><td>在指定下标处，插入指定的元素</td></tr><tr><td>del 列表[下标]</td><td>删除列表指定下标元素</td></tr><tr><td>列表.pop(下标)</td><td>删除列表指定下标元素</td></tr><tr><td>列表.remove(元素)</td><td>从前向后，删除此元素第一个匹配项</td></tr><tr><td>列表.clear()</td><td>清空列表</td></tr><tr><td>列表.count(元素)</td><td>统计此元素在列表中出现的次数</td></tr><tr><td>列表.index(元素)</td><td>查找指定元素在列表的下标（找不到会报错ValueError）</td></tr><tr><td>len(列表)</td><td>统计容器内有多少元素</td></tr></tbody></table></div><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>可以容纳不容类型的元素（混装）</li><li>数据是有序的（有下标序号）</li><li>允许数据重复</li></ul><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><h4 id="基本格式：-1"><a href="#基本格式：-1" class="headerlink" title="基本格式："></a>基本格式：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#定义元组字面量</span><br><span class="line">(元素，元素，....)</span><br><span class="line"></span><br><span class="line">#定义元组变量</span><br><span class="line">变量名称 = (元素，元素，....)</span><br><span class="line"></span><br><span class="line">#定义空元组</span><br><span class="line">变量名称 = ()</span><br><span class="line">变量名称 = tuple()</span><br></pre></td></tr></table></figure><h4 id="元组的方法"><a href="#元组的方法" class="headerlink" title="元组的方法"></a>元组的方法</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>index()</td><td>查找指定元素在元组的下标（找不到会报错ValueError）</td></tr><tr><td>count()</td><td>统计此元素在元组中出现的次数</td></tr><tr><td>len(元组)</td><td>统计容器内有多少元素</td></tr></tbody></table></div><h4 id="元组的特点"><a href="#元组的特点" class="headerlink" title="元组的特点"></a>元组的特点</h4><p>多数特性与列表一致，不同点在于元组具有不可以修改的特性</p><h3 id="str"><a href="#str" class="headerlink" title="str"></a>str</h3><h4 id="索引：-1"><a href="#索引：-1" class="headerlink" title="索引："></a>索引：</h4><ul><li>从前到后的方向，编号从0开始递增</li><li>从后向前的方向，编号从-1开始递减</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#通过下标获取特定位置字符</span><br><span class="line">name = &quot;helloworld&quot;</span><br><span class="line">print(name[0]) #结果为h</span><br><span class="line">print(name[-1])#结果为d</span><br></pre></td></tr></table></figure><h4 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h4><p>语法：字符串.replace(字符串1，字符串2)</p><p>功能：将字符串内的全部内容：字符串1，替换为字符串2，返回一个新的字符串</p><h4 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h4><p>语法：字符串.split(分隔符字符串)</p><p>功能：按照指定的分隔符字符串，将字符串划分为多个字符串，并返回一个列表对象</p><h4 id="规整操作"><a href="#规整操作" class="headerlink" title="规整操作"></a>规整操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：字符串.strip()    #去除前后的空格</span><br><span class="line">语法：字符串.strip(字符串1) #去除前后指定字符串1中字符</span><br></pre></td></tr></table></figure><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>只存储字符串</li><li>不可修改</li></ul><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>内容有序，可以使用下标索引的一类数据容器，列表，元组，字符串，均可以视为序列</p><h4 id="切片："><a href="#切片：" class="headerlink" title="切片："></a>切片：</h4><p>语法：序列[起始：结束：步长]</p><ul><li>起始可以省略，省略从头开始</li><li>结束可以省略，省略到尾结束</li><li>步长可以省略，省略步长为1（可以为负数，表示倒叙执行）</li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#定义集合字面量</span><br><span class="line">&#123;元素，元素，……&#125;</span><br><span class="line">#定义集合变量</span><br><span class="line">变量名称 = &#123;元素，元素，……&#125;</span><br><span class="line">#定义空集合</span><br><span class="line">变量名称 = set()</span><br></pre></td></tr></table></figure><h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h4><div class="table-container"><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>集合.add(元素)</td><td>集合内添加一个元素</td></tr><tr><td>集合.remove(元素)</td><td>移除集合内指定元素</td></tr><tr><td>集合.pop()</td><td>从集合中随机取出一个元素</td></tr><tr><td>集合.clear()</td><td>将集合清空</td></tr><tr><td>集合1.difference(集合2)</td><td>得到一个新集合，内含2个集合的差集，原有的2个集合内容不变</td></tr><tr><td>集合1,difference_updata(集合2)</td><td>在集合1中，删除集合2中存在的元素，集合1被修改，集合2不变</td></tr><tr><td>集合1.union(集合2)</td><td>得到1个新集合，内含2个集合的全部元素，原有的2个集合内容不变</td></tr><tr><td>len(集合)</td><td>得到一个整数，记录集合的元素数量</td></tr></tbody></table></div><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>可以容纳不同的数据类型（混装）</li><li>数据是无序存储的</li><li>没有重复数据</li><li>可以增加删除元素</li><li>支持for循环</li></ul><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><h4 id="基本格式：-2"><a href="#基本格式：-2" class="headerlink" title="基本格式："></a>基本格式：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#字典存储的是键值对</span><br><span class="line">#定义字典字面量</span><br><span class="line">&#123;key:value,key:value,……&#125;</span><br><span class="line">#定义字典变量</span><br><span class="line">my_dict = &#123;key:value,key:value,……&#125;</span><br><span class="line">#定义空字典</span><br><span class="line">my_dict = &#123;&#125;</span><br><span class="line">my_dict = dict()</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>键值对的Key和Value可以是任意类型（key不可以为字典）</li><li>字典内的Key不能重复，重复添加等于覆盖原有数据</li><li>字典没有下标索引，但可以通过key索检value</li></ul><h4 id="常用功能-1"><a href="#常用功能-1" class="headerlink" title="常用功能"></a>常用功能</h4><div class="table-container"><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>字典[key]</td><td>获取指定key对应的value值</td></tr><tr><td>字典[key]=value</td><td>添加或更新键值对</td></tr><tr><td>字典.pop(key)</td><td>取出key对应的value并在字典内删除此key的键值对</td></tr><tr><td>字典.clear()</td><td>清空字典</td></tr><tr><td>字典.keys()</td><td>获取字典的全部key，可用于for循环遍历字典</td></tr><tr><td>len(字典)</td><td>计算字典内的元素数量</td></tr></tbody></table></div><h3 id="容器的通用功能"><a href="#容器的通用功能" class="headerlink" title="容器的通用功能"></a>容器的通用功能</h3><div class="table-container"><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>通用for循环</td><td>遍历容器（字典是遍历Key）</td></tr><tr><td>max()</td><td>容器内最大的元素</td></tr><tr><td>min()</td><td>容器内最小的元素</td></tr><tr><td>len()</td><td>容器元素的个数</td></tr><tr><td>list()</td><td>转换为列表</td></tr><tr><td>tuple()</td><td>转换为元组</td></tr><tr><td>str()</td><td>转换为字符串</td></tr><tr><td>set()</td><td>转换为集合</td></tr><tr><td>sorted(序列，[reverse=True])</td><td>排序，reverse=True表示降序得到一个排好序的列表</td></tr></tbody></table></div><h4 id="列表的sort方法"><a href="#列表的sort方法" class="headerlink" title="列表的sort方法"></a>列表的sort方法</h4><p>使用方法：</p><p>列表.sort(key=选择排序依据的函数，reverse=True|False)</p><ul><li>参数key，要求传入一个函数，表示将列表的每一个元素都传入函数中，返回排列的依据</li><li>参数reverse，是否反转排序结果，True表示降序，False表示升序</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="open-打开函数"><a href="#open-打开函数" class="headerlink" title="open()打开函数"></a>open()打开函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">open(name,mode,encoding)</span><br><span class="line">name:文件名或文件路径</span><br><span class="line">mode:访问模式</span><br><span class="line">encoding：编码格式（推荐使用UTF-8）</span><br><span class="line">示例代码：</span><br><span class="line">f=open(&#x27;python.txt&#x27;,&#x27;r&#x27;,encoding=&#x27;UTF-8&#x27;)</span><br><span class="line">#encoding的顺序不是第三位，所以不能用位置参数，用关键字参数直接指定</span><br></pre></td></tr></table></figure><p>访问模式</p><div class="table-container"><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会再文件的开头。这是默认模式</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，原有内容会被删除，如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，新的内容将会被写入到已有的内容。如果该文件不存在，创建新文件进行写入。</td></tr></tbody></table></div><h4 id="操作总汇"><a href="#操作总汇" class="headerlink" title="操作总汇"></a>操作总汇</h4><div class="table-container"><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>文件对象 = open(file,mode,encoding)</td><td>打开文件获取文件对象</td></tr><tr><td>文件对象.read(num)</td><td>读取指定长度字节，不指定num读取文件全部</td></tr><tr><td>文件对象.readline()</td><td>读取一行</td></tr><tr><td>文件对象.readlines()</td><td>读取全部行，得到列表</td></tr><tr><td>for line in 文件对象</td><td>for循环文件行，一次循环得到一行数据</td></tr><tr><td>文件对象.close()</td><td>关闭文件对象</td></tr><tr><td>with open() as f</td><td>通过with open语法打开文件，可以自动关闭</td></tr><tr><td>文件对象.wirte()</td><td>写入内容</td></tr><tr><td>文件对象.flush()</td><td>刷新内容到硬盘里</td></tr></tbody></table></div><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">可能发生异常的语句</span><br><span class="line">except 异常 as 别名:</span><br><span class="line">出现异常的手段</span><br><span class="line">else:</span><br><span class="line">未出现异常时应做的事情</span><br><span class="line">finally:</span><br><span class="line">不管出没出异常都会做的事情</span><br></pre></td></tr></table></figure><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><h4 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h4><p>就是一个Python文件，里面有类，函数，变量，我们可以拿来用（导入模块去使用）</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[from 模块名] import [模块|类|变量|函数|*] [as 别名]</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>from可以省略，直接import即可</li><li>as别名可以省略</li><li>通过“.”来确定层级关系</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_main_变量的功能是？</span><br><span class="line">if _main_==&quot;_main_&quot;表示，只有当前程序是直接执行的才会进入if内部，如果是被导入的，则if无法进入</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">不同模块，同名的功能，如果都被导入，那么后导入的会覆盖先导入的</span><br><span class="line">_all_变量可以控制import*的时候那些功能可以被导入</span><br><span class="line"></span><br><span class="line">什么是Python的包？</span><br><span class="line">包就是一个文件夹，里面可以存放许多Python的模块（代码文件），通过包，在逻辑上将一批模块归为一类，方便使用。</span><br><span class="line"></span><br><span class="line">_init_.py文件的作用？</span><br><span class="line">创建包会默认自动创建的文件，通过这个文件来表示一个文件夹是Python的包，而非普通的文件夹。</span><br><span class="line"></span><br><span class="line">_all_变量的作用？</span><br><span class="line">同模块中学习到的是一个作用，控制import*能够导入的内容</span><br></pre></td></tr></table></figure><h3 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h3><h4 id="概述：-2"><a href="#概述：-2" class="headerlink" title="概述："></a>概述：</h4><p>非Python官方制作的包，具有丰富的功能，可以提升我们题高开发效率，如：</p><ul><li>科学计算中常用的：numpy包</li><li>数据分析中常用的：pandas包</li><li>大数据计算中常用的：pyspark，apache-flink包</li><li>图形可视化常用的：matplotlib，pyecharts</li><li>人工智能常用的：tensorflow</li><li>等</li></ul><h4 id="安装第三方包-pip"><a href="#安装第三方包-pip" class="headerlink" title="安装第三方包-pip"></a>安装第三方包-pip</h4><p>利用Python内置的pip程序</p><ul><li>打开我们许久未见的：命令提示符程序，在里输入：</li><li>pip install 包名称</li><li>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> 包名称</li></ul><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><h4 id="什么是json"><a href="#什么是json" class="headerlink" title="什么是json"></a>什么是json</h4><ul><li>Json是一种轻量级的数据交互格式。可以按照json指定的格式去组织和封装数据</li><li>json本质上是一个带有特定格式的字符串</li></ul><p>主要功能：json就是一种在各个编程语言中流通的数据格式（各种编程语言的中转站），负责不同编程语言中的数据传递和交互，类似于：</p><ul><li>国际通用语言—英语</li><li>全中国通用语言—普通话</li></ul><p>Python语言使用JSON有很大优势，因为：JSON无非就是一个单独的字典或者一个内部元素都是字典的列表</p><p>所以JSON可以直接和Python的字典或列表无缝转换。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><div class="table-container"><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>json.dumps(data)</td><td>将python数据转换为json数据，如果有中文数据可以使用：ensure_ascii=False参数来确保中文正常转换</td></tr><tr><td>json.loads(data)</td><td>将json数据转换为Python列表或者字典</td></tr></tbody></table></div><h4 id="PyEcharts模块"><a href="#PyEcharts模块" class="headerlink" title="PyEcharts模块"></a>PyEcharts模块</h4><p>开发可视化图使用的技术栈是：</p><p>Echarts框架的Python版本：PyEcharts包</p><p>如果查看官方示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开官方画廊：https://gallery.pyecharts.org/#/README</span><br></pre></td></tr></table></figure><h4 id="基础折线图"><a href="#基础折线图" class="headerlink" title="基础折线图"></a>基础折线图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 导包Line功能构建折线图对象</span><br><span class="line">from pycharts.charts import Line</span><br><span class="line"></span><br><span class="line"># 得到折线图对象</span><br><span class="line">line = line()</span><br><span class="line"></span><br><span class="line"># 添加x轴数据</span><br><span class="line">line.add_xaxis([&#x27;中国&#x27;,&#x27;美国&#x27;,&#x27;英国&#x27;])</span><br><span class="line"></span><br><span class="line"># 添加y轴数据</span><br><span class="line">line.add_yaxis(&quot;GDP&quot;,[30,20.10])</span><br><span class="line"></span><br><span class="line"># 生成图表</span><br><span class="line">line,render()</span><br></pre></td></tr></table></figure><p>全局配置选项</p><ul><li>配置图标的标题</li><li>配置图列</li><li>配置鼠标移动效果</li><li>配置工具栏</li><li>等整体配置项 </li></ul><h4 id="基础地图"><a href="#基础地图" class="headerlink" title="基础地图"></a>基础地图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 导包map实现对象创造</span><br><span class="line">from pycharts.charts import Map</span><br><span class="line"></span><br><span class="line"># 准备地图对象</span><br><span class="line">map = Map()</span><br><span class="line"></span><br><span class="line"># 准备数据</span><br><span class="line">data = [</span><br><span class="line">(&quot;北京&quot;,99),</span><br><span class="line">(&quot;上海&quot;,199),</span><br><span class="line">(&quot;湖南&quot;,299),</span><br><span class="line">(&quot;台湾&quot;,399),</span><br><span class="line">(&quot;广东&quot;,499)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 添加数据</span><br><span class="line">map.add(&quot;测试地图&quot;,data,&quot;china&quot;)</span><br><span class="line"></span><br><span class="line">#绘图</span><br><span class="line">map.render()</span><br></pre></td></tr></table></figure><h4 id="基础柱状图"><a href="#基础柱状图" class="headerlink" title="基础柱状图"></a>基础柱状图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 导包Bar</span><br><span class="line">from pyecharts.charts import Bar</span><br><span class="line">from pyecharts.options import LabelOpts</span><br><span class="line"></span><br><span class="line"># 构造柱状图对象</span><br><span class="line">bar = Bar（）</span><br><span class="line"></span><br><span class="line"># 添加x轴数据</span><br><span class="line">bar.add_xaxis([&quot;中国&quot;,&quot;英国&quot;,&quot;美国&quot;])</span><br><span class="line"></span><br><span class="line"># 添加y轴数据</span><br><span class="line">bar.add_yaxis(&quot;GDP&quot;,[30,20.10],label_opts=LabelOpts(position=&quot;right&quot;))</span><br><span class="line"></span><br><span class="line"># 反转x和y轴</span><br><span class="line">bar.reversal_axis()</span><br><span class="line"></span><br><span class="line"># 绘图</span><br><span class="line">bar.render(&quot;基础柱状图.html&quot;)</span><br></pre></td></tr></table></figure><p>基础时间柱状图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 导包Bar</span><br><span class="line">from pyecharts.charts import Bar，Timeline</span><br><span class="line">from pyecharts.options import LabelOpts </span><br><span class="line"></span><br><span class="line"># 构造时间线对象</span><br><span class="line">timeline = Timeline()</span><br><span class="line"></span><br><span class="line"># 在时间线内添加柱状图对象</span><br><span class="line">timeline.add(bar1,&quot;点1&quot;)</span><br><span class="line">timeline.add(bar2,&quot;点2&quot;)</span><br><span class="line">timeline.add(bar3,&quot;点3&quot;)</span><br><span class="line"></span><br><span class="line"># 设置自动播放</span><br><span class="line">timeline.add_schema(</span><br><span class="line">play_interval=1000,           #自动播放的时间间隔，单位毫秒</span><br><span class="line">is_timeline_show=True,        #是否在自动播放的时间，显示时间线</span><br><span class="line">is_auto_play=True,            #是否自动播放</span><br><span class="line">is_loop_play=True             #是否循环自动播放</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 绘图</span><br><span class="line">timeline.render(&quot;基础时间柱状图.html&quot;)</span><br></pre></td></tr></table></figure><p>设置主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from pyecharts.globals import ThemeType</span><br><span class="line">timeline = Timeline(</span><br><span class="line">&#123;&quot;theme&quot;:themeType.LIGHT&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h4><p>就是使用字符串来定义规则，并通过规则去验证字符串是否匹配</p><h4 id="正则的三个基础方法："><a href="#正则的三个基础方法：" class="headerlink" title="正则的三个基础方法："></a>正则的三个基础方法：</h4><p>Python正则表达式，使用re模块，并基于re模块中的三个基础方法来做正则匹配。分别是：match,search,findall三个基础方法</p><ul><li><p>re.match(匹配规则，被匹配字符串)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">从被匹配字符串开头进行匹配，匹配成功返回匹配对象（包含匹配的信息），匹配不成功返回空</span><br><span class="line">s = &#x27;python itheima python itheima python itheima&#x27;</span><br><span class="line"></span><br><span class="line">result = re.match(&#x27;python&#x27;,s)</span><br><span class="line">print(result) #&lt;re.Match object; span=(0,6),match=&#x27;python&#x27;</span><br><span class="line">print(resuit.span()) #(0,6)</span><br><span class="line">print(resuit.group()) #python</span><br><span class="line"></span><br><span class="line">s = &#x27;1python itheima python python itheima&#x27;</span><br><span class="line"></span><br><span class="line">result = re.match(&#x27;python&#x27;,s)</span><br><span class="line">print(result) #None</span><br></pre></td></tr></table></figure></li><li><p>search（匹配规则，被匹配字符串）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">搜索整个字符串，找出匹配的。从前向后，找到第一个后，就停止，不会继续向后</span><br><span class="line">s = &#x27;1phthon666itheima666python666&#x27;</span><br><span class="line"></span><br><span class="line">result = re.search(&#x27;python&#x27;,s)</span><br><span class="line">print(result)           #&lt;re.Match object;span=(1,7),match=&#x27;python&#x27;&gt;</span><br><span class="line">print(result.span())    #(1,7)</span><br><span class="line">print(result.group())   #python</span><br><span class="line"></span><br><span class="line">整个字符串都找不到，返回None</span><br><span class="line">s = &#x27;itheima666&#x27;</span><br><span class="line"></span><br><span class="line">result = re.search(&#x27;python&#x27;,s)</span><br><span class="line">print(result)           #Nome</span><br></pre></td></tr></table></figure></li><li><p>findall(匹配规则，被匹配字符串)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">匹配整个字符串，找出全部匹配项</span><br><span class="line">s = &#x27;1python666itheima666python666&#x27;</span><br><span class="line"></span><br><span class="line">result = re.findall(&#x27;python&#x27;,s)</span><br><span class="line">print(result)            #&#123;&#x27;python&#x27;,&#x27;python&#x27;&#125;</span><br><span class="line"></span><br><span class="line">找不到返回空list:[]</span><br><span class="line">s = &#x27;1python666itheima666python666&#x27;</span><br><span class="line"></span><br><span class="line">result = re.findall(&#x27;itcast&#x27;,s)</span><br><span class="line">print(resuit)            #[]</span><br></pre></td></tr></table></figure></li></ul><h4 id="元字符匹配"><a href="#元字符匹配" class="headerlink" title="元字符匹配"></a>元字符匹配</h4><p>单字符匹配：</p><div class="table-container"><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>.</td><td>匹配任意一个字符（除了\n），\ .匹配点本身</td></tr><tr><td>[]</td><td>匹配[]中列举的字符</td></tr><tr><td>\d</td><td>匹配数字，即0-9</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\s</td><td>匹配空白，及空格，tab键</td></tr><tr><td>\S</td><td>匹配非空白</td></tr><tr><td>\w</td><td>匹配单词字符，即a-z，A-Z，0-9，_</td></tr><tr><td>\W</td><td>匹配非单词字符</td></tr></tbody></table></div><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串 s = &quot;itheima1@@python2!!666##itcast3&quot;</span><br><span class="line">找出全部数字：re.findall(r&#x27;\d&#x27;,s)</span><br><span class="line">找出特殊字符：re.findall(r&#x27;\W&#x27;,s)</span><br><span class="line">找出全部英文字母：re.findall(r&#x27;[a-zA-Z]&#x27;,s)</span><br><span class="line">[]内可以写：[a-zA-Z0-9]这三种范围组合或指定单个字符如[aceDFG135]</span><br><span class="line">注意：字符串的r标记表示，字符串内转移字符无效，作为普通字符使用</span><br></pre></td></tr></table></figure><p>数量匹配：</p><div class="table-container"><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个规则的字符现0至无数次</td></tr><tr><td>+</td><td>匹配前一个规则的字符出现1至无数次</td></tr><tr><td>？</td><td>匹配前一个规则的字符出现0次或1次</td></tr><tr><td>{m}</td><td>匹配前一个规则的字符出现m次</td></tr><tr><td>{m,}</td><td>匹配前一个规则的字符出现最少m次、</td></tr><tr><td>{m,n}</td><td>匹配前一个规则的字符出现m到n次</td></tr></tbody></table></div><p>边界匹配：</p><div class="table-container"><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr><tr><td>\b</td><td>匹配一个单词的边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr></tbody></table></div><p>分组匹配：</p><ul><li><code>|</code> 可以比配左右任意一个表达式</li><li><code>()</code> 可以将括号中字符作为一个分组</li></ul><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#socktr创建对象</span><br><span class="line">import socket</span><br><span class="line">socket_server = socker.socket()</span><br><span class="line"></span><br><span class="line">#绑定socket_server到指定IP和地址</span><br><span class="line">socker_server.bind(host.port)</span><br><span class="line"></span><br><span class="line">#服务器开始监听端口</span><br><span class="line">socker_server.listen(backlog)</span><br><span class="line">#backlog为int整数，表示允许的连接数量，超过的会等待，可以不填满，不填会自动设置一个合理值</span><br><span class="line"></span><br><span class="line">#接听客服端连接，获取连接对象</span><br><span class="line">conn.address = socker_server.accept()</span><br><span class="line">print(f&quot;接受到客户端连接，连接来自：&#123;address&#125;&quot;)</span><br><span class="line">#accept方法是阻塞方法，如果没有连接，会卡再当前这一行不向下执行代码</span><br><span class="line">#accpet返回的是一个二元元组，可以使用上述形式，用两个变量接受二元元组的2个元素</span><br><span class="line"></span><br><span class="line">#客户端连接后，通过recv方法，接收客户端发送的消息</span><br><span class="line">while True:</span><br><span class="line">data = conn.recv(1024).decode(&quot;UTF-8&quot;)</span><br><span class="line">#recv方法的返回值是字节数组（Bytes），可以通过decode使用UTF-8解码为字符串</span><br><span class="line">#recv方法的传参是buffsize，缓冲区大小，一般设置为1024即可</span><br><span class="line">if data == &#x27;exit&#x27;:</span><br><span class="line">break</span><br><span class="line">print(&quot;接收到发送来的数据：&quot;，data)</span><br><span class="line"># 可以通过while True无限循环来持续和客户端进行数据交互</span><br><span class="line">#可以通过判定客户端发来的特殊标记，如exit，来退出无限循环</span><br><span class="line"></span><br><span class="line">#通过conn（客户端当次连接对象），调用send方法可以回复消息</span><br><span class="line">while True:</span><br><span class="line">data = conn.recv(1024).decode(&quot;UTF-8&quot;)</span><br><span class="line">if data == &#x27;exit&#x27;:</span><br><span class="line">break </span><br><span class="line">print(&quot;接收到发送来的数据：&quot;，data)</span><br><span class="line">conn.send(&quot;你好呀哈哈哈&quot;，encode(&quot;UTF-8&quot;))</span><br><span class="line"></span><br><span class="line">#conn（客户端当次连接对象)和socket_server对象调用close方法，关闭连接</span><br></pre></td></tr></table></figure><p>下载网络调试助手作为客户端<br><a href="https://github.com/nicedayzhu/netAssist/releases">https://github.com/nicedayzhu/netAssist/releases</a></p><h4 id="客服端开发"><a href="#客服端开发" class="headerlink" title="客服端开发"></a>客服端开发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#创建socket对象</span><br><span class="line">import socket</span><br><span class="line">socket_client = socket.socket()</span><br><span class="line"></span><br><span class="line">#连接到服务端</span><br><span class="line">socket_client.connect((&quot;localhost&quot;,8888))</span><br><span class="line"></span><br><span class="line">#发送消息</span><br><span class="line">while True:  #可以通过无限循环来确保持续的发送消息给服务端</span><br><span class="line">send_msg = input(&quot;请输入要发送的消息&quot;)</span><br><span class="line">if send_msg = &#x27;exit&#x27;:</span><br><span class="line"># 通过特殊标记来确保可以退出无限循环</span><br><span class="line">break</span><br><span class="line">socket_client.send(send_msg.encode(&quot;UTF-8&quot;)</span><br><span class="line"># 消息需要编码为字节数组（UTF-8编码)</span><br><span class="line"></span><br><span class="line">#接收返回消息</span><br><span class="line">while True:</span><br><span class="line">send_msg =input(&quot;请输入要发送的消息&quot;).encode（&quot;UTF-8&quot;)</span><br><span class="line">socket_client.send(send_msg)</span><br><span class="line"></span><br><span class="line">recv_data = socket_client.recv(1024) # 1024是缓冲区大小，一般1024即可</span><br><span class="line">#recv方法是阻塞式的，即不接收到返回，就卡在这里等待</span><br><span class="line"></span><br><span class="line">print(&quot;服务端回复消息为：&quot;,recv_data.decode(&quot;UTF-8&quot;）) </span><br><span class="line">#接受的消息需要通过UTF-8解码为字符串</span><br><span class="line"></span><br><span class="line">#关闭链接</span><br><span class="line">socket_client.close()  # 最后通过close关闭链接</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Python的学习&quot;&gt;&lt;a href=&quot;#Python的学习&quot; class=&quot;headerlink&quot; title=&quot;Python的学习&quot;&gt;&lt;/a&gt;Python的学习&lt;/h3&gt;&lt;h4 id=&quot;环境的搭建&quot;&gt;&lt;a href=&quot;#环境的搭建&quot; class=&quot;header</summary>
      
    
    
    
    <category term="编程笔记" scheme="https://yufusir.github.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="编程语言" scheme="https://yufusir.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="python" scheme="https://yufusir.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>黑马程序员java自学笔记（包括Java环境配置与IDEA的下载地址）</title>
    <link href="https://yufusir.github.io/posts/4454963.html"/>
    <id>https://yufusir.github.io/posts/4454963.html</id>
    <published>2024-05-18T16:00:00.000Z</published>
    <updated>2024-08-19T16:35:26.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java学习的开始"><a href="#java学习的开始" class="headerlink" title="java学习的开始"></a>java学习的开始</h3><h4 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h4><p>请参考如下文章：</p><p><a href="https://blog.csdn.net/u011397981/article/details/129495097">【Java】java 环境配置(详细教程)_java配置环境教程-CSDN博客</a></p><h4 id="常用的DOS命令："><a href="#常用的DOS命令：" class="headerlink" title="常用的DOS命令："></a>常用的DOS命令：</h4><ul><li>按下win+R</li><li>输入cmd</li></ul><div class="table-container"><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称：</td><td>盘符切换。E:回车，表示切换到E盘</td></tr><tr><td>dir</td><td>查看当前路径下的内容</td></tr><tr><td>cd 目录</td><td>进入单级目录</td></tr><tr><td>cd..</td><td>退回到上级目录</td></tr><tr><td>cd 目录1\目录2 \ …</td><td>进入多级目录</td></tr><tr><td>cd\</td><td>退回到盘符目录</td></tr><tr><td>cls</td><td>清屏</td></tr><tr><td>exit</td><td>退出命令提示符窗口</td></tr></tbody></table></div><h4 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h4><ul><li><p>新建一个文本文档文件，修改名称为HelloWorld.java</p></li><li><p>用记事本打开HelloWorld.java文件，输入程序内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;//保存文件Crtl + s</span><br></pre></td></tr></table></figure></li><li><p>打开命令提示符窗口，进入HelloWorld.java所在的目录。输入指令编译和执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">编译：javac 文件名.java</span><br><span class="line">范例：javac HelloWorld.java</span><br><span class="line"></span><br><span class="line">执行：java 类名</span><br><span class="line">范例: java Hello World</span><br></pre></td></tr></table></figure></li></ul><h4 id="编译工具的下载："><a href="#编译工具的下载：" class="headerlink" title="编译工具的下载："></a>编译工具的下载：</h4><p><a href="https://www.jetbrains.com/idea/download/other.html">Other Versions - IntelliJ IDEA (jetbrains.com)</a> </p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>概述：</p><p>方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p><p>注意：</p><ul><li>方法必须先创建才能使用，该过程成为方法的定义</li><li>方法创建后并不是直接使用，需要手动使用后才会执行，该过程成为方法的调用</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>构造方法是一个特殊的方法（方法名为类名的方法）</p><p>作用：创建对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">public class 类名&#123;</span><br><span class="line">修饰符 类名（参数）&#123;</span><br><span class="line">//注意：如果使用带参的构造方法，必须先创一个无参的构造方法</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能：主要是完成对象数据的初始化</p><h4 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项"></a>构造方法的注意事项</h4><p>构造方法的创建</p><ul><li>如果没有定义构造方法，系统将会给一个默认的无参构造方法</li><li>如果定义了构造方法，系统将不会提供默认的构造方法</li></ul><p>构造方法的重载</p><ul><li>如果定义了带参构造方法，还要使用无参构造方法，就必须再写一个无参构造方法</li></ul><p>推荐的使用方式</p><ul><li>无论是否使用，都手工书写无参构造方法</li></ul><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="什么是对象："><a href="#什么是对象：" class="headerlink" title="什么是对象："></a>什么是对象：</h4><p>万物皆为对象，客观存在的事物都是对象</p><h4 id="什么是类："><a href="#什么是类：" class="headerlink" title="什么是类："></a>什么是类：</h4><p>类是对现实生活中一类具有共同属性和行为的事物的抽象</p><h4 id="类的特点："><a href="#类的特点：" class="headerlink" title="类的特点："></a>类的特点：</h4><ul><li>类是对象的数据类型</li><li>类是具有相同属性和行为的一组对象的集合</li></ul><h4 id="什么是对象的属性"><a href="#什么是对象的属性" class="headerlink" title="什么是对象的属性"></a>什么是对象的属性</h4><p>属性：</p><p>对象具有的各种特征，每个对象的每个属性都拥有特定的值</p><h4 id="什么是对象的行为"><a href="#什么是对象的行为" class="headerlink" title="什么是对象的行为"></a>什么是对象的行为</h4><p>行为：</p><p>对象能够执行的操作</p><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4><p>类是对象的抽象，对象是类的实体</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;数据类型&gt; 对象 = new ArrayList&lt;&gt;()</span><br></pre></td></tr></table></figure><h4 id="添加方法-E-e是元素的意思"><a href="#添加方法-E-e是元素的意思" class="headerlink" title="添加方法(E e是元素的意思)"></a>添加方法(E e是元素的意思)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e);</span><br><span class="line">将指定的元素追加到此集合的末尾</span><br><span class="line">public void add(int index,E element);</span><br><span class="line">在此集合中指定位置插入指定元素</span><br><span class="line">public booleam remove(Object o);</span><br><span class="line">删除指定元素，返回删除是否成功</span><br><span class="line">public E remove(int index);</span><br><span class="line">删除指定索引处的元素，返回被删除的元素</span><br><span class="line">public E set(int index,E element);</span><br><span class="line">修改指定位置的元素，返回被修改的元素</span><br><span class="line">public E get(int index);</span><br><span class="line">返回指定索引处元素</span><br><span class="line">public int size();</span><br><span class="line">返回集合元素的个数</span><br></pre></td></tr></table></figure><h3 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h3><h4 id="特有功能（方法）"><a href="#特有功能（方法）" class="headerlink" title="特有功能（方法）"></a>特有功能（方法）</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public E getFirst()</td><td>返回此列表中的第一个元素</td></tr><tr><td>public E getLast()</td><td>返回此列表中最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table></div><h3 id="LinkedHashSet集合"><a href="#LinkedHashSet集合" class="headerlink" title="LinkedHashSet集合"></a>LinkedHashSet集合</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>哈希表和链表实现的Set接口，具有可预测的迭代次序</li><li>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</li><li>由哈希表保证元素唯一，也就是说没有重复的元素</li></ul><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>不包含重复元素的集合</li><li>没有带索引的方法，所以不能使用普通for循环遍历</li></ul><h4 id="HashSet-集合"><a href="#HashSet-集合" class="headerlink" title="HashSet()集合"></a>HashSet()集合</h4><p>HashSet集合特点</p><ul><li>底层数据结构是哈希表</li><li>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致</li><li>没有索引的方法，所以不能使用普通for循环遍历</li><li>由于是Set集合，所以是不包含重复元素的集合</li></ul><p>HashSet集合保证元素唯一性源码分析（太多了，也不是特别重要，自己了解）</p><h4 id="TreeSet集合"><a href="#TreeSet集合" class="headerlink" title="TreeSet集合"></a>TreeSet集合</h4><p>特点：</p><ul><li>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法<ul><li>TreeSet():根据去元素的自然排序进行排序</li><li>TreeSet(Comparator comparator):根据指定的比较器进行排序</li></ul></li><li>没有带索引的方法，所以不能使用普通for循环遍历</li><li>由于是Set集合，所以不包含重复元素的集合</li></ul><h4 id="自然排序Comparable的使用"><a href="#自然排序Comparable的使用" class="headerlink" title="自然排序Comparable的使用"></a>自然排序Comparable的使用</h4><ul><li>用TreeSer集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的</li><li>自然排序，就是让元素所属的类实现Comparable接口，重写comparaTo(T o)方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul><h4 id="比较器排序Comparator的使用"><a href="#比较器排序Comparator的使用" class="headerlink" title="比较器排序Comparator的使用"></a>比较器排序Comparator的使用</h4><ul><li>用TreeSet集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序的</li><li>比较器排序，就是让集合构造方法接收Comparator的实现类对象，重写compara(T o1,T o2)方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要要求和次要条件来来写</li></ul><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="Collection集合概述："><a href="#Collection集合概述：" class="headerlink" title="Collection集合概述："></a>Collection集合概述：</h4><ul><li>是单例集合的顶层接口，他表示一组对象，这些对象也称为Collection的元素</li><li>JDK不提供此接口的任何直接实现，他提供更具体的子接口（如Set和List）实现</li></ul><h4 id="创建Collection集合的对象"><a href="#创建Collection集合的对象" class="headerlink" title="创建Collection集合的对象"></a>创建Collection集合的对象</h4><ul><li>多态的方式</li><li>具体的实现类ArrayList</li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素</td></tr><tr><td>boolean remove(Object o)</td><td>从集合中移除指定的元素</td></tr><tr><td>void clear()</td><td>清空集合中的元素</td></tr><tr><td>boolean contains(Object o)</td><td>判断集合中是否存在指定的元素</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>in size()</td><td>集合的长度，也就是集合中的元素的个数</td></tr></tbody></table></div><h4 id="Collection集合的遍历"><a href="#Collection集合的遍历" class="headerlink" title="Collection集合的遍历"></a>Collection集合的遍历</h4><p>Iterator</p><ul><li>Iterator<E>iterator():返回此集合中元素的迭代器，通过集合的iterator()方法得到</li><li>迭代器是通过集合的iterator()方法得到的，所以我们说它是依赖于集合而存在的</li></ul><p>Iterator中的常用方法</p><ul><li>E next()：返回迭代中的下一个元素</li><li>boolean hasNext()：如果迭代具有更多元素，则返回true</li></ul><h3 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>是针对集合操作的工具类</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T extends Comparable&lt;?super T&gt;&gt; void sort(List&lt;T&gt; list)</span><br><span class="line">将指定的列表按升序排序</span><br><span class="line">public static void reverse(List&lt;?&gt;list)</span><br><span class="line">反转指定列表中元素的顺序</span><br><span class="line">public static void shuffle(List&lt;?&gt;list)</span><br><span class="line">使用默认的随机源随机排列指定的列表</span><br></pre></td></tr></table></figure><h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>概述：</p><ul><li>有序集合（也称为序列），用户可以精确控制列表中的每个元素的插入位置。用户可以通过整数索引访问元素，并搜索元素</li><li>与Set集合不同，列表通常允许重复的元素</li></ul><p>List集合特点</p><ul><li>有序：存储和取出的元素顺序一致</li><li>可重复：存储的元素可以重复</li></ul><h4 id="List集合特有方法"><a href="#List集合特有方法" class="headerlink" title="List集合特有方法"></a>List集合特有方法</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table></div><h4 id="并发修改异常-ConcurrentModificationException"><a href="#并发修改异常-ConcurrentModificationException" class="headerlink" title="并发修改异常(ConcurrentModificationException)"></a>并发修改异常(ConcurrentModificationException)</h4><p>产生原因：</p><p>迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器获取元素中判断预期修改值和实际修改值不一致</p><p>解决方案：</p><p>用for循环遍历，然后用集合对象做对应的操作即可</p><h4 id="ListIterator-列表迭代器"><a href="#ListIterator-列表迭代器" class="headerlink" title="ListIterator(列表迭代器)"></a>ListIterator(列表迭代器)</h4><p>作用：</p><ul><li>通过List集合的listIterator()方法得到，所以说它是List集合特有的迭代器</li><li>用于允许程序员沿任意方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置</li></ul><p>ListIterator中常用方法：</p><ul><li>E next();返回迭代中的下一个元素</li><li>boolean hasNext();如果迭代具有更多元素，则返回true</li><li>E previous();返回列表中上一个元素</li><li>boolean hasPrevious();如果此列表迭代器在相反方向遍历列表时具有更对元素，则返回true</li><li>void add(E e);指定的元素插入列表  </li></ul><h4 id="List集合子类特点"><a href="#List集合子类特点" class="headerlink" title="List集合子类特点"></a>List集合子类特点</h4><p>常用子类：ArrayList，LinkedList</p><ul><li>Array List：底层数据结构是数组，查询快，增删慢</li><li>LinkedList：底层数据结构是链表，查询慢，增删快</li></ul><h3 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h3><p>概述：</p><ul><li>Interface Map<k,V> K:键的类型 V:值的类型</li><li>将键映射到值的对象：不能包含重复的键：每个键可以映射到最多一个值</li><li>举例： 学生的学号（键）和姓名（值）</li></ul><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V put (K key,V value)</td><td>添加元素</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table></div><h4 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V get(Object key)</td><td>根据键获取值</td></tr><tr><td>Set<K> keySet()</td><td>获取所有键的集合</td></tr><tr><td>Collection<V>values()</td><td>获取所有值的集合</td></tr><tr><td>Set<Map.Entry<K,V>&gt;entrySet()</td><td>获取所有键值对对象的集合</td></tr></tbody></table></div><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ul><li>简化了数组和Collection集合的遍历</li><li>实现了Iterable接口的类允许其对象成为增强型for语句的目标</li><li>它是JDK5之后出现的，其内部原理是一个Iterator迭代器</li></ul><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><p>for(元素数据类型 变量名：数组或者Collection集合){</p><p>//在此处使用变量即可，该变量就是元素</p><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">范例：</span><br><span class="line">int[] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="line">for(int i:arr)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h4><p>数据结构是计算机存储、组织数据的方式。是指相互之间存在一种或多种特定关系的数据元素的集合（通常情况下，精心选择的数据结构可以带来更高的运行或着存储效率）</p><h4 id="常见数据结构之栈"><a href="#常见数据结构之栈" class="headerlink" title="常见数据结构之栈"></a>常见数据结构之栈</h4><p>栈是一种数据先进后出的数据模型，有栈顶元素和栈低元素</p><p>数据进入栈模型的过程称为：压/进栈</p><p>数据离开栈模型的过程称为：弹/出栈</p><h4 id="常见数据结构之队列"><a href="#常见数据结构之队列" class="headerlink" title="常见数据结构之队列"></a>常见数据结构之队列</h4><p>队列是一种数据先进先出的模型，入队列方向为后端，出队列方向为前端</p><p>数据从后端进入队列模式的过程称为：入队列</p><p>数据从前端离开队列模型的过程称为：出队列</p><h4 id="常见数据结构之数组"><a href="#常见数据结构之数组" class="headerlink" title="常见数据结构之数组"></a>常见数据结构之数组</h4><p>概述：数组是一种查询快，增删慢的模型</p><ul><li>查询数据通过索引定位，查询任意数据耗时相同，<strong>查询效率高</strong></li><li>删除数据时，要将原始数据删除，同时后面每个数据前移，<strong>删除数据效率低</strong></li><li>添加数据是，添加位置后的每个数据后移，在添加元素，<strong>添加效率极低</strong></li></ul><h4 id="常见数据结构之链表"><a href="#常见数据结构之链表" class="headerlink" title="常见数据结构之链表"></a>常见数据结构之链表</h4><p>概述：有头结点，有结点，结点由数据（是存储具体的数据，也是这个结点的存储位置）和地址（下个结点的地址）构成，头结点由head和^(指空地址，节点指向空地址表示结束)</p><p>特点：</p><p>链表是一种增删快的模型（对比数组）</p><p>链表是一种查询慢的模型（对比数组）</p><h4 id="常见数据结构之哈希表"><a href="#常见数据结构之哈希表" class="headerlink" title="常见数据结构之哈希表"></a>常见数据结构之哈希表</h4><p>概述：JDK8之前，底层采用数据+链表实现，可以说是一个元素为链表的数组，JDK8以后，在长度比较长的时候，底层实现了优化</p><p>如何存储数据：</p><p>哈希表默认由16个单位容量（0-15），然后将存储的数据的哈希值对16取余，对应的余数放进列表，然后在列表里依次判断是否重复，如果没有，则添加</p><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><p>概述：System包含几个有用得类字段和方法，它不能被实例化</p><p>常用方法：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止当前运行得Java虚拟机，非零表示异常终止</td></tr><tr><td>public static long currentTimeMillis()</td><td>返回当前时间（以毫秒为单位）</td></tr></tbody></table></div><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="概述：-2"><a href="#概述：-2" class="headerlink" title="概述："></a>概述：</h4><ul><li>是面向对象三大特征之一（封装，继承，多态）</li><li>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都在影藏在对象内部的，外界无法直接操作</li></ul><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><ul><li>将类的信息隐藏在内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问</li><li>成员变量private，提供了对应的getXxx()/setXxx()方法</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>通过方法来控制成员变量的操作，提高了代码的安全性</li><li>把代码用的方法进行封装，提高了代码的复用性</li></ul><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><h4 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class 子类名 extends 父类&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="继承中子类的特点"><a href="#继承中子类的特点" class="headerlink" title="继承中子类的特点"></a>继承中子类的特点</h4><ul><li>子类可以有父类的内容</li><li>子类还可以有自己特有的内容</li></ul><h4 id="继承中变量的访问特点（在子类方法中访问一个变量）"><a href="#继承中变量的访问特点（在子类方法中访问一个变量）" class="headerlink" title="继承中变量的访问特点（在子类方法中访问一个变量）"></a>继承中变量的访问特点（在子类方法中访问一个变量）</h4><ul><li>子类局部范围找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果没有就报错（不考虑父亲的父亲…）</li></ul><h4 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h4><p>子类中所有的构造方法默认都会访问父类中的无参的构造方法，这是为什么？</p><ul><li>因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成数据的初始化</li><li>每一个子类构造方法的第一条语句默认都是：super()</li></ul><p>如果父类中没有无参构造方法，只有带参构造方法，该这么办呢？</p><ul><li>通过使用super关键字去显示调用父类的带参构造方法</li><li>在父类中自己提供一个无参构造方法（推荐自己给出无参构造方法）</li></ul><h4 id="继承中成员方法的访问特点"><a href="#继承中成员方法的访问特点" class="headerlink" title="继承中成员方法的访问特点"></a>继承中成员方法的访问特点</h4><p>通过子类对象访问一个方法</p><ul><li>子类成员范围找</li><li>父类成员范围找</li><li>如果没有就报错（不考虑父亲的父亲…）</li></ul><p>java中继承的注意事项</p><ul><li>Java中类只支持单继承，不支持多继承</li><li>Java中类支持多层继承</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>访问本类成员变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.成员变量</span><br></pre></td></tr></table></figure><p>访问本类构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this(...)</span><br></pre></td></tr></table></figure><p>访问本类成员方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.成员方法(...)</span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>访问父类成员变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super.成员变量</span><br></pre></td></tr></table></figure><p>访问父类构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(...)</span><br></pre></td></tr></table></figure><p>访问父类成员方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super.成员方法(...)</span><br></pre></td></tr></table></figure><h3 id="Override-重写"><a href="#Override-重写" class="headerlink" title="@Override(重写)"></a>@Override(重写)</h3><ul><li>是一个注解</li><li>可以帮助我们检查重写方法声明的正确性</li></ul><p>方法重写注意事项</p><ul><li>私有方法不能被重写（父类私有成员子类是不能被继承的）</li><li>子类方法访问权限不能更低（public&gt;默认&gt;私有）</li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态中成员访问特点</p><ul><li>成员变量：编译看左边，执行看左边</li><li>成员方法：编译看左边，执行看右边</li></ul><p>为什么成员变量和成员方法的访问不一样？</p><ul><li>因为成员方法有重写，而成员变量没有</li></ul><p>多态的好处与弊端</p><ul><li>多态的好处：提高了编程的扩展性（具体表现：定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作）</li><li>多态的弊端：不能使用子类的特有功能</li></ul><p>多态中的转型</p><ul><li><p>向上转型：从子到父，父类引用指向子类对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fu a = new zi()</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>向下转型：从父到子，父类引用转为子类对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zi b = (zi)a</span><br></pre></td></tr></table></figure></li></ul><h3 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h3><p>抽象类的特点</p><ul><li><p>抽象类和方法必须使用abstract关键字修饰</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public abstract class 类名&#123;&#125;</span><br><span class="line">public abstract void eat()</span><br></pre></td></tr></table></figure></li><li><p>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</p></li><li><p>抽象类不能实例化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">抽象类如何实例化呢？参照多态的方法，通过子类对象实例化，这叫抽象类多态</span><br></pre></td></tr></table></figure></li><li><p>抽象类的子类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">要么重写抽象类中的所有抽象方法</span><br><span class="line">要么是抽象类</span><br></pre></td></tr></table></figure></li></ul><p>抽象类的成员特点</p><ul><li>成员变量可以是变量，也可以是常量</li><li>可以有构造方法，但是不能实例化，构造方法的作用是用于子类访问父类数据的初始化</li><li>成员方法中的抽象方法可以限定子类必须完成某些动作，而那些非抽象方法是为了提高代码的复用性</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用，而Java中的接口更多体现在对行为的抽象</p><h4 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h4><ul><li><p>接口关键字interface修饰</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>类实现接口用implements表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class 类名 implements 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口不能实例化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态</span><br><span class="line">多态的形式：具体类多态，抽象类多态，接口多态</span><br><span class="line">多态的前提：有继承或者实现关系；有方法重写；有父（类/接口）引用指向（子/实现）类对象</span><br></pre></td></tr></table></figure></li><li><p>接口的实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">要么重写接口中的所有抽象方法</span><br><span class="line">要么是抽象类</span><br></pre></td></tr></table></figure></li></ul><h4 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h4><ul><li><p>成员变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只能是常量</span><br><span class="line">默认修饰符：public static final</span><br></pre></td></tr></table></figure></li><li><p>构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在</span><br><span class="line">一个类如果没有父类，就默认继承Object类</span><br></pre></td></tr></table></figure></li><li><p>成员方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只能是抽象方法</span><br><span class="line">默认修饰符：public abstract</span><br></pre></td></tr></table></figure></li></ul><h4 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h4><ul><li>类和类的关系<ul><li>继承关系，只能单继承，但是可以多层继承</li></ul></li><li>类和接口的关系<ul><li>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li></ul></li><li>接口和接口的关系<ul><li>继承关系，可以单继承，也可以多继承</li></ul></li></ul><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><ul><li>成员区别<ul><li>抽象类：变量，常量，有构造方法，有抽象方法，也有非抽象方法</li><li>接口：常量，抽象方法</li></ul></li><li>关系区别<ul><li>类与类：继承，单继承</li><li>类与接口：实现，可以单实现，也可以多实现</li><li>接口与接口：继承，单继承，多继承</li></ul></li><li>设计理念区别<ul><li>抽象类：对类抽象，包括属性、行为</li><li>接口：对行为抽象，主要是行为</li></ul></li></ul><h3 id="形参和返回值"><a href="#形参和返回值" class="headerlink" title="形参和返回值"></a>形参和返回值</h3><h4 id="类名作为形参和返回值"><a href="#类名作为形参和返回值" class="headerlink" title="类名作为形参和返回值"></a>类名作为形参和返回值</h4><ul><li>方法的形参是类名，其实需要的是该类的对象</li><li>方法的返回值是类名，其实返回的是该类的对象</li></ul><h4 id="抽象类名作为形参和返回值"><a href="#抽象类名作为形参和返回值" class="headerlink" title="抽象类名作为形参和返回值"></a>抽象类名作为形参和返回值</h4><ul><li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li><li>方法的返回值是抽象类名，其实返回的是抽象类的子类对象</li></ul><h4 id="接口名作为形参和返回值"><a href="#接口名作为形参和返回值" class="headerlink" title="接口名作为形参和返回值"></a>接口名作为形参和返回值</h4><ul><li>方法的形参是接口名。其实需要的是该接口的实现类对象</li><li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li></ul><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>本质就是文件夹，对类进行分类管理</p><h4 id="包得定义格式"><a href="#包得定义格式" class="headerlink" title="包得定义格式"></a>包得定义格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：package 包名；（多级包用.分开）</span><br><span class="line">范例：package com.itheima;</span><br></pre></td></tr></table></figure><h4 id="带包得java类编译和执行"><a href="#带包得java类编译和执行" class="headerlink" title="带包得java类编译和执行"></a>带包得java类编译和执行</h4><p>手动建包</p><ul><li><p>按照以前的格式编译Java文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure></li><li><p>手动创建包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在E盘建立文件夹com，然后在com下建立文件夹itheima</span><br></pre></td></tr></table></figure></li><li><p>把calss文件放到包的最里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把HelloWorld.class文件放到com下的itheima这个文件夹下</span><br></pre></td></tr></table></figure></li><li><p>带包执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java com.itheima.HelloWorld</span><br></pre></td></tr></table></figure></li></ul><p>自动建包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -d. HelloWorld.java</span><br></pre></td></tr></table></figure><h4 id="导包的概述和使用"><a href="#导包的概述和使用" class="headerlink" title="导包的概述和使用"></a>导包的概述和使用</h4><p>使用不同包下的类的时，使用的时候要写类的全路径，写的太麻烦了。为了简化带包的操作，Java就提供了导包的功能</p><p>导包格式</p><ul><li>格式：import 包名</li><li>范例：import cn.itcast,Teacher</li></ul><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><div class="table-container"><table><thead><tr><th>修饰符</th><th>同一个类中</th><th>同一个包中子类无关类</th><th>不同包的子类</th><th>不同包的无关类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>默认</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table></div><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>final关键字时最终的意思，可以修饰成员方法，成员变量，类</p><p>final修饰的特点</p><ul><li>修饰方法：表明该方法是最终方法，不能被重写</li><li>修饰变量：表明该变量时常量，不能被再次赋值</li><li>修饰类：表明该类是最终类，不能被继承</li></ul><p>final修饰局部变量</p><ul><li>变量是基本类型：final修饰指的是基本类型的数据值不能发生改变</li><li>变量是引用类型：final修饰指的是引用类型的地址值不能变，但是地址里面的内容是可以发生改变的</li></ul><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>static关键字是静态的意思，可以修饰成员方法，成员变量</p><p>static修饰的特点</p><ul><li>被类的所有对象共享（这也是我们判断是否使用静态关键字的条件）</li><li>可以通过类名调用（当然可以用对象名调用，推荐使用类名调用）</li></ul><p>static访问特点</p><p>非静态的成员方法</p><ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul><p>静态的成员方法（总结成一句话就是：静态成员方法只能访问静态成员）</p><ul><li>能访问静态的成员变量</li><li>能访问静态的成员方法</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>就是在一个类中定义一个类。举例：在一个类A中定义一个类B，类B就被称为内部类</p><h4 id="内部类的访问特点"><a href="#内部类的访问特点" class="headerlink" title="内部类的访问特点"></a>内部类的访问特点</h4><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p>成员内部类，外界如何创建对象使用？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：外部类名.内部类名 对象名 = 外部类名对象.内部类对象；</span><br><span class="line">范例：Outer.Inner oi = new Outer().new Inner();</span><br></pre></td></tr></table></figure><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>概述：局部内部类是在方法中的定义的类，所以外界是无法直接使用，需要在方法内部创建对象并使用，该类可以直接访问外部类的成员，也可以访问内部的局部变量</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>前提：存在一个类或接口，这里的类可以是具体类也可以是抽象类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">new 类名或接口名 ()&#123;</span><br><span class="line">重写方法；</span><br><span class="line">&#125;；</span><br><span class="line">范列：</span><br><span class="line">new Inter()&#123;</span><br><span class="line">public void show()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本质：是一个继承了该类或实现该接口的子类匿名对象</p><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><p>Math类的常用方法</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static int abs(int a)</td><td>返回参数的绝对值</td></tr><tr><td>public static double ceil(double a)</td><td>返回大于或等于参数的最double值，等于一个整数</td></tr><tr><td>public static double floor(double a)</td><td>返回小于或等于参数的最大double值，等于一个整数</td></tr><tr><td>public static int round(float a)</td><td>按照四舍五入返回最接近参数的int</td></tr><tr><td>public static int max(int a,int b)</td><td>返回两个int值中的较大值</td></tr><tr><td>public static int min(int a,int b)</td><td>返回两个int值中的较小值</td></tr><tr><td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr><tr><td>public static double random()</td><td>返回值为double的正值，[0.0,1.0)</td></tr></tbody></table></div><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>概述：Object是类层次结构的根，每个类都可以将Object作为超类。所有类都直接或间接的继承自该类</p><p>构造方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Object()</span><br></pre></td></tr></table></figure><p>为什么说子类的构造方法默认访问的是父类的无参构造方法？</p><p>以为它们的顶级父类只有无参构造方法</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>方法名：public String toString()</p><p>作用：返回对象的字符串表示形式。结果应该是一个简明扼要的表达，容易让人阅读。建议所有子类覆盖此方法,自动生成。</p><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><p>方法名：public booleaan equlas(Object obj)</p><p>作用：比较对象是否相等。默认比较地址，重写方法可以比较内容，推荐重写，自动生成。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>如果有n个数据进行排序，总共需要比较n-1次</li><li>每一次比较完毕，下一次的比较就会少一个数据参与</li></ul><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><p>Arrays类包含用于操作数组的各种方法</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(int[] a)</td><td>返回指定数组的内容的字符串表示形式</td></tr><tr><td>public static void sort(int[] a)</td><td>按照数字顺序排列指定数组</td></tr></tbody></table></div><p>工具类的设计思想：</p><ul><li>构造方法用private修饰</li><li>成员用public static修饰</li></ul><h3 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h3><p>概述：将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p><p>常用的操作之一：用于基本数据类型与字符串类型之间的转换</p><div class="table-container"><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table></div><h4 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a>Integer类</h4><p>概述：Integer  包装一个对象中的原始数据类型int的值</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Integer(int value)</td><td>根据int值创建个一integer对象（过时）</td></tr><tr><td>public Integer(String s)</td><td>根据String值创建Integer对象（过时）</td></tr><tr><td>public static Integer valueOf(int i)</td><td>返回表示指定的int值的integer实例</td></tr><tr><td>public static Integer valueOf(String s)</td><td>返回一个保存指定值的Integer对象String</td></tr></tbody></table></div><h4 id="int和String的相互转换"><a href="#int和String的相互转换" class="headerlink" title="int和String的相互转换"></a>int和String的相互转换</h4><p>基本类型包装类的最常见操作就是：用于基本类型和字符串之间的相互转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int转换为String</span><br><span class="line">public static String valueOf(int i)：返回int参数的字符串表示形式。该方法是String类中的方法</span><br><span class="line">String转换为int</span><br><span class="line">public static int parseInt(String s)：将字符串解析为int类型。该方法是Integer类中的方法</span><br></pre></td></tr></table></figure><h4 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h4><p>装箱：把基本数据类型转换为对应的包装类类型</p><p>拆箱：把包装类类型转换为对应的基本数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = 100;  //自动装箱</span><br><span class="line">i += 200;         //i = i + 200; i + 200 自动拆箱；i = i + 200;是自动装箱</span><br></pre></td></tr></table></figure><p>注意：在使用包装类类型的时候，如果做操作，最好先判断是否为null，我们推荐的是，只要是对象，在使用前就必须进行不为null的判断</p><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>常用的方法</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public long getTime()</td><td>获取的是日期对象从1970年1月1日00:00:00到现在的毫秒</td></tr><tr><td>public void setTime(long time)</td><td>设置时间，给的是毫秒值</td></tr></tbody></table></div><h4 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h4><p>概述：SimpleFormat是个具体的类，用于以区域设置敏感的方式格式化和解析日期。</p><p>日期和时间格式由日期和时间模式字符串指定，在日期和时间模式字符串中，从‘A’到‘Z’以及从‘a’到’z’引号的字母被解释为表示日期或时间字符串的组件的模式字母</p><p>常用的模式字母及对应关系如下：</p><ul><li>y -年</li><li>M-月</li><li>d-日</li><li>H-时</li><li>m-分</li><li>s-秒</li></ul><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public SimpleDateFormat()</td><td>构造一个SimpleDateFormat,使用默认模式和日期格式</td></tr><tr><td>public SimpleDateFormat(String pattern)</td><td>构造一个SimpleDateFormat使用给定的模式和默认的日期格式</td></tr></tbody></table></div><h4 id="SimpleDateFormat格式化和解析日期"><a href="#SimpleDateFormat格式化和解析日期" class="headerlink" title="SimpleDateFormat格式化和解析日期"></a>SimpleDateFormat格式化和解析日期</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式化（从Date到String）</span><br><span class="line">public final String format(Date date):将日期格式化成日期/时间字符串</span><br><span class="line">解析（从String到Date）</span><br><span class="line">public Date parse(String source):从给定字符串的开始解析文本以生成日期</span><br></pre></td></tr></table></figure><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><p>概述：Calendar为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</p><p>Calendar提供了一个类方法getInstance用于获取Calendar对象，其日历字段已使用当前日历和时间初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar rightNow = Calendar,gerInstance();</span><br></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int field)</td><td>返回给定日历字段的值</td></tr><tr><td>public abstract void add(int field,int amount)</td><td>根据日历的规矩，将指定的时间两添加或减去给定的日历字段</td></tr><tr><td>public final void set(int year,int mouth,int date)</td><td>设置当前日历的年月日</td></tr></tbody></table></div><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>概述：就是成语出现了不正常的情况</p><p>异常体系：</p><p>Throwable</p><ul><li>Error</li><li>Exception<ul><li>RuntimeException</li><li>非RuntimeException</li></ul></li></ul><p>Error:严重问题，不需要处理</p><p>Exception:称为异常类，他表示程序本身可能可以处理的问题</p><ul><li>RuntimeException：在编译是不检查的，出现问题后，需要我们回来修改代码</li><li>非RuntimeException：编译期就必须处理的，否则程序不能通过编译，就更不能zhengchangyunxing了</li></ul><h4 id="JVM的默认处理方案"><a href="#JVM的默认处理方案" class="headerlink" title="JVM的默认处理方案"></a>JVM的默认处理方案</h4><p>如果程序出现了问题，我们没有做任何处理，最终JVM会做出默认的处理</p><ul><li>把异常的名称，异常原因及异常出现的位置等信息输入在了控制台</li><li>程序停止执行</li></ul><p>异常处理之 try…catch…</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125;catch(异常类名 变量名)&#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>程序从try里的代码开始执行，出现异常，会自动生成一个异常对象，该异常对象将被提交给java运行时系统，当java运行时系统接受到异常对象时，会到catch中找匹配的异常类，找到后进行异常的处理，执行完毕之后，程序该可以继续往下执行</p><h4 id="Throwable的成员方法"><a href="#Throwable的成员方法" class="headerlink" title="Throwable的成员方法"></a>Throwable的成员方法</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回此throwable的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回此可抛出的简短描述</td></tr><tr><td>public void printStackTrace()</td><td>把异常的错误信息输出在控制台</td></tr></tbody></table></div><h4 id="编译时异常和运行时异常的区别"><a href="#编译时异常和运行时异常的区别" class="headerlink" title="编译时异常和运行时异常的区别"></a>编译时异常和运行时异常的区别</h4><p>java中的异常被分为两大类：编译时异常和运行时异常，也被称为受检异常和非受检异常，所有的RuntimeException类及其子类被称为运行时异常，其他的异常都是编译时异常</p><ul><li>编译时异常：必须显示处理，否则程序就会发生错误，无法通过编译</li><li>运行时异常：无需显示处理，也可以和编译时异常一样处理</li></ul><h4 id="异常处理之-throws"><a href="#异常处理之-throws" class="headerlink" title="异常处理之 throws"></a>异常处理之 throws</h4><p>虽然我们通过try..catch..可以对异常进行处理，但是并不是所有的情况都有权限进行异常的处理，也就是说，有些情况可能出现的异常是我们处理不了的，这个时间该怎么办呢？针对这种情况，Java提供了throws的处理方案</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">throws 异常类名；</span><br></pre></td></tr></table></figure><p>注意：这个格式是跟在方法的括号后面的</p><ul><li>编译时异常必须要进行处理，两种处理方案：try…catch…或者throws，如果采用throws这种方案，将来谁调用谁处理</li><li>运行时异常可以不处理，出现问题后，需要我们回来修改代码</li></ul><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class 异常类名 Exception&#123;</span><br><span class="line">无参构造方法</span><br><span class="line">带参构造方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pubilc class ScoreExecption extends Exception&#123;</span><br><span class="line">public ScoreException()&#123;&#125;</span><br><span class="line">public ScoreException(String message)&#123;</span><br><span class="line">super(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>throws和throw的区别</p><div class="table-container"><table><thead><tr><th>throws</th><th>throw</th></tr></thead><tbody><tr><td>用在方法声明后面，跟的是异常类名</td><td>用在方法体内，跟的是异常对象名</td></tr><tr><td>表示抛出异常，由该方法的调用者来处理</td><td>表示抛出异常，有方法体内的语句处理</td></tr><tr><td>表示出现异常的一种可能性，并不一定会发生这些异常</td><td>执行throw一定抛出了某种yi’chan</td></tr></tbody></table></div><h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><h4 id="概述：-3"><a href="#概述：-3" class="headerlink" title="概述："></a>概述：</h4><p>是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值</p><p>Object类中有个方法可以获取对象的哈希值</p><ul><li>public int hashCode():返回对象的哈希值</li></ul><h4 id="对象的哈希值特点"><a href="#对象的哈希值特点" class="headerlink" title="对象的哈希值特点"></a>对象的哈希值特点</h4><ul><li>同一个对象多次调用hashCode()方法返回的哈希值是相同的</li><li>默认情况下，不同对象的哈希值是不同的，重写hashCode()方法，可以实现让不同对象的哈希值相同</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>是参数化类型，也就是说所操作的数据类型被指定为一个参数</p><h4 id="泛型的定义格式："><a href="#泛型的定义格式：" class="headerlink" title="泛型的定义格式："></a>泛型的定义格式：</h4><ul><li>&lt;类型&gt;:指定一种类型的格式。这里的类型可以看成是型参</li><li>&lt;类型1，类型2….&gt;:指定多种类型的格式，多种类型之间用逗号隔开。这里的类型可以看成 是形参</li><li>将来具体调用时候给定的类型可以看成是形参，并且实参的类型只能是引用数据类型</li></ul><h4 id="泛型的好处："><a href="#泛型的好处：" class="headerlink" title="泛型的好处："></a>泛型的好处：</h4><ul><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：修饰符 class 类名  &lt;类型&gt;&#123;&#125;</span><br><span class="line">范例：public class Generic&lt;T&gt;&#123;&#125;</span><br><span class="line">此处T可以随便写为任意的标识，常见的如T,E,K,V等形式的参数常用于表示泛型</span><br></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>定义格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：修饰符&lt;类型&gt;返回值类型 方法名(类名 变量名)&#123;&#125;</span><br><span class="line">范例：public &lt;T&gt; void show(T t)&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>定义格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：修饰符 interface 接口名&lt;类型&gt;&#123;&#125;</span><br><span class="line">范例：public interface Generic&lt;T&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h4><p>为了表示各种泛型List的父类，可以使用类型通配符</p><ul><li>类型通配符：&lt;?&gt;</li><li>List&lt;?&gt;:表示元素类型未知的List，它的元素可以匹配任何的类型</li><li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li></ul><p>如果说我们不希望List&lt;?&gt;是任何泛型List的父类，只希望它代表某一类泛型List的父类，可以使用类型通配符的上限</p><ul><li>类型通配符上限：&lt;? extends 类型&gt;</li><li>List&lt;? extends Number&gt;:它表示的类型是Number或者其父类型</li></ul><p>除了可以指定类型通配符的上限，我们也可以指定类型通配符的下限</p><ul><li>类型通配符下限：&lt;? super 类型&gt;</li><li>List&lt;?super Number&gt;:它表示的类型是Number或者其父类型</li></ul><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>概述：可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：修饰符 返回值类型 方法名（数据类型……变量名）&#123;&#125;</span><br><span class="line">范例：public static int sum(int... a)&#123;&#125;</span><br></pre></td></tr></table></figure><p>可变参数注意事项：</p><ul><li>这里的变量其实是一个数组</li><li>如果一个方法有多个参数，包含可变参数，可变参数要放在最后面</li></ul><p>可变参数的使用：</p><p>Arrays工具类中有个静态方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; asList(T... a)：返回由指定数组支持的固定大小的列表</span><br><span class="line">返回的集合不能做增删操作，可以做修改操作</span><br></pre></td></tr></table></figure><p>List接口中有一个静态方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;E&gt;List&lt;E&gt; of(E... elements):返回包含任意数量元素的不可变列表</span><br><span class="line">返回的集合不能做增删改操作</span><br></pre></td></tr></table></figure><p>Set接口中有一个静态方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;E&gt;Set&lt;E&gt; of(E...elements):返回一个包含任意数量元素的不可变集合</span><br><span class="line">在给元素的时候，不能给重复元素</span><br><span class="line">返回的集合不能做增删操作，没有修改的方法</span><br></pre></td></tr></table></figure><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>File：它是文件和目录路径名的抽象表示</p><ul><li>文件和目录是可以通过File封装成对象的</li><li>对于File而言，其封装的并不是一个正真存在的文件，仅仅是一个路径名而已，它可以是存在的，也可以是不存在的。将来是要通过具体操作把这个路径的内容转换为具体存在的</li></ul><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</td></tr><tr><td>File(String parent,String child)</td><td>从父路径名字符串和子路径名字字符串创建新的File实例</td></tr><tr><td>File(File parent,String child)</td><td>从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table></div><h4 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能"></a>创建功能</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td></tr><tr><td>public boolean mkdir()</td><td>创建由此抽象路径名命名的目录</td></tr><tr><td>public boolean mkdirs()</td><td>创建由此抽象路径命名的目录，包括任何必需但不存在的父目录</td></tr></tbody></table></div><h4 id="判断和获取功能"><a href="#判断和获取功能" class="headerlink" title="判断和获取功能"></a>判断和获取功能</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说名</th></tr></thead><tbody><tr><td>public boolean isDirectory()</td><td>测试此抽象路径名表示的File是否为目录</td></tr><tr><td>public boolean isFile()</td><td>测试此抽象路径名表示的File是否为文件</td></tr><tr><td>pubilc boolean exists()</td><td>测试此抽象路径名表示的File是否存在</td></tr><tr><td>public String getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td>public String getPath()</td><td>将此抽象路径名转换为路径名字符串</td></tr><tr><td>public String getName()</td><td>返回由此抽象路径名表示的文件或目录的名称</td></tr><tr><td>public String[] list()</td><td>返回此路径名表示的目录中的文件和目录的名称字符串数组</td></tr><tr><td>public File[] listFiles()</td><td>返回此抽象路径名表示的目录中文件和目录的File对象数组</td></tr></tbody></table></div><h4 id="File类删除功能"><a href="#File类删除功能" class="headerlink" title="File类删除功能"></a>File类删除功能</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean delete()</td><td>删除由此抽象路径名表示的文件或目录</td></tr></tbody></table></div><p>绝对路径和相对路径的区别</p><ul><li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：E://itcast//java.txt</li><li>相对路径：必须使用取自其他路径名的信息进行解释。例如：myFile//java.txt</li></ul><p>删除目录时的注意事项：</p><ul><li>如果一个目录中有内容（目录，文件），不能直接删除，应该先删除目录中的内容，最后才能删除目录</li></ul><h3 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h3><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><p>System类中有两个静态的成员变量：</p><ul><li>public static final InputStream in:标准输入流。通常该流对应于键盘输入或主机环境或用户指定的另一个输入源</li><li>public static final PrintStream out:标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另个输出目标</li></ul><p>自己实现键盘录入数据：</p><ul><li>BufferedReader br = new Bufferer(new InputStreamReader(System.in));</li></ul><p>写起来太麻烦了，java就提供了一个类实现键盘录入</p><ul><li>Scanner sc = new Scanner(System.in);</li></ul><p>输出语句的本质：是一个标准的输出流</p><ul><li>PrintStream ps = System.out;</li><li>PrintStream类有的方法，System.out都可以使用</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>概述：是正在运行的程序</p><ul><li>是系统进行资源分配和调用的独立单位</li><li>每一个进程都有它自己的内存空间和系统资源</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>概叙：</p><p>是进程中的单个顺序控制流，是一条执行路径</p><ul><li>单线程：一个进程如果只有一条执行路径，则称为单线程程序</li><li>多线程：一个进程如果有多条执行路径，则称为多线程程序</li></ul><h4 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h4><p>方法一：继承Thread类</p><ul><li>定义一个类MyThread继承Thread类</li><li>在MyThread类中重写run()方法</li><li>创建MyThread类对象</li><li>启动线程</li></ul><p>方法二：实现Runnable接口</p><ul><li>定义一个类MyRunable实现Runnable接口</li><li>在MyRunnable类中重写run()方法</li><li>创建MyRunnable类的对象</li><li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li><li>启动线程</li></ul><p>多线程的实现方案有两种</p><ul><li>继承Thread类</li><li>实现Runnable接口</li></ul><p>相比继承Thread类，实现Runnable接口的好处</p><ul><li>避免了Java单继承的局限性</li><li>适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</li></ul><p>两个小问题</p><ul><li><p>为什么要重写run()方法？</p><p>因为run()用来封装被线程执行的代码</p></li><li><p>run()方法和statrt()方法的区别</p><p>run():封装线程执的代码，直接调用，相当于普通方法的调用</p><p>start():启动线程，然后由JVM调用此线程的run()方法</p></li></ul><h4 id="设置和获取线程名称"><a href="#设置和获取线程名称" class="headerlink" title="设置和获取线程名称"></a>设置和获取线程名称</h4><p>Thread类中设置和获取线程名称的方法</p><ul><li>void setName(String name):将此线程的名称更改为等于参数name</li><li>String getName():返回此线程的名称</li></ul><p>如何获取main()方法所在的线程的名称？</p><ul><li>public static Thread currentThread()返回对当前正在执行的线程对象的引用</li></ul><h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><p>线程有两种调度模型</p><ul><li>分时间模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用cpu，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的cpu时间片相对多一些</li></ul><p>java使用的是抢占式调都模型</p><p>假如计算机只有一个CPU，那么CPU在某个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁强到CPU的使用权是不一样的</p><p>Thread类中设置和获取线程优先级的方法</p><ul><li>public final int getPriority():返回此线程的优先级</li><li>public final void setPriority(int newPriority):更改此线程的优先级</li></ul><p>线程默认优先级是5；线程优先级的范围是：1-10</p><p>线程优先级高级仅仅表示获取的CPU时间片的几率高，但是要在次数比较多，或者多次运行的时候才能看到你想要的效果</p><h4 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static void sleep(long millis)</td><td>使当前正在执行的线程停留（暂停执行）指定的毫秒数</td></tr><tr><td>void join()</td><td>等待这个线程死亡</td></tr><tr><td>void setDaemon(boolean on)</td><td>将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出</td></tr></tbody></table></div><h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><p>要点：</p><ul><li>由新建，就绪，运行或堵塞，死亡组成</li><li>start()使线程具有执行资格</li><li>抢到CPU的线程具有执行权</li><li>sleep()可以堵塞线程</li></ul><h4 id="数据安全问题"><a href="#数据安全问题" class="headerlink" title="数据安全问题"></a>数据安全问题</h4><p>为什么出现问题？（这也就是判断多线程是否会出现数据安全问题的标准）</p><ul><li>是否是多线程环境</li><li>是否有共享数据</li><li>是否有多条语句操作共享数据</li></ul><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p>锁定多条语句操作共享数据，可以使用同步代码块实现</p><ul><li><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronrized(任意对象)&#123;</span><br><span class="line">多条语句操作共享数据的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>synchronized(任意对象):就相当于给代码加锁了，任意对象就可以看成是一把锁</p></li></ul><p>同步的好处和弊端</p><ul><li>好处：解决了多线程的数据安全问题</li><li>弊端：当线程很多时，因为每个线程都会去判断同步上锁，这是很耗费资源的，无形中会降低程序的运行效率</li></ul><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p>同步方法：就是把synchronized关键字加到方法上</p><ul><li><p>格式：</p><p>修饰符 synchronized 返回值类型 方法名（方法参数）{}</p></li></ul><p>同步方法的锁对象时什么呢？</p><ul><li>this</li></ul><p>同步静态方法：就是把synchronized</p><ul><li><p>格式：</p><p>修饰符 static synchronized 返回值类型 方法名（方法参数）{}</p></li></ul><p>同步静态方法的锁对象时什么呢？</p><ul><li>类名.class</li></ul><h4 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h4><p>StringBuffer</p><ul><li>线程安全，可变的字符序列</li><li>从版本JDK5开始，被StringBuilder替代。通常应该使用StringBuilder类，因为它支持所有相同的操作，但它更快，因为它不执行同步</li></ul><p>Vector</p><ul><li>从Java2平台v1.2开始，该类改进了List接口，使其成为Java CollectionsFramework的成员，与新的集合实现不同，Vector被同步。如果不需要线程安全的实现，建议使用ArrayList代替Vertor</li></ul><p>Hashtable</p><ul><li>给类实现了一个哈希表，它将键映射到值。任何非null对象都可以用作键或者值</li><li>从java2平台v1.2开始，该类进行了改进，实现了Map接口，使其成为Java Collections Framework的成员。与新的集合实现不同，Hashtable被同步。如果不需要线程安全的实现，建议使用HashMap替代Hashtable</li></ul><h4 id="Look锁"><a href="#Look锁" class="headerlink" title="Look锁"></a>Look锁</h4><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到哪里加了锁，在哪里释放了锁，为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock</p><p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作</p><p>Lock中提供了获得锁和释放锁的方法</p><ul><li>void lock():获得锁</li><li>void unlock():释放锁</li></ul><p>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</p><p>ReentrantLock的构造方法</p><ul><li>ReentrantLock():创建一个ReentrantLock的实例</li></ul><h4 id="生产者消费者模式概述"><a href="#生产者消费者模式概述" class="headerlink" title="生产者消费者模式概述"></a>生产者消费者模式概述</h4><p>为了体现生产和消费过程中的等待和唤醒，Java就提供了几个方法供我们使用，值几个方法在Object类中</p><p>Object类的等待和唤醒方法：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>导致当前线程等待，直到另一个线程调用对象的notify()方法或者notifyAll()方法</td></tr><tr><td>void notify()</td><td>唤醒正在等待对象监视器的单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒正在等待对象监视器的所有线程</td></tr></tbody></table></div><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h4><p>Java 提供了多种方法来分割字符串。最常用的是使用 <code>String.split()</code> 方法。</p><p>以下是一些示例:</p><p>使用空格分割字符串:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">String[] words = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">// words 数组包含 [&quot;Hello&quot;, &quot;World&quot;]</span></span><br></pre></td></tr></table></figure><p>使用逗号分割字符串:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;apple,banana,cherry&quot;</span>;</span><br><span class="line">String[] fruits = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">// fruits 数组包含 [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</span></span><br></pre></td></tr></table></figure><p>使用正则表达式分割字符串:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java-Python-C++&quot;</span>;</span><br><span class="line">String[] languages = str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="comment">// languages 数组包含 [&quot;Java&quot;, &quot;Python&quot;, &quot;C++&quot;]</span></span><br></pre></td></tr></table></figure><p>限制分割的最大数量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;one two three four&quot;</span>;</span><br><span class="line">String[] parts = str.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// parts 数组包含 [&quot;one&quot;, &quot;two three four&quot;]</span></span><br></pre></td></tr></table></figure><p>在上面的例子中,<code>str.split(&quot; &quot;, 2)</code> 表示最多分割成 2 个部分,即第一个空格之前的部分和剩余的部分。</p><p>总之,<code>String.split()</code> 方法提供了很大的灵活性,可以根据需要使用不同的分隔符或正则表达式来分割字符串。这是 Java 中非常常用的字符串操作技巧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;java学习的开始&quot;&gt;&lt;a href=&quot;#java学习的开始&quot; class=&quot;headerlink&quot; title=&quot;java学习的开始&quot;&gt;&lt;/a&gt;java学习的开始&lt;/h3&gt;&lt;h4 id=&quot;环境的搭建&quot;&gt;&lt;a href=&quot;#环境的搭建&quot; class=&quot;header</summary>
      
    
    
    
    <category term="编程笔记" scheme="https://yufusir.github.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="编程语言" scheme="https://yufusir.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="java" scheme="https://yufusir.github.io/tags/java/"/>
    
  </entry>
  
</feed>
